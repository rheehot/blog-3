<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>아내와 아들 그리고 딸밖에 모르는 남편</title>
    <link>http://sculove.github.io/blog/</link>
    <atom:link href="/blog/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>FrontEnd 개발자. JavaScript, RxJS, Angular, React 기술 경험 블로그</description>
    <pubDate>Sun, 22 Sep 2019 02:08:18 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>프로그래머 아빠가 가르치는 코딩 교육 1</title>
      <link>http://sculove.github.io/blog/2019/09/22/codingWithChild/</link>
      <guid>http://sculove.github.io/blog/2019/09/22/codingWithChild/</guid>
      <pubDate>Sat, 21 Sep 2019 16:36:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;사부와-제자&quot;&gt;&lt;a href=&quot;#사부와-제자&quot; class=&quot;headerlink&quot; title=&quot;사부와 제자&quot;&gt;&lt;/a&gt;사부와 제자&lt;/h2&gt;&lt;p&gt;무술 영화를 보면 사부가 취하는 전형적인 모습이 몇가지 있다.&lt;/p&gt;
&lt;p&gt;그 첫번째로 &lt;code&gt;제자를 고르는 사부의 안목&lt;/code&gt;이다.&lt;/p&gt;
&lt;p&gt;사부는 하나를 알려주면 열을 깨우치는 &lt;code&gt;재능이 있는 사람&lt;/code&gt;을 제자로 두지 않는다. 오히려 재능은 조금 떨어지더라도 &lt;code&gt;심성이 착하고 이타적인 우직한 사람&lt;/code&gt;을 제자로 삼는다. 그때 당시영화를 볼 때에는 권선징악과 같은 교훈적인 면을 다루기 위한 설정이라고만 생각했었다.&lt;/p&gt;
&lt;p&gt;하지만 나도 경험이 쌓이고 사람들을 보다보니 왜 그런 사람을 제자로 선택하는지는 조금은 알 것 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;뭐니뭐니 해도 &lt;code&gt;인성과 태도&lt;/code&gt;이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;두번째로는 &lt;code&gt;제자의 수련 과정&lt;/code&gt;이다. 사부는 제자에게 처음부터 무술을 가르치지 않는다. 물동이 기르는 일만 몇 년을 시키거나 집안 일부터 궂은 일만 계속 시킨다.&lt;/p&gt;
&lt;img src=&quot;/blog/2019/09/22/codingWithChild/practice.jpg&quot;&gt;

&lt;p&gt;결과적으로 사부의 이런 수련과정을 통해 제자는 무술을 배우기 위한 &lt;code&gt;기초 체력&lt;/code&gt;을 기른 것 뿐만아니라 &lt;code&gt;인성과 함께 인내심&lt;/code&gt;도 성장하게 된다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="사부와-제자"><a href="#사부와-제자" class="headerlink" title="사부와 제자"></a>사부와 제자</h2><p>무술 영화를 보면 사부가 취하는 전형적인 모습이 몇가지 있다.</p><p>그 첫번째로 <code>제자를 고르는 사부의 안목</code>이다.</p><p>사부는 하나를 알려주면 열을 깨우치는 <code>재능이 있는 사람</code>을 제자로 두지 않는다. 오히려 재능은 조금 떨어지더라도 <code>심성이 착하고 이타적인 우직한 사람</code>을 제자로 삼는다. 그때 당시영화를 볼 때에는 권선징악과 같은 교훈적인 면을 다루기 위한 설정이라고만 생각했었다.</p><p>하지만 나도 경험이 쌓이고 사람들을 보다보니 왜 그런 사람을 제자로 선택하는지는 조금은 알 것 같다.</p><blockquote><p>뭐니뭐니 해도 <code>인성과 태도</code>이다.</p></blockquote><p>두번째로는 <code>제자의 수련 과정</code>이다. 사부는 제자에게 처음부터 무술을 가르치지 않는다. 물동이 기르는 일만 몇 년을 시키거나 집안 일부터 궂은 일만 계속 시킨다.</p><img src="/blog/2019/09/22/codingWithChild/practice.jpg"><p>결과적으로 사부의 이런 수련과정을 통해 제자는 무술을 배우기 위한 <code>기초 체력</code>을 기른 것 뿐만아니라 <code>인성과 함께 인내심</code>도 성장하게 된다.</p><a id="more"></a><h2 id="유아코딩"><a href="#유아코딩" class="headerlink" title="유아코딩"></a>유아코딩</h2><p>왜 이렇게 서두가 길었냐하면?</p><p>요즘은 초등학교때부터 코딩 수업을 학교에서 한다고 한다. 요즘 아이들은 똑똑해서 잘 할수 있을지 모르겠지만 어렸을때 코딩을 해본 경험에 비추어 봤을때 이게 정말 맞는 건가? 라는 생각이 든다.</p><p>난 어렸을때 빌게이츠 같은 프로그래머가 될거라는 꿈을 나도 모르게 꾸었다. 아쉽게도 내 주위 사람들은 이쪽 분야에 대해 알고 있는 분들이 없었기에 난 책을 통해 그 세계를 조금이나마 엿볼수 있었다.</p><p>그런데 그때 정말 어려웠다. 내가 머리가 나빴던 것도 한 몫했겠지만…</p><p>프로그래밍이라는게 기계적인 면은 익히기 쉽지만. <code>추상화</code>라는 개념이 뒷받침이 되지 않으면 다음 단계를 나갈 수가 없다.</p><p><code>추상화</code>라는 개념에 대한 이해가 명확해야 <code>깨달음(?) 같은 것</code>을 얻게된다.</p><p>그런데 그 때 당시 나는 정말 뭔소리인지 몰랐다. 그냥 책에서 나온 것을 따라하는게 전부였다.</p><p>요즘 아이들이 똑똑하다고 하더라도…</p><p>오조봇, 스크래치와 같은 것을 익히면서 프로그래밍을 잘 배울수 있을까?</p><p>사실 나도 우리 아이에게 안가르쳐 봐서 잘 모르겠다.</p><p>그래서 한번 가르쳐 보려고 한다.</p><p>왜?</p><p>코딩 열풍에 참여하기 위해서?</p><p>아니 <code>아이와 아빠와의 시간을 가져보기 위해서</code>이다.</p><p>회사일이 바쁘다고 예전과 같이 놀아주지 못하는 아빠로서 미안하기도 하고 아이 교육에 신경쓰고 있는 와이프에게도 조금은 도움을 주고 싶은 생각으로 시간이 날때마다 쪼금씩 가르쳐보려고 한다.</p><h3 id="아빠와-아들"><a href="#아빠와-아들" class="headerlink" title="아빠와 아들"></a>아빠와 아들</h3><p>내가 어렸을 때 프로그래머가 되고 싶었던 이유는 게임을 좋아하다보니, 게임을 만들고 싶다는 생각이 강해서 였다.</p><p>내가 만들면 더 잘 만들것 같고, 그런 일들이 재미있을 것 같았다.</p><p>다행인지 모르겠지만 우리아이가 게임을 좋아한다. 안타까운건 와이프는 게임을 극도로 싫어하는 것이 우리아이에게는 불행한 운명(?)이지만…</p><p>뭐 그래도 아빠가 프로그래머니 위안을 삼아보자. ㅋ</p><p>무술영화에서처럼 제자를 고를 수는 없으니 바로 두번째 단계인 기초 체력 부터 기르는 연습을 하기로 했다.</p><p>이름하여 <strong>타자연습!</strong></p><blockquote><p>연장에 익숙해야 뭘해도 잘한다.</p></blockquote><p>작은 것 하나라도 잘하면 흥미가 생기고 자신감이 생기고 그 자신감을 가지고 더 힘든 다음 단계를 넘어 갈 수 있다.</p><p>이런 작은 것들이 모여서 <strong>긍정적인 시각</strong>을 만들고 더 앞으로 나가게 된다.</p><p>어렸을때 했던 한컴타자연습이 아직까지도 있었다. 더군다나 웹으로 회원 가입만 하면 꽁짜로 제공했다.</p><p>안쓸 이유가 없다 ㅋ</p><p><a href="https://typing.malangmalang.com/" rel="external nofollow noopener noreferrer" target="_blank">https://typing.malangmalang.com/</a></p><img src="/blog/2019/09/22/codingWithChild/typing.jpg"><p>자리 연습 1~6단계까지 30분정도 걸렸다.</p><img src="/blog/2019/09/22/codingWithChild/coding1.jpg"><p>열심히 했으니 오십견 방지를 위한 스트레칭도 가르치고.</p><img src="/blog/2019/09/22/codingWithChild/relex.jpg"><p>동기 부여를 위해</p><p><strong>브롤스타즈</strong>도 30분 함께 했다. ㅋ</p><p>다음에는 shift가 있는 자리 연습 7~8 까지 완료하고 계속 반복학습하기!</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2019/09/22/codingWithChild/#disqus_thread</comments>
    </item>
    
    <item>
      <title>돌팔이 종교 생활</title>
      <link>http://sculove.github.io/blog/2019/08/18/religion/</link>
      <guid>http://sculove.github.io/blog/2019/08/18/religion/</guid>
      <pubDate>Sun, 18 Aug 2019 14:24:59 GMT</pubDate>
      <description>
      
        &lt;p&gt;오늘 집 근처의 청계사를 오랫만에 방문했다. 아이들과 계곡 물에서 발도 담그고 숲속 산책길에서 산책도 했다.&lt;/p&gt;
&lt;p&gt;원래는 강화도를 가려고 했는데… 멀리가면 뭐하나? 고생만하지 ㅋ &lt;/p&gt;
&lt;p&gt;아직은 어린아이들과의 나들이다보니 &lt;code&gt;어디를 가는 것&lt;/code&gt;보다 &lt;code&gt;누구랑 어떻게&lt;/code&gt; 보내느냐가 더 중요하다. (엄마아빠들은 알꺼야 후훗!)&lt;/p&gt;
&lt;p&gt;날씨도 좋고 여유도 있어서 절 처마 밑에서 애들과 앉아 아침에 보았던 “아이언맨”에 대한 이야기도 나누고, 저녁에는 통닭시켜먹자 등 쓸데없는 이야기를 나누고 있었다. 반면 우리와는 대조적으로 주변분들은 대부분 간절한 마음으로 절을 하고 계셨다.&lt;/p&gt;
&lt;p&gt;그 모습을 보니 나도 살면서 많이는 아니지만 종교활동을 했던 것이 기억났다.&lt;br&gt;오늘은 추억팔이를 좀 해보려고한다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>오늘 집 근처의 청계사를 오랫만에 방문했다. 아이들과 계곡 물에서 발도 담그고 숲속 산책길에서 산책도 했다.</p><p>원래는 강화도를 가려고 했는데… 멀리가면 뭐하나? 고생만하지 ㅋ </p><p>아직은 어린아이들과의 나들이다보니 <code>어디를 가는 것</code>보다 <code>누구랑 어떻게</code> 보내느냐가 더 중요하다. (엄마아빠들은 알꺼야 후훗!)</p><p>날씨도 좋고 여유도 있어서 절 처마 밑에서 애들과 앉아 아침에 보았던 “아이언맨”에 대한 이야기도 나누고, 저녁에는 통닭시켜먹자 등 쓸데없는 이야기를 나누고 있었다. 반면 우리와는 대조적으로 주변분들은 대부분 간절한 마음으로 절을 하고 계셨다.</p><p>그 모습을 보니 나도 살면서 많이는 아니지만 종교활동을 했던 것이 기억났다.<br>오늘은 추억팔이를 좀 해보려고한다.</p><a id="more"></a><h2 id="생의-첫-종교-생활"><a href="#생의-첫-종교-생활" class="headerlink" title="생의 첫 종교 생활"></a>생의 첫 종교 생활</h2><p>내 생의 첫 종교생활은 초등학교 시절이었다. </p><p>일요일 아침에 눈비비고 일어나서 TV에서 나오는 좋아하는 만화를 보는 게 좋았던 시절임에도 불구하고 내가 일요일 아침부터 교회를 다닌 이유는 </p><p><strong>내가 동경하는 동네 형이 다니는 교회가 궁금하기도 했거니와</strong><br><strong>가끔 교회때 내라고 받은 헌금으로 오락실에 들려 나름 신나는(?) 일요일을 보내 것도</strong> </p><p>즐거웠기 때문이다.</p><p>참고로, 내가 살던 초등학생 시절에는 오락실이 금지공간이었다. 학교 선도부들이 돌아다니면서 오락실에 다니는 아이들을 잡아(?) 가곤했다. 나 또한 잡혀가기도 했고 잡아오기도 했다.</p><p>그동안 잊고 있던 교회를 다시 찾게 된 것은 고등학교를 다니면서이다. 중학교에는 바뻐서 자주 못 만났던 동경하는 동네형과 같은 고등학교를 다니게 되면서 다시 교회에 다니게 되었다.</p><p>물론, 처음 시작은 순순한 마음과 열정으로 교회를 다니게 되었지만. 교회를 그만 다니게 되었을 때는 꽤나 불순한(?) 마음으로 교회를 그만두게 되었다.</p><p>내 첫사랑을 교회에서 만났으니 고등학교 시절에는 거의 범죄나 다름없는 불순함으로 끝을 맺게 되었다.<br>물론, 종종 그때 사귄 친구들과의 인연으로 교회를 아주 가끔 가게 되기도 했지만 이미 마음은 콩밭에 있었기에 다녔다고 하기에는 어렵다.</p><h2 id="두번째-종교-생활"><a href="#두번째-종교-생활" class="headerlink" title="두번째 종교 생활"></a>두번째 종교 생활</h2><p>내가 종교라는 것에 발을 다시 들이게 된 계기는 아이와 와이프 때문에 다시 종교생활을 하게 되었다.</p><p>우리 와이프는 참고로 무신론자이다. 절에 가면 절을 하고 성당에 가면 기도를 한다. 하지만 와이프의 외가 친척분들이 성당에 지극정성으로 다니신다. 이런 영향이 었을까? </p><p>나와 와이프는 첫 아이의 유치원을 물색 도중 성당 내의 유치원이 좋다는 소식을 들었다. 그래서 작정(?)하고 일년 전부터 정말 절실히 성당을 다녔다. 이 때 느낀게 성당은 <code>정말 아무나 받지는 않는구나</code>라는 생각이 들었다. 교육도 한참 받아야했고, 세례의식도 철저하게 받았다. 나와 우리와이프는 세례명도 정식으로 받았다. 나도 바쁜 생활임에도 불구하고 가족의 평화(?)를 위해 나름 열심히 다녔다.</p><p>종교활동에 빨간불이 켜지기 시작한 때는 아이의 유치원이 떨어진 때부터이다. 이때까지만 해도 와이프는 성당을 좋아했고 목사님의 말씀을 잼있게 들었다. 뭐 사실 이때까지는 크게 문제 되진 않았다.<br>연이어 성당의 목사님이 바뀌고 애들 키우다보니 생활의 여유로움이 더 없어지는 것이 문제였다. 특히나 와이프는 바뀐 성당의 목사님에게 고해성사하는 것이 싫다고 했다.</p><p>나도 <code>고해성사</code> 란 것을 한번 해봤는데 사실 이거 좀 곤혹스럽다. <strong>영화에서처럼 내 마음의 짐을 덜어내고 깨달음을 얻지는 못할찌라도 이걸 하는 것의 의미를 느끼지 못했다.</strong></p><p>개인적으로는 고해성사할 만큼 나쁘게 삶을 살아가고 있지 않을 뿐만 아니라 나보다 한참 어린 목사님에게 나의 고민을 이야기하고 공감을 얻는다는게 현실적으로 불가능하다고 느꼈기 때문이다.</p><p>암튼 나와 와이프는 종교생활은 나이들면 하자라는 공동의 합의를 이뤘다.</p><img src="/blog/2019/08/18/religion/re2.jpg"><h2 id="교회-성당-절"><a href="#교회-성당-절" class="headerlink" title="교회, 성당, 절"></a>교회, 성당, 절</h2><p>교회에 가면 즐거움과 젊음이 느껴진다. 사람들은 친절하고 많은 사람들은 행복해 보인다. 도시의 세련된 면도 느껴지고 삶의 활력도 느껴진다.</p><p>성당에 가면 경견함이 느껴진다. 정숙함이 느껴지고 고결함이 느껴진다. 사람들은 자애롭고 평화로워 보인다.</p><p>절에 가면 차분해져서 마음이 편안해진다. 절은 대다수 숲 속에 있어서 그런지 모르겠지만 자연이 주는 아름다움과 여유를 느낄수 있다. 향냄새가 좋고, 들려오는 목탁소리도 내 마음을 정결케 하는 것 같다.</p><p>지금도 우리와이프는 <code>나이들면 성당에 다닐까?</code> 라는 말을 가끔 한다. 하지만 내가 나이가 들면 성당에 갈까?</p><p><strong>내가 느낀 교회는 사교적이면서 쾌활하다. 반면 성당은 사교적이면서 경건하다.</strong></p><p>난 좋게 말하면 긍정적이고 활력있는 사람이지만 반면 침착과 평온과는 사실 거리가 먼 사람이다. 내가 나이가 든다고 해도 이런 경향은 쉽게 변하지 않을 것 같다. 성당은 내 기준으로 지나치게 경건하다. 오히려 내 성격면에서는 교회가 나을 듯 하다.</p><img src="/blog/2019/08/18/religion/re1.jpg"><p>반면 절은 비사교적인 면은 오히려 좋으나 종교의 교리면에서는 별로 공감이 안간다. 종교활동보다는 오히려 인터넷 잘 터지는 절같은 곳에서 살면 좋겠다는 생각을 간혹한다. 나무 사이로 비치는 햇살이 좋고, 절의 풍경소리 그리고 무엇보다도 가족과 함께 찾는 여유로움이 좋기에 좋은 인상이 있다.</p><p>지금은 잘 모르겠지만 지금보다 나이가 더 들면 와이프와 함께 종교활동을 하는 것도 좋을 것 같다라는 막연한 생각은 있다.</p><p>교회든 성당이든 절이든 모르겠지만… ㅋㅋ</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2019/08/18/religion/#disqus_thread</comments>
    </item>
    
    <item>
      <title>오브젝트 책에 대한 잡담 - 2</title>
      <link>http://sculove.github.io/blog/2019/08/10/object-book2/</link>
      <guid>http://sculove.github.io/blog/2019/08/10/object-book2/</guid>
      <pubDate>Sat, 10 Aug 2019 14:39:48 GMT</pubDate>
      <description>
      
        &lt;p&gt;요즘은 회사일이 바뻐서 점심시간을 쪼개고 쪼개서 스터디 아닌 스터디를 하고 있다.&lt;br&gt;1시간이 채 안되는 시간동안 이야기를 했지만, 그래도 꽤 재미있는 이야기들이 오고가서 잠담이라고 치부하기에는 아까운 내용들이다. &lt;/p&gt;
&lt;p&gt;이 글은 Object 책의 두번째 모임의 후기로 책 3~4장에 대한 내용을 토대로 이야기했던 내용과 내가 생각했던 내용들을 정리했다.&lt;/p&gt;
&lt;img src=&quot;/blog/2019/08/10/object-book2/object.jpeg&quot;&gt;


&lt;h3 id=&quot;역할-책임-협력&quot;&gt;&lt;a href=&quot;#역할-책임-협력&quot; class=&quot;headerlink&quot; title=&quot;역할, 책임, 협력&quot;&gt;&lt;/a&gt;역할, 책임, 협력&lt;/h3&gt;&lt;p&gt;이 책이 새롭지 않으면서도 새로운 이유는 그동안 익히 알고 있었던 똑같은 내용을 다른 시각으로 바라보게 해준다는 것이다.&lt;br&gt;꼰대(?) FE 개발자들이 읽기에 충분히 흥미로운 내용이었다.&lt;br&gt;이 책에서는 주구장창 &lt;code&gt;역할&lt;/code&gt;, &lt;code&gt;책임&lt;/code&gt;, &lt;code&gt;협력&lt;/code&gt;에 대해 이야기하고 있다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>요즘은 회사일이 바뻐서 점심시간을 쪼개고 쪼개서 스터디 아닌 스터디를 하고 있다.<br>1시간이 채 안되는 시간동안 이야기를 했지만, 그래도 꽤 재미있는 이야기들이 오고가서 잠담이라고 치부하기에는 아까운 내용들이다. </p><p>이 글은 Object 책의 두번째 모임의 후기로 책 3~4장에 대한 내용을 토대로 이야기했던 내용과 내가 생각했던 내용들을 정리했다.</p><img src="/blog/2019/08/10/object-book2/object.jpeg"><h3 id="역할-책임-협력"><a href="#역할-책임-협력" class="headerlink" title="역할, 책임, 협력"></a>역할, 책임, 협력</h3><p>이 책이 새롭지 않으면서도 새로운 이유는 그동안 익히 알고 있었던 똑같은 내용을 다른 시각으로 바라보게 해준다는 것이다.<br>꼰대(?) FE 개발자들이 읽기에 충분히 흥미로운 내용이었다.<br>이 책에서는 주구장창 <code>역할</code>, <code>책임</code>, <code>협력</code>에 대해 이야기하고 있다.</p><a id="more"></a><p>이를 요약하면 다음 같이 이야기할 수 있다.</p><blockquote><p><code>협력</code>은 <code>메시지</code>를 주고 받는 객체들의 상호작용이고,<br><code>책임</code>은 협력하기 위해하는 <code>행동</code>이다.<br><code>역할</code>은 대체 가능한 책임들의 집합이다.</p></blockquote><p>이 말을 조금 더 생활형으로 표현하면…</p><blockquote><p>나 당신과 해결할 게 있는데…(<code>협력</code>)<br>나는 잘 모르겠고 그것 책임지고 해결하는 곳이 어디야? (<code>책임</code>)<br>1588-XXXX으로 전화하면 되는거야? 전화만 하면 상담원A든 B든 해결해 주는 거지? 오케이. 고마워 (<code>역할</code>)</p></blockquote><h3 id="뭣이-중한디…"><a href="#뭣이-중한디…" class="headerlink" title="뭣이 중한디…"></a>뭣이 중한디…</h3><p>이 책을 읽다보면… 그래 협력도 중요하고 책임도 중요하고 역할도 중요해. 그런데.. 다 중요하면 설계할 때 3가지의 가치가 상충될 때는 어떻게 하지?</p><p>꼭 성경책에서 다 중요하다고 이야기하는 것처럼 이 책에서도 다 중요하다 이야기하고 있자너!<br>하지만, 저자는 분명히 이야기하고 있다.</p><blockquote><p>믿음, 소망, 사랑, 그 중에 제일은 사랑이듯이<br>협력, 책임, 역할. 그 중에 제일은 <code>책임</code>이다.</p></blockquote><img src="/blog/2019/08/10/object-book2/love.jpg"><p>라고…<br>물론 약간의 각색을 한 것이지만 다른 무엇보다도 <code>책임</code>을 어떻게 객체에 부여할 것인지에 대해 가치를 두는게 더 중요하다고 이야기하고 있다.</p><h3 id="데이터-중심의-설계의-문제점"><a href="#데이터-중심의-설계의-문제점" class="headerlink" title="데이터 중심의 설계의 문제점"></a>데이터 중심의 설계의 문제점</h3><p>4장에서는 데이터 중심의 설계 방식과 책임주도설계 방식을 코드로 비교하면서 설명을 해준다.<br>꼰대(?) FE 개발자들이 가장 재미있게 본 장이고 그리고 가장 논의의 중심이 된 장이었다.<br>저자는 데이터 중심의 설계의 문제점이 </p><ul><li>너무 이른 시기에 데이터에 관한 결정을 강요당하고</li><li>협력을 고려하지 않고 객체 자체를 고립시킨체 인터페이스를 정의하도록 하기 때문이라고 이야기한다.</li></ul><h4 id="데이터…데이터…"><a href="#데이터…데이터…" class="headerlink" title="데이터…데이터…"></a>데이터…데이터…</h4><p>이 책에서는 데이터 중심의 설계는 생각부터 무슨 데이터가 쓰이지를 생각하기 때문에 기본적으로 캡슐화를 염두에 두지 못하고 자꾸 데이터만 늘리게되어 결합도를 높이고 응집도를 떨어뜨린다고 이야기한다.  </p><p>정말로 그러한가?<br>맞다.  </p><p>우리가 개발할 때 하는 흔한 실수 중의 하나가 캡슐화를 한답시고 어설푸게 데이터 속성의 캡슐화를 해서 졸라게 많은 get/set 메소드를 만들게 된다.</p><p>왜? 데이터 중심으로 보고 있지만… 캡슐화에 대해 배운거는 있어서 해야하니깐… ㅋㅋ<br>이 책에서는 협력 관점에서 필요한것 만 노출하게 하고 내부의 속성이 외부 인터페이스에 의해 추측될 수 있는 형태도 좋지 않다고 이야기한다.  </p><p>한 마디로.</p><blockquote><p>내부 구현의 변경으로 외부의 객체가 영향을 받는 경우라면 캡슐화 위반이다.</p></blockquote><p>라고 이야기 하고 있다.</p><h4 id="앞으로-쓸-것-같아요"><a href="#앞으로-쓸-것-같아요" class="headerlink" title="앞으로 쓸 것 같아요."></a>앞으로 쓸 것 같아요.</h4><p>또한, 데이터 중심으로 보게 될때의 문제점으로 개발할 때 추측에 의한 설계를 하게 된단다.<br>해서 앞으로 필요할것 같은 메소드, 속성들을 추가해놓게 된다.</p><p>개발할때 가장 흔하게 빠지는 유혹 중에 하나가 바로 <code>추측에 의한 설계</code>이다.<br>생각해보면… 이런 속성. 저런 메소드가 쓰일 것 같아서 개발했어요. 하는 사람들이 많다.  </p><img src="/blog/2019/08/10/object-book2/guess.jpg"><p>참 대견하다. 하나만 하면 될 것을 스스로 열개를 하다니 정말 훌륭하다.<br>하지만… 개인적으로는 안했으면 좋겠다.<br>우선 필요가 없는 것을 만드는 것.<br><strong>특히 외부로 노출되는 인터페이스의 경우에는 하지 않는게 좋다.</strong>  </p><p>왜?<br>확실한 요구사항 없이 만들어 놓은 코드는 당신의 퇴근시간을 늦출 것이고,<br>당신의 동료가 유지보수해야할 코드의 대상이 늘어날 뿐이다.    </p><blockquote><p>제발 추측해서 만들지 말자.</p></blockquote><p>저자는 이와 같은 상황을 두고 협력을 고려하지 않고 객체 자체를 고립시켜서 생각하기 때문에 발생한다고 한다.</p><h3 id="UI와-데이터의-운명적인-만남"><a href="#UI와-데이터의-운명적인-만남" class="headerlink" title="UI와 데이터의 운명적인 만남"></a>UI와 데이터의 운명적인 만남</h3><p>그런데 문제는…UI 개발은 필연적으로 데이터를 먼저 보게 된다는 것이다.<br>UI개발은 시작부터 <code>어떤 데이터가 화면에서 쓰이지?</code>부터 시작한다.<br>그 유명한 React와 같은 라이브러리도 <code>상태기반의 개발</code>을 이야기한다.<br>이 말만 들으면 FE 개발은 천상 객체지향 패러다임에 맞게 개발하기는 틀려먹은 것 처럼 보인다.</p><p>이에 대한 나의 대답은 <code>아니다</code>.  </p><blockquote><p>UI 개발도 화면 중심으로 개발을 하지만 화면에서 사용될 각각의 <strong>UI객체와의 협력과 책임 그리고 역할을 고려하여 개발하는게 맞다.</strong>  </p></blockquote><p>물론 방법은 조금 다르다고 생각한다.<br>FE개발에 적합한 방법과 패러다임이 있기에 이 부분은 별도의 글에서 다루도록 하겠다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2019/08/10/object-book2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>오브젝트 책에 대한 잡담 - 1</title>
      <link>http://sculove.github.io/blog/2019/07/31/object-book1/</link>
      <guid>http://sculove.github.io/blog/2019/07/31/object-book1/</guid>
      <pubDate>Wed, 31 Jul 2019 13:33:54 GMT</pubDate>
      <description>
      
        &lt;p&gt;개인적으로 개발을 하면서 꼭 필요한 것 중의 &lt;strong&gt;하나가 개발에 대한 경험&lt;/strong&gt;이고, 또 다른 하나가 그 경험을 통한 &lt;strong&gt;사고의 정리와 확장&lt;/strong&gt;에 있다. 개발경력은 단지 숫자에 불과할 뿐이다. 그 시간동안 얼마나 &lt;strong&gt;다양한 경험과 깊은 고민을 했는지&lt;/strong&gt;가 현재 자신의 개발 역량을 만들어 간다.&lt;/p&gt;
&lt;p&gt;하지만, 어디 개발 뿐이겠는가? ㅋㅋ&lt;/p&gt;
&lt;p&gt;물론, 천재적인(?) 감각과 통찰력으로 책 만보고도 잘하는 사람도 드물게 있긴 하다. 하지만 나 같은 범인들은 &lt;code&gt;당하지 않고는 느끼지 못하고, 고민하지 않으면 통찰력을 얻을 수 없다.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;그래서 마침 좋은 책도 나오고 해서 FE개발 좀 했다는 노친네(?) 분들과 오브젝트 책으로 생각을 정리할 목적으로 스터디를 시작했다.&lt;/p&gt;
&lt;p&gt;스터디라고해서 뭐 거창한 것은 아니고 그냥 책을 읽어와서 이런 저런 잡담을 주기적으로 하는 시간을 갖기로 했다.&lt;/p&gt;
&lt;p&gt;오늘은 그 첫번째로 이 책의 1~2장에 대한 내용을 토대로 이야기했던 내용. 그리고 내 생각들의 정리를 위한 기록들이다.&lt;/p&gt;
&lt;img src=&quot;/blog/2019/07/31/object-book1/object.jpeg&quot;&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>개인적으로 개발을 하면서 꼭 필요한 것 중의 <strong>하나가 개발에 대한 경험</strong>이고, 또 다른 하나가 그 경험을 통한 <strong>사고의 정리와 확장</strong>에 있다. 개발경력은 단지 숫자에 불과할 뿐이다. 그 시간동안 얼마나 <strong>다양한 경험과 깊은 고민을 했는지</strong>가 현재 자신의 개발 역량을 만들어 간다.</p><p>하지만, 어디 개발 뿐이겠는가? ㅋㅋ</p><p>물론, 천재적인(?) 감각과 통찰력으로 책 만보고도 잘하는 사람도 드물게 있긴 하다. 하지만 나 같은 범인들은 <code>당하지 않고는 느끼지 못하고, 고민하지 않으면 통찰력을 얻을 수 없다.</code></p><p>그래서 마침 좋은 책도 나오고 해서 FE개발 좀 했다는 노친네(?) 분들과 오브젝트 책으로 생각을 정리할 목적으로 스터디를 시작했다.</p><p>스터디라고해서 뭐 거창한 것은 아니고 그냥 책을 읽어와서 이런 저런 잡담을 주기적으로 하는 시간을 갖기로 했다.</p><p>오늘은 그 첫번째로 이 책의 1~2장에 대한 내용을 토대로 이야기했던 내용. 그리고 내 생각들의 정리를 위한 기록들이다.</p><img src="/blog/2019/07/31/object-book1/object.jpeg"><a id="more"></a><h3 id="객체-지향-프로그래밍-이야기"><a href="#객체-지향-프로그래밍-이야기" class="headerlink" title="객체 지향 프로그래밍 이야기"></a>객체 지향 프로그래밍 이야기</h3><p>프로그래밍을 개인적으로 제대로 학습해 본 것은 <code>C++로 쓰여진 객체지향프로그래밍</code>  책이었다. 주황색(?)과 파란색(?)의 표지의 책으로 기억된다… 문법부터 나온 책이었는데 그때 배운 내용을 바탕으로 아직까지도 잘 써먹고(?) 있다. 누가 가르쳐 주는 것도 아니고 개발로 뭔가를 해본 것도 아니기에 난해하고 이해하기 어려워서 몇 번을 반복해서 본 기억이 있다. </p><img src="/blog/2019/07/31/object-book1/book.jpg"><p>이게 “상속”이구나 이게 “클래스”하고 “인터페이스” 구나 하는 정도의 이해 수준을 가지고 나름 <code>다 배웠다는 교만함</code>으로 살았던 기억이 난다. </p><img src="/blog/2019/07/31/object-book1/hahaha.jpg"><p>그 이후로 아마도 처음보는 객체지향 프로그래밍 관련 책 같다.</p><p>이 책은 시작부터 <code>프로그래밍 패러다임</code>에 대한 용어를 다룬다. 작년에 쓴 <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=13799611" rel="external nofollow noopener noreferrer" target="_blank">내 책</a>에서는 다양한 패러다임(반응형/함수형 프로그래밍 패러다임)이 나오는 내용 임에도 불구하고 미처 다루지 못했던 내용을 이 책에서는 아주 잘 다루고 있다.<br>(왜 이렇게 풀지 못했지… 라는 생각에 부끄러움이 밀려왔다. 하하하)</p><p>이후 소프트웨어 모듈의 목적에 대해 기술하고 있다. 이걸 보고 초등학교때 ‘인사 잘해라’는 선생님의 가르침을 잊은 것 처럼 얼굴이 화끈거렸다.</p><blockquote><p>소프트웨어 모듈은 </p><p>첫째. 제대로 동작해야하고<br>둘째. 변경을 위해 존재해야하며<br>셋째. 가독성이 좋아야한다.</p></blockquote><h3 id="간혹-우리는-두번째-목적을-잊어버린다-왜"><a href="#간혹-우리는-두번째-목적을-잊어버린다-왜" class="headerlink" title="간혹 우리는 두번째 목적을 잊어버린다. 왜?"></a>간혹 우리는 두번째 목적을 잊어버린다. 왜?</h3><p>이 스펙이 크게 변경될 일은 현실적으로 우리가 예측가능한 범위에서 많이 일어나지 않을뿐만아니라 그런것을 고려하면서 개발하기에는 일정이 너무 짧기때문에 오히려 첫번째와 세번째 이유에 더 초점을 맞추게 된다.</p><p>하긴 두번째 이유 때문에 객체지향이니 함수형이니 반응형이니 하는 프로그래밍 패러다임을 배우고, 테스트 코드를 짜놓고 변경에 대비하고 있는데… 현업 개발을 하다보면 이걸 명료하게(?) 잊어버린다.</p><p>어찌보면 경험이 쌓이면서 변경을 대비하기 위한 코딩의 기술(?)들이 이미 녹아들어 갔기 때문일 수도 있다. 그냥 ‘그렇게 짜는게 좋다’라는 감(?)만이 남아 있게된다. </p><p>이 책의 1~2장 까지는 객체지향 프로그래밍의 개념을 <code>왜?</code> 라는 관점에서 예제와 함께 비교적 쉽게 설명하고 있다. 하지만 역시나조금은 지루한 내용이고, 초보자들이 이해하기 어려운 내용이다. </p><p>뭐 핵심만 이야기한다면 아래같이 간단히 나타낼 수도 있다.</p><blockquote><p>의존성이 있다 === 변경이 될 수 있다. </p><p>So, 결합도를 낮춘다. </p><p>How? </p><ul><li><strong>캡슐화</strong>를 통해 내,외부의 경계를 명확히하여 자율성을 보장하여 의존성을 줄인다. </li><li>구현과 인터페이스로 나눠서 인터페이스로만 메시지를 주고받는다</li><li>객체에 <strong>책임</strong>을 주어 할당하여 <strong>자율적</strong>으로 처리하도록 하자. 이로 인해 응집도를 높인다.</li></ul></blockquote><p>위 기본적인 개념을 바탕으로 어떻게 코드를 개선해 나가는지를 설명하고 있다.</p><h3 id="상속"><a href="#상속" class="headerlink" title="상속"></a>상속</h3><p>위 방식을 효과적으로 해결하기 위한 객체지향 프로그래밍의 방법 중 하나로 상속이 나오고, 이로 인한 추상화와 다형성 이야기가 나온다. 이런 개념은 인터넷을 잘 찾으렴 나오니깐 과감히 생략하고. 우리가 잘못 사용(?) 하고 있는 상속에 대한 이야기를 좀 해보자.</p><p>FE개발 좀 했다는 노친네(?) 분들과도 이 상속이 논의의 중심이 되었다.</p><p>이 상속이라는게 어떻게 보면 참 편리하다. 부모를 그대로 쏙 닮은 자식을 아주 손쉽게 만들수 있기 때문이다. </p><p>왜냐면 내 중복코드가 정말 기가 막히게 사라지기 때문이다. 유지보수도 더 편한 것 같고, 뭔가 테크닉으로 노가대를 없앴다는 프로그래머로서의 뿌듯함도 생긴다.</p><h3 id="잘못된-상속의-폐해"><a href="#잘못된-상속의-폐해" class="headerlink" title="잘못된 상속의 폐해"></a>잘못된 상속의 폐해</h3><p>실제로 내가 겪은 개발 사례로 이야기해보자. UI 대표적인 컴포넌트로 캐로셀과 스크롤이 있다.</p><p>둘다 사용자의 액션을 받아서 UI를 움직이는 동일한 기능을 담당한다. 다만 다른 것은 캐로셀은 별도의 인덱스가 있어서 사용자의 액션에 따라 한 판씩 이동하는 것에 비해 스크롤은 모두 동일하지만 사용자의 액션에 의해 스크롤되는 UI 컴포넌트이다.</p><p>인덱스 기능을 빼면 사실 둘 다 같다. 그럼 동일한 기능이니깐 공통 사용자 액션을 바탕으로 상속해서 요렇게 하면 좋겠다라는 유혹(?)이 시작된다. 여기까지는 사실 괜찮다.</p><p>관여하는 모듈도 많지도 않고 나름 나쁘지 않다. 하지만 이제 요구사항이 늘면서 우린 헬게이트로 빠지게 된다.</p><p>캐로셀의 이동 모양만 변경한 여러 종류의 캐로셀을 만드는 요구사항이 추가되었다.</p><p>Carousel을 상속함으로써 이동 모양에 대한 부분만 overriding 하면, SlideCarousel, PreviewCarousel, CubeCarousel 등 다양한 캐로셀을 손쉽게 만들 수 있었다. 이때는 참 뿌듯했다. 몇 줄 안되는 코드로 다양한 요구사항을 손쉽게 해결했으니 ㅋㅋㅋ</p><p>하지만 문제는 여기서 부터였다. 여러 종류의 캐로셀마다 다양한 요구사항들이 추가되었고 이로 인해 하위에 있는 XXXCarousel이 변경되었고, 이로 인해 오히려 상위의 컴포넌트도 변경을 해야하는 상황이 도래했다.</p><p>코드는 줄었지만. 변경시 마다 상위 모듈이 함께 변경 될 소지가 있었고 각각의 역할은 자율성을 갖지 못하고 영향을 미치게되었다. 가장 미치게 하는 것은 코드는 짧아졌지만 <code>상위 모듈을 다 이해하지 않은 이상</code> 코드의 변경이 어려워졌다.</p><p>이때 했던 실수를 이 책에서는 명확하게 집혀주고 있다.</p><blockquote><p>상속은 구현 상속이 아니라 인터페이스 상속을 위해 사용해야 한다.</p></blockquote><p>이를 구현의 <code>재사용성 관점</code>으로 접근하면 나와 같은 경험을 할 수 있다. 하지만 인터페이스 상속. 즉, 다형성을 이용하기 위한 인터페이스 상속은 좋은 결과를 낳는다. 물론, <code>구현 자체를 공유할 필요가 없는 경우</code>라면 인터페이스만을 사용하는 것이 훨~씬 유연한 구조를 가져갈 수 있다.</p><p>위에서 예시로 든 캐로셀과 스크롤의 경우에는 1차적으로는 사용자 액션 부분을 모듈화 하여 자율성을 부여한 후, 이를 캐로셀이나 스크롤에서 사용하는 사용자 액션을 사용하는 <code>합성</code> 방법이 더 효과적이다.</p><p>다음으로 다양한 종류의 캐로셀의 경우, 캐로셀의 <u>구현체를 공유할 필요가 없다면 인터페이스</u>로 <code>추상화</code> 를 하고 그렇지 않고 <u>구현체를 일부 공유해야한다면</u>  <code>상속</code>을 이용하여 <code>템플릿 메소드 패턴</code>을 고려하는 것도 좋은 방법이다.</p><img src="/blog/2019/07/31/object-book1/templateMethod.jpeg"><h3 id="인터페이스와-상속"><a href="#인터페이스와-상속" class="headerlink" title="인터페이스와 상속"></a>인터페이스와 상속</h3><p>J2EE로 구현된 모듈들을 보면 많은 상속된 객체를 사용하고 있고 사용자에게는 대체로 인터페이스 구현 형태를 제시하고 있다. </p><p>개발을 처음 시작할 때는 인터페이스를 보면서 이런 생각을 했었다.</p><p>아니 그냥 만들면 될 것을 왜? 굳이 인터페이스를 만들어야 하는가? </p><p>사실 Java개발을 할때 가장 불편하고 짜증났던 것 중에 하나가 이런 중복 코드를 매번 재생성해야하는 것이 사실 좀 불합리해 보였다. 하지만 그 대상이 여러 개라면… 즉 다형성이 필요하다면 이야기는 달라진다. 인터페이스 만한게 없다.</p><blockquote><p>난 이런 메시지를 줄테니 잘 모르겠고 넌 이런 형태의 응답을 줘!</p></blockquote><p>인터페이스 빼고는 의존성이 없다. 규칙만 잘 지키면 된다. 하지만. 상속은 어떠한가?</p><p>상속은 사실 <code>굉장한 강결합</code>이다. 부모의 메소드를 알지 못하면 모르고, 부모가 어떻게 동작하는지에 대한 내용을 모르면 자식의 영향도를 파악하기가 어렵다. 한마디로 일차로 <strong>캡슐화 위반</strong>이다. 캡슐화 위반은 사실상 의존성의 증대를 의미한다.</p><p>개인적인 생각으로는 극단적이지만 <code>상속은 필요 없다</code>에 한 표를 주고 싶다. 너무 매정하다 싶으면 이렇게 고치고 싶다.</p><p><code>상속은 최대 한 번이면 족하다.</code> </p><p>상속은 결합도가 높은 패턴이기 때문에 정말 자신이 잘 만들 자신이 있거나 그렇지 않다면 오히려 당신의 퇴근시간을 늦출 수 있는 지름길이 될 수 있다. </p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2019/07/31/object-book1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>어서와, Memory Leak은 처음이지?</title>
      <link>http://sculove.github.io/blog/2019/06/09/nodejs-memoryleak/</link>
      <guid>http://sculove.github.io/blog/2019/06/09/nodejs-memoryleak/</guid>
      <pubDate>Sun, 09 Jun 2019 03:48:11 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;strong&gt;Node 기반의 SSR(Server Side Rendering) 랜더링&lt;/strong&gt; 을 서비스에 도입하다 Memory Leak 이슈를 맞이했다.&lt;br&gt;Java 환경의 성능테스트를 준비하면 간혹 겪게되는 이슈이긴 한데. Node.js 도입 시작부터 memory leak 이슈가 튀어나와서 사실 당황스럽긴했다.&lt;/p&gt;
&lt;h3 id=&quot;Memory-Leak-현상-감지하기&quot;&gt;&lt;a href=&quot;#Memory-Leak-현상-감지하기&quot; class=&quot;headerlink&quot; title=&quot;Memory Leak 현상 감지하기&quot;&gt;&lt;/a&gt;Memory Leak 현상 감지하기&lt;/h3&gt;&lt;p&gt;트래픽이 중요한 서비스다 보니 성능검증을 하지 않을 수 없었다.&lt;br&gt;보통 서버에 부하를 주게되면 최고 TPS를 찍은 후 유지된다. 요렇게.&lt;/p&gt;
&lt;img src=&quot;/blog/2019/06/09/nodejs-memoryleak/normal-tps.png&quot;&gt;
&lt;p&gt;그런데, 실제 부하테스트를 해보니 다음과 같은 TPS 그래프가 나왔다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p><strong>Node 기반의 SSR(Server Side Rendering) 랜더링</strong> 을 서비스에 도입하다 Memory Leak 이슈를 맞이했다.<br>Java 환경의 성능테스트를 준비하면 간혹 겪게되는 이슈이긴 한데. Node.js 도입 시작부터 memory leak 이슈가 튀어나와서 사실 당황스럽긴했다.</p><h3 id="Memory-Leak-현상-감지하기"><a href="#Memory-Leak-현상-감지하기" class="headerlink" title="Memory Leak 현상 감지하기"></a>Memory Leak 현상 감지하기</h3><p>트래픽이 중요한 서비스다 보니 성능검증을 하지 않을 수 없었다.<br>보통 서버에 부하를 주게되면 최고 TPS를 찍은 후 유지된다. 요렇게.</p><img src="/blog/2019/06/09/nodejs-memoryleak/normal-tps.png"><p>그런데, 실제 부하테스트를 해보니 다음과 같은 TPS 그래프가 나왔다.</p><a id="more"></a><h5 id="시간이-지날수록-TPS는-떨어지고"><a href="#시간이-지날수록-TPS는-떨어지고" class="headerlink" title="시간이 지날수록 TPS는 떨어지고,"></a><strong>시간이 지날수록 TPS는 떨어지고,</strong></h5><img src="/blog/2019/06/09/nodejs-memoryleak/memoryleak-tps.png"><h5 id="node-instance가-사용하는-메모리도-점점-차올랐다"><a href="#node-instance가-사용하는-메모리도-점점-차올랐다" class="headerlink" title="node instance가 사용하는 메모리도 점점 차올랐다."></a><strong>node instance가 사용하는 메모리도 점점 차올랐다.</strong></h5><img src="/blog/2019/06/09/nodejs-memoryleak/memoryleak.png"><h3 id="힙-메모리-프로파일하기"><a href="#힙-메모리-프로파일하기" class="headerlink" title="힙 메모리 프로파일하기"></a>힙 메모리 프로파일하기</h3><p>전형적인 <code>Memory Leak</code> 패턴이었다. 그래서 Profile을 해봤다.<br><strong>“Allocation instrumentation on timeline”</strong> 을 이용하면 실시간으로 메모리가 릴리즈 되지 못하고 누적되는 것을 손쉽게 확인할 수 있다.</p><img src="/blog/2019/06/09/nodejs-memoryleak/profile-timeline.png"><blockquote><p>Memory Leak을 찾는 방법에 대해서는 전에 작성한 다음의 발표자료를 참고해라.</p><a href="/blog/2016/10/06/memory/" title="Chrome Devtools를 이용한 Web Application Memory 분석법">Chrome Devtools를 이용한 Web Application Memory 분석법</a></blockquote><p>Profile의 상세 내역을 보면 클라이언트 요청시마다 생성되는 <code>ServerResponse</code> 객체가 누적되고 있는 것을 확인해 볼 수 있다.</p><img src="/blog/2019/06/09/nodejs-memoryleak/serverResponse.png"><p>찾았다. 요놈 ㅋㅋㅋ</p><h3 id="Memory-Leak-제거하기"><a href="#Memory-Leak-제거하기" class="headerlink" title="Memory Leak 제거하기"></a>Memory Leak 제거하기</h3><p>문제가 된 코드는 단 한줄의 코드였다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The request handler must be the first middleware on the app</span></span><br><span class="line">app.use(handlers.requestHandler());</span><br></pre></td></tr></table></figure><blockquote><p>Sentry Express 적용 가이드 <a href="https://docs.sentry.io/platforms/node/express/" rel="external nofollow noopener noreferrer" target="_blank">https://docs.sentry.io/platforms/node/express/</a></p></blockquote><h5 id="express의-에러감지를-위해-적용해-놓은-sentry의-Sentry-Handlers-requestHandler-에서-Memory-Leak이-발생한-것이었다"><a href="#express의-에러감지를-위해-적용해-놓은-sentry의-Sentry-Handlers-requestHandler-에서-Memory-Leak이-발생한-것이었다" class="headerlink" title="express의 에러감지를 위해 적용해 놓은 sentry의 Sentry.Handlers.requestHandler 에서 Memory Leak이 발생한 것이었다."></a><strong>express의 에러감지를 위해 적용해 놓은 sentry의 Sentry.Handlers.requestHandler 에서 Memory Leak이 발생</strong>한 것이었다.</h5><p>Sentry 코드의 내용을 확인해보면 Node.js의 domain 객체를 사용하는 간단한 코드로 구성되어 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">requestHandler</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">const</span> local = domain.create();</span><br><span class="line">    local.add(req);</span><br><span class="line">    local.add(res);</span><br><span class="line">    local.on(<span class="string">'error'</span>, next);</span><br><span class="line">    local.run(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/handlers.ts#L233-L255" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/getsentry/sentry-javascript/blob/master/packages/node/src/handlers.ts#L233-L255</a></p></blockquote><p>Node.js의 domain 객체에서 <strong>Memory Leak</strong>을 유발하는 코드가 있어서 위와 같은 문제가 발생한다.<br><a href="https://github.com/nodejs/node/pull/26098" rel="external nofollow noopener noreferrer" target="_blank">Node.js 11.10.0 릴리즈 노트</a>를 확인하시면 <a href="https://nodejs.org/api/domain.html#domain_domain" rel="external nofollow noopener noreferrer" target="_blank">domain</a>의 Memory Leak 이슈가 해결된 커멘트를 확인해 볼 수 있다.</p><blockquote><p>[<a href="https://github.com/nodejs/node/commit/60c5099f4b" rel="external nofollow noopener noreferrer" target="_blank">60c5099f4b</a>] - domain: avoid circular memory references (Anna Henningsen) <a href="https://github.com/nodejs/node/pull/25993" rel="external nofollow noopener noreferrer" target="_blank">#25993</a></p></blockquote><h4 id="Node-js-11-10-0에서는-domain-객체의-Memory-Leak-문제가-해결되었으나-아직-Node-js-의-LTS-버전은-10-x-x-이기에-사실상-서비스에서는-Sentry-Handlers-requestHandler를-사용할-수-없었다"><a href="#Node-js-11-10-0에서는-domain-객체의-Memory-Leak-문제가-해결되었으나-아직-Node-js-의-LTS-버전은-10-x-x-이기에-사실상-서비스에서는-Sentry-Handlers-requestHandler를-사용할-수-없었다" class="headerlink" title="Node.js 11.10.0에서는 domain 객체의 Memory Leak 문제가 해결되었으나 아직 Node.js 의 LTS 버전은 10.x.x 이기에 사실상 서비스에서는 Sentry.Handlers.requestHandler를 사용할 수 없었다."></a>Node.js 11.10.0에서는 domain 객체의 Memory Leak 문제가 해결되었으나 <br>아직 Node.js 의 LTS 버전은 10.x.x 이기에 사실상 서비스에서는 Sentry.Handlers.requestHandler를 사용할 수 없었다.</h4><p>결과적으로는 Request Header 정보는 서비스 오류, 장애 대응에 크게 문제가 되지 않기에 Express의 Sentry 탐침 코드를 제거하였다.</p><blockquote><p>참고로 Sentry.Handlers.requestHandler를 적용하지 않으면 아래와 같은 Request Header 정보를 Sentry에서 확인 할 수 없다.</p><img src="/blog/2019/06/09/nodejs-memoryleak/requestheader.png"></blockquote><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><h3 id="1-Sentry를-사용한다면…"><a href="#1-Sentry를-사용한다면…" class="headerlink" title="1. Sentry를 사용한다면…"></a>1. Sentry를 사용한다면…</h3><ul><li><code>Node.js 11.10.0 미만</code>에서는 Sentry.Handlers.requestHandler를 사용하지 않는다.</li><li><code>Node.js 11.10.0 이상</code>에서는 Sentry.Handlers.requestHandler를 사용한다.</li></ul><h3 id="2-node-js-11-10-0-미만-버전에서-domain-객체를-사용하지-않는다"><a href="#2-node-js-11-10-0-미만-버전에서-domain-객체를-사용하지-않는다" class="headerlink" title="2. node.js 11.10.0 미만 버전에서 domain 객체를 사용하지 않는다."></a>2. <code>node.js 11.10.0 미만</code> 버전에서 domain 객체를 사용하지 않는다.</h3><blockquote><p>참고로 Node.js의 domain 객체는 node.js 10.x.x에서 deprecated 되었다.</p></blockquote>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2019/06/09/nodejs-memoryleak/#disqus_thread</comments>
    </item>
    
    <item>
      <title>오늘부터 나도 FE성능 분석가</title>
      <link>http://sculove.github.io/blog/2019/04/11/fromTodyIamPA/</link>
      <guid>http://sculove.github.io/blog/2019/04/11/fromTodyIamPA/</guid>
      <pubDate>Thu, 11 Apr 2019 06:09:27 GMT</pubDate>
      <description>
      
        &lt;h3 id=&quot;오늘부터-나도-FE-성능분석가&quot;&gt;&lt;a href=&quot;#오늘부터-나도-FE-성능분석가&quot; class=&quot;headerlink&quot; title=&quot;오늘부터 나도 FE 성능분석가&quot;&gt;&lt;/a&gt;오늘부터 나도 FE 성능분석가&lt;/h3&gt;&lt;p&gt;국내 서비스에서 가장 많은 사용자를 가지고 있는 네이버 서비스. 다양한 브라우저 환경에서 쾌적한 서비스를 제공하기 위해 노력했던 많은 개발자들의 경험을 여러분에게 소개해드립니다. 이 발표에서는 전통적인 웹 성능 개선방법부터 모던 브라우저 성능 개선 사례를 두루 살펴보고 실제 서비스에서 필요한 성능 개선 포인트를 어떻게 찾고, 개선할 수 있는지에 대한 이야기를 합니다.&lt;br&gt;이 발표를 듣는 당신은 오늘부터 FE 성능분석가 1일차!&lt;/p&gt;
&lt;h4 id=&quot;발표-자료&quot;&gt;&lt;a href=&quot;#발표-자료&quot; class=&quot;headerlink&quot; title=&quot;발표 자료&quot;&gt;&lt;/a&gt;발표 자료&lt;/h4&gt;&lt;iframe src=&quot;http://sculove.github.io/slides/tobeAnAnalyst/&quot; width=&quot;100%&quot; height=&quot;500px&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;자료 : &lt;a href=&quot;http://sculove.github.io/slides/tobeAnAnalyst/&quot;&gt;http://sculove.github.io/slides/tobeAnAnalyst/&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="오늘부터-나도-FE-성능분석가"><a href="#오늘부터-나도-FE-성능분석가" class="headerlink" title="오늘부터 나도 FE 성능분석가"></a>오늘부터 나도 FE 성능분석가</h3><p>국내 서비스에서 가장 많은 사용자를 가지고 있는 네이버 서비스. 다양한 브라우저 환경에서 쾌적한 서비스를 제공하기 위해 노력했던 많은 개발자들의 경험을 여러분에게 소개해드립니다. 이 발표에서는 전통적인 웹 성능 개선방법부터 모던 브라우저 성능 개선 사례를 두루 살펴보고 실제 서비스에서 필요한 성능 개선 포인트를 어떻게 찾고, 개선할 수 있는지에 대한 이야기를 합니다.<br>이 발표를 듣는 당신은 오늘부터 FE 성능분석가 1일차!</p><h4 id="발표-자료"><a href="#발표-자료" class="headerlink" title="발표 자료"></a>발표 자료</h4><iframe src="http://sculove.github.io/slides/tobeAnAnalyst/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe><p>자료 : <a href="http://sculove.github.io/slides/tobeAnAnalyst/">http://sculove.github.io/slides/tobeAnAnalyst/</a></p><a id="more"></a><h4 id="발표한-행사-정보"><a href="#발표한-행사-정보" class="headerlink" title="발표한 행사 정보"></a>발표한 행사 정보</h4><p>[2019.04.11] TECH CONCERT:FRONT END <a href="http://techcon.naver.com/2019/fe/" rel="external nofollow noopener noreferrer" target="_blank">http://techcon.naver.com/2019/fe/</a></p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2019/04/11/fromTodyIamPA/#disqus_thread</comments>
    </item>
    
    <item>
      <title>90년대생이 온다.</title>
      <link>http://sculove.github.io/blog/2019/03/03/newgeneration/</link>
      <guid>http://sculove.github.io/blog/2019/03/03/newgeneration/</guid>
      <pubDate>Sat, 02 Mar 2019 20:55:22 GMT</pubDate>
      <description>
      
        &lt;img src=&quot;/blog/2019/03/03/newgeneration/90come.jpg&quot; title=&quot;90년대생이 온다&quot;&gt;

&lt;p&gt;팀회식때 팀원이 나보고 ‘90년대생이 온다’ 라는 책을 봐보란다.&lt;br&gt;회식때 흘러들은 이야기들은 가급적이면 새겨(?)듣는 편이기에 바로 책을 사서 집에서 곰곰히 읽어봤다.&lt;br&gt;사실 별 공감이 되지는 않았다.&lt;br&gt;내가 이 책을 보면서 느낌 감정은 2가지 였다.&lt;br&gt;첫째, 우선 내가 공감하지 못하는 것을 안 순간부터 아 &lt;code&gt;나 진짜 꼰대였구나.&lt;/code&gt;라는 생각이 들었다.&lt;br&gt;둘째, &lt;code&gt;아 이렇게 행동하고 생각하는게 90년대생들에게는 정상이구나&lt;/code&gt; 라는 생각의 이해 정도.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2019/03/03/newgeneration/90come.jpg" title="90년대생이 온다"><p>팀회식때 팀원이 나보고 ‘90년대생이 온다’ 라는 책을 봐보란다.<br>회식때 흘러들은 이야기들은 가급적이면 새겨(?)듣는 편이기에 바로 책을 사서 집에서 곰곰히 읽어봤다.<br>사실 별 공감이 되지는 않았다.<br>내가 이 책을 보면서 느낌 감정은 2가지 였다.<br>첫째, 우선 내가 공감하지 못하는 것을 안 순간부터 아 <code>나 진짜 꼰대였구나.</code>라는 생각이 들었다.<br>둘째, <code>아 이렇게 행동하고 생각하는게 90년대생들에게는 정상이구나</code> 라는 생각의 이해 정도.</p><a id="more"></a><p>그 순간 갑자기 몇일 전에 러닝머신을 달리면서 느낀 감정들이 함께 생각이 났다.<br>러닝머신을 달리면서 티비를 보는데 <code>미스터 맘마</code>라는 옛날 영화가 나왔다.  </p><img src="/blog/2019/03/03/newgeneration/mom.jpg" title="미스터 맘마"><p>고 최진실이 나오기도 하고 해서 반가운 마음에 계속보고 있는데 지금 생각하면 납득이 안되는 장면들이 그 시대에는 당연한 모습으로 표현되고 있었다.</p><p>간단히 설명하면.<br>최민수가 아이를 홀로 키우고 있다.<br>최민수가 직장후배인 최진실에서 애를 봐달라고 부탁한다. 그리고선 자기는 회식을 가지.<br>이것도 어이가 없지만… 민수형이 밤새 연락도 없이 회식에서 술을 먹는동안,<br>아이가 아파서 진실누나가 밤새 애를 본다.<br>이때 보니 우리 애기 아팠을때 나랑 와이프가 애타게 보던게 생각나면서 셋째는 두번 다시는 안가져야지.<br>내가 저걸 다 어떻게 했을까?<br>지금 해라면 절대 못한다.<br>등등등 정말 많은 생각들이 주마간산처럼 지나갔다.<br>암튼, 진실 누나는 결국 아이를 병원 응급실로 데러간다.  </p><p>진실누나는 그때까지도 애를 보고 있는 상황도 납득이 안가지만.<br>더 가관은 최민수가 병원으로 와서는 다짜고짜 최진실 빰을 때린다.<br>세상에나<br>이게 가당키나 한 상황인가?  </p><p>그때 볼때는 정말 아무렇지도 않았는데 시간이 흐르고 이 영화를 다시보니 이렇게 시대적인 충격을 받는게 신기했다.<br>내가 아무렇지도 않게 느낀 시대가 변한 것에 놀랐고, 나도 모르게 나이가 먹은 나에게 다시 한번 놀랐다.  </p><p>난 아직도 서태지 형 노래를 따라부르는 청년이라고 생각했는데<br>생각하고 보니<br>어렸을때 무심코 따라 불렀던 서태지 형아 노래가 이제는<br>어렸을때 보았던 가요무대에서나 들릴 법한 노래가 되었다.<br>‘운동하는 사람은 빨리 죽는다’며 궁색한 변명을 늘어놓으면서 비아냥 거리던 시기는 지나고<br>이제는 운동을 안하면 몸이 아픈 나이가 되었다.<br>힘들어도 아이와 노는것이 신났던 아빠는 없고, 아이에게 궁색한 변명만 늘어놓는 중년의 아빠가 되었다.<br>개발이 잼있어서 집에가라고 해도 남아서 개발하고<br>집에 와서도 짜투리 시간에 개발하였던 내 열정도<br>이제는 일이 많아서 일만하는 꼰대가 되었다.<br>된장!</p><p>태지 형.<br>형말 아직 유효한거죠?</p><blockquote><p>우린 아직 젊기에<br>괜찮은 미래가 있기에<br>자 이제 그 차가운 눈물은 닦고<br>COME BACK HOME<br>YOU MUST COME BACK</p></blockquote><img src="/blog/2019/03/03/newgeneration/seo.png" title="서태지와아이들">]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2019/03/03/newgeneration/#disqus_thread</comments>
    </item>
    
    <item>
      <title>개발자를 어떻게 학습시키는게 효과적일까?. 자기반성 모드</title>
      <link>http://sculove.github.io/blog/2018/12/31/learn2018/</link>
      <guid>http://sculove.github.io/blog/2018/12/31/learn2018/</guid>
      <pubDate>Sun, 30 Dec 2018 18:43:20 GMT</pubDate>
      <description>
      
        &lt;p&gt;개발자를 어떻게 학습시킬것 인가?에 대한 자기성찰을 좀 해보려고 한다.&lt;/p&gt;
&lt;p&gt;이 성찰의 결정적인 계기는&lt;br&gt;애자일 컨설팅 대표로 있는 김창준님이 내놓은 책을 읽으면서 느꼈던 내 수치심으로 부터 시작되었다.&lt;/p&gt;
&lt;p&gt;연말이라 좀 시간도 있고 해서 책을 하나 사서 봤다. 김창준님이 내놓은 신간 책이다.&lt;br&gt;책 내용은 사실 지금까지 이 분이 &lt;a href=&quot;http://agile.egloos.com/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;블로그&lt;/a&gt;를 통해 이야기한 내용과 별반 다르지 않다.&lt;br&gt;좀 더 구체적으로 친절하게 정리해 놓은 책이다. 결론은 좋은 책이다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>개발자를 어떻게 학습시킬것 인가?에 대한 자기성찰을 좀 해보려고 한다.</p><p>이 성찰의 결정적인 계기는<br>애자일 컨설팅 대표로 있는 김창준님이 내놓은 책을 읽으면서 느꼈던 내 수치심으로 부터 시작되었다.</p><p>연말이라 좀 시간도 있고 해서 책을 하나 사서 봤다. 김창준님이 내놓은 신간 책이다.<br>책 내용은 사실 지금까지 이 분이 <a href="http://agile.egloos.com/" rel="external nofollow noopener noreferrer" target="_blank">블로그</a>를 통해 이야기한 내용과 별반 다르지 않다.<br>좀 더 구체적으로 친절하게 정리해 놓은 책이다. 결론은 좋은 책이다.</p><a id="more"></a><img src="/blog/2018/12/31/learn2018/book.jpg" title="함께 자라기 애자일로 가는 길"><p>새롭지 않는 내용을 읽으면서 왜 새삼스럽게 나는 수치심을 느꼈는가?<br>수치심이라는 표현이 맞는지 모르겠다.<br>아~ 진작에 이 책대로 행동했으면 좋았겠다는 후회정도로 표현해보자.</p><p>사람은 겪어보지 않으면 모른다고 했던가?<br>아마 지금의 내 상황에 가장 적합한 표현일 것이다.<br>예전에 읽을 때는 아~ 그런가보다. 좋은 내용이네. 정도의 느낌이 었다면<br>이번에는 책읽은 감동을 하나라도 놓치지 않기 위해 이렇게 새벽녘에 혼자 노트북을 켜고 글을 쓰고 있다.</p><p>이 책은 학습과 협력을 바탕으로 애자일에 대한 이야기를 약간 하고 있다. 하지만 그 중심 키워드는 항상 <code>학습</code>과 <code>협력</code>이다.<br>개발자의 입장에서 학습은 정말 정말 중요한 요소이다.<br>내가 개발자를 면접 볼때도 항상 중요하게 보는 포인트이기도 하다.<br>FE와 같이 기술의 발전속도가 굉장히 빠른 분야는 특히나 더 중요하다.<br>내가 이 책에서 <code>아하</code>라고 느꼈던 부분은 효과적인 학습 방법에 대한 내용이다.</p><p>지금까지 나는 무언가를 배울 때 <code>오~ 재미있겠다</code>라는 생각으로 시작해서 학습하고 학습한 것을 바탕으로 다시 연습하고 다시 연습한 것을 바탕으로 프로젝트에 적용해보고 다시 적용한 경험을 가지고 다시 학습하는 싸이클을 만들어 갔다.<br>하지만 이건 내가 그냥 무의식에서 했던 작업이었다.<br>그래서 내가 그러했듯이 남들도 이렇게 하겠지라는 생각이 무의식 속에 있었다.</p><h3 id="힘든-학습"><a href="#힘든-학습" class="headerlink" title="힘든 학습"></a>힘든 학습</h3><p>올해 우리팀에서 FE개발자이지만 서버영역을 배워보고 싶어하는 동료가 있었다.<br>직접 하고자하는 동기 부여도 충분해 보였고 회사 경력도 가지고 있는 분이었다.<br>팀 차원에서도 랜더 서버 운영을 위해서 필요한 영역이었기에 학습 후에 팀원들과 공유하는 자리를 가지면 개인과 팀에 서로 도움이 될것 같았다.<br>그래서 내가 지원했던 부분은 <code>집중 할수 있는 충분한 시간을 제공</code> 해주는 것이었다.</p><p>하지만, 시간이 지날 수록 처음의 내 생각과 다르게 진행하는 동료가 개인적으로 굉장히 힘들어 했다.<br>혼자 학습의 길을 잘 찾아가지 못했던 것이 보였다.<br>몇 일이 지나가도 진척이 잘 보이지 않았다.<br>중간에 몇 번이고 피드백을 주고 진척되지 않는 상황에 대한 내용을 여쭤보려고 했으나… 그러질 못했다.<br>아니 그러질 안했다.<br>결국에 시간이 더 지나고 나서야 진행하는 부분에 대해 내가 몇가지 <code>피드백</code>도 주었고 도움을 줄 수 있는 서버쪽 동료를 <code>협업자</code>로 지원해 주었다.<br>그나마 예전보다 나아졌지만 여전히 동료는 이 작업 자체를 힘들어 했다.<br>결국에는 사내에 잘 정리되어있는 가이드 문서를 참조하면서부터 학습의 속도가 높아지고 작업에 속도감이 붙었다.</p><h3 id="좋은-학습"><a href="#좋은-학습" class="headerlink" title="좋은 학습"></a>좋은 학습</h3><p>왜 이렇게 힘들게 이 과정을 겪었을까?<br>학습하려는 학습자의 학습 능력이 부족했을까?<br>아니라고 본다.</p><p>이 동료분에게 다른 과제를 주어보았다.<br>앞에와 동일하게 충분한 동기부여가 있는 FE웹관련 리서치 작업을 요청해 보았다.<br>전과 동일하게 <code>집중 할수 있는 충분한 시간을 제공</code> 해주었다.</p><p>다른게 있다면</p><ul><li>첫째. 2~3일마다 만나서 중간 중간 <code>피드백</code>을 하고 이슈들을 이야기했다. (후반부에는 일주일 정도)</li><li>둘째. 자신이 이미 알고 있는 영역 내에서의 리서치 작업이기 때문에 난이도가 적당한 수준이었다.</li></ul><p>이 둘만 다른 상황에서 결과물은 너무나 달랐다.<br>작업 기간도 짧았을 뿐만아니라 작업했던 동료의 만족도도 달랐다.<br>물론 결과물의 품질도 많이 달랐다.</p><p>왜 똑같은 사람이 한 작업의 결과물이 이렇게 달라질 수 있었을까?</p><p>지금 생각해보면 이 상황의 패착은 전적으로 <code>나의 코칭 방식</code> 때문이다.<br>학습을 위해 필요한 요소를 내가 잘 지원하지 못했던 것이다.</p><p>그냥 막연히 <code>충분한 동기</code>를 가지고 있는 동료였기 때문에 <code>충분한 시간</code>을 주면 된다고 생각했다.<br>하지만 빠진게 있었다. 바로 <code>적절한 피드백</code>이 었다.<br>첫번째 작업에서 난 적절한 피드백을 주지 못했던 것이다.<br>난 이 동료를 몰아 넣고 방관만 하고 있었던 것이 었다.<br><code>내가 내 동료를 신뢰하지 못한다</code>는 생각을 전달하는 것 같아서 <code>피드백</code>을 주지않고 바보같이 오히려 참을성을 갖고 더 기다린 것이다.<br>또한 결정적으로 내가 놓치고 있었던 점이 있었다.<br>이 분이 <code>몰입 할수 있는 환경</code>을 만들지 못했다는 점이다.<br>몰입은 <code>적절한 난이도</code>에서 가장 최적의 몰입을 할수 있다. 하지만 난 이 분을 잘 파악하지 못하고 있었다.<br>회사에서 개발 경력이 있어서 서버쪽도 쉽게 배울수 있을 것이라는 착각을 한 것이다.<br>이 분이 잘 할수 있도록 하기 위해서는 아무것도 모르는 초심자 수준에서 그에 걸맞는 과제를 던져 주어야했던 것이다.<br>그리고 그 과제를 통해 성취감을 얻으면 다음 단계의 과제를 던져주었어야만 했다.</p><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>그래서 개발자를 효과적으로 학습하기 위한 방법을 정리해보면 다음과 같다.</p><ul><li>학습의 동기</li><li>적절한 피드백</li><li>적절한 난이도의 학습.일</li><li>그리고 집중 할 수 있는 시간</li></ul><p>을 제공하여 개발자를 학습시킨다면 학습을 하는 당사자도 성장의 만족감을 얻을 것이고<br>코칭하는 입장에서도 보람을 얻을수 있을 것이다.</p><p>뭐~ 물론 내가 경험했던 이 일이 정답은 아니다.<br>하지만 도움은 되리라 생각한다.<br>다시 한번 제 경험을 정리할수 있도록 도와준 김창준님의 책에 감사를 표하며 이 글을 마친다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2018/12/31/learn2018/#disqus_thread</comments>
    </item>
    
    <item>
      <title>2019년 자바스크립트 개발은 VSCODE로</title>
      <link>http://sculove.github.io/blog/2018/11/28/to-vscode-in-2019/</link>
      <guid>http://sculove.github.io/blog/2018/11/28/to-vscode-in-2019/</guid>
      <pubDate>Wed, 28 Nov 2018 01:23:11 GMT</pubDate>
      <description>
      
        &lt;p&gt;저만 알고 오래오래 쓰고 싶었는데요.&lt;br&gt;제 개발툴 경험 및 노하우를 적어 봅니다. ㅋ (참고로 전 JavaScript 개발자입니다)&lt;/p&gt;
&lt;h3 id=&quot;SublimeText…WebStorm을-거쳐&quot;&gt;&lt;a href=&quot;#SublimeText…WebStorm을-거쳐&quot; class=&quot;headerlink&quot; title=&quot;SublimeText…WebStorm을 거쳐&quot;&gt;&lt;/a&gt;SublimeText…WebStorm을 거쳐&lt;/h3&gt;&lt;p&gt;저는 JavaScript 개발자라면 다 써본다는 SublimeText를 선호하는 개발자였습니다.&lt;br&gt;SublimeText가 가볍기도 하거니와 다양한 플러그인이 있어서 열심히 찾고 다니기만 한다면 자기가 원하는 환경을 만들수 있습니다. 하지만 SublimeText가 생각보다 설정해야 할 것이 많이 있습니다.&lt;br&gt;더불어 컴퓨터 바뀔 때마다 플러그인을 매번 설치하는 것도 까다로웠죠. 더군다나 플러그인 자체가 ruby로 되어 있어서 답답한 면이 있었습니다.&lt;/p&gt;
&lt;p&gt;이런 불편함 쯤이야…&lt;br&gt;잘~ 견대내었는데요.&lt;/p&gt;
&lt;p&gt;이거 바꿔야겠다고 생각한게 &lt;strong&gt;좀 큰 파일 (번들링된 파일을 열어서 수정하는 경우, 파일이 많은 프로젝트를 열어서 수정하는 경우…)… 버버버벅 됩니다.&lt;/strong&gt;&lt;br&gt;특히 다양한 플로그인을 설치해놓은 상태에서는 상태가 더 심각합니다.&lt;/p&gt;
&lt;p&gt;그래서 선택 한게 SublimeText보다 더 비싼 WebStorm입니다. (역시 돈이 최고얏!)&lt;br&gt;&lt;strong&gt;오~ 이거 메모리만 빠방한다면 쓸만합니다. 좋아요~&lt;/strong&gt;&lt;br&gt;하지만… &lt;strong&gt;정말 메모리를 엄청 늘려야해요. 기본적으로 JVM 에서 돌아가기 때문에 heap만 몇기가를 잡아야해요.&lt;/strong&gt;&lt;br&gt;파일이 좀 많은 프로젝트를 열어서 엔터만 치면 차한잔 마시고 와야할 정도 였죠.&lt;br&gt;전 아직도 6년 전 구시대 iMac을 쓰고 있기에 이런 단점을 몸소 체험했었습니다.&lt;/p&gt;
&lt;h3 id=&quot;VSCODE&quot;&gt;&lt;a href=&quot;#VSCODE&quot; class=&quot;headerlink&quot; title=&quot;VSCODE&quot;&gt;&lt;/a&gt;VSCODE&lt;/h3&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>저만 알고 오래오래 쓰고 싶었는데요.<br>제 개발툴 경험 및 노하우를 적어 봅니다. ㅋ (참고로 전 JavaScript 개발자입니다)</p><h3 id="SublimeText…WebStorm을-거쳐"><a href="#SublimeText…WebStorm을-거쳐" class="headerlink" title="SublimeText…WebStorm을 거쳐"></a>SublimeText…WebStorm을 거쳐</h3><p>저는 JavaScript 개발자라면 다 써본다는 SublimeText를 선호하는 개발자였습니다.<br>SublimeText가 가볍기도 하거니와 다양한 플러그인이 있어서 열심히 찾고 다니기만 한다면 자기가 원하는 환경을 만들수 있습니다. 하지만 SublimeText가 생각보다 설정해야 할 것이 많이 있습니다.<br>더불어 컴퓨터 바뀔 때마다 플러그인을 매번 설치하는 것도 까다로웠죠. 더군다나 플러그인 자체가 ruby로 되어 있어서 답답한 면이 있었습니다.</p><p>이런 불편함 쯤이야…<br>잘~ 견대내었는데요.</p><p>이거 바꿔야겠다고 생각한게 <strong>좀 큰 파일 (번들링된 파일을 열어서 수정하는 경우, 파일이 많은 프로젝트를 열어서 수정하는 경우…)… 버버버벅 됩니다.</strong><br>특히 다양한 플로그인을 설치해놓은 상태에서는 상태가 더 심각합니다.</p><p>그래서 선택 한게 SublimeText보다 더 비싼 WebStorm입니다. (역시 돈이 최고얏!)<br><strong>오~ 이거 메모리만 빠방한다면 쓸만합니다. 좋아요~</strong><br>하지만… <strong>정말 메모리를 엄청 늘려야해요. 기본적으로 JVM 에서 돌아가기 때문에 heap만 몇기가를 잡아야해요.</strong><br>파일이 좀 많은 프로젝트를 열어서 엔터만 치면 차한잔 마시고 와야할 정도 였죠.<br>전 아직도 6년 전 구시대 iMac을 쓰고 있기에 이런 단점을 몸소 체험했었습니다.</p><h3 id="VSCODE"><a href="#VSCODE" class="headerlink" title="VSCODE"></a>VSCODE</h3><a id="more"></a><p>그래서 제가 선택한게 바로 <a href="https://code.visualstudio.com/" rel="external nofollow noopener noreferrer" target="_blank">VSCODE</a> 입니다.<br>무료 오픈소스인데 이게 생각보다 엄청납니다.<br>MS의 자랑 중 하나였던 Visual Studio의 명성을 그대로 이어 받은 정말 잘 만든 에디터입니다.</p><h4 id="1-모두가-선택한-IDE"><a href="#1-모두가-선택한-IDE" class="headerlink" title="1. 모두가 선택한 IDE"></a>1. 모두가 선택한 IDE</h4><p>JavaScript 계열에서의 IDE도 춘추 전국시대가 있었습니다.<br>제가 SublimeText를 써 왔던 것처럼 많은 이들이 다양한 에디터를 써왔습니다.<br>어떤 이는 SublimeText를 쓰고, 어떤 이는 Atom을 쓰기도 했죠. 몇몇 장인들은 에디터 플러스를 쓰기도 했습니다.<br>서로 자기가 최강의 에디터라고 군림하던때였습니다. 이런 춘추전국시대를 통일한 IDE가 바로 WebStorm이었죠.<br>WebStrom은 정말 좋은 툴이지만. 몇가진 단점이 있었습니다.</p><ul><li>첫째. 비싸요</li><li>둘째. JVM 환경하에 동작하기 때문에 느렸죠 ㅠㅠ<br>이런 단점들을 커버하고 등장한게 바로 VSCODE입니다.</li></ul><p>VSCODE가 유료툴 보다 좋다? 사실 분명하게 말하기는 어렵습니다. 하지만. 많은 사람들이 VSCODE를 선택하고 있다는 것은 명백한 사실입니다.<br>대표적으로 Stackoverflow에서 공개한 JavaScript TextEditor 자료를 보면 VSCODE의 위엄을 확인 할수 있습니다.<br>stackoverflow 자료에서는 2017년 두각을 나타내기 시작해서 2018년에는 거의 압도적으로 많은 사람들이 사용하는 IDE툴이 되었습니다. 캬~</p><img src="/blog/2018/11/28/to-vscode-in-2019/2017-texteditor.png"><p><a href="https://2017.stateofjs.com/2017/other-tools/" rel="external nofollow noopener noreferrer" target="_blank">2017년 Text Editors</a></p><img src="/blog/2018/11/28/to-vscode-in-2019/2018-texteditor.png"><p><a href="https://2018.stateofjs.com/other-tools/" rel="external nofollow noopener noreferrer" target="_blank">2018년 Text Editors</a></p><h4 id="2-VSCODE가-정말-빠릅니다"><a href="#2-VSCODE가-정말-빠릅니다" class="headerlink" title="2. VSCODE가 정말 빠릅니다."></a>2. VSCODE가 정말 빠릅니다.</h4><p>초기 에디터 띄우는 데 시간이 약간 걸리지만, 그 이후 부터는 완전 쾌적해요.<br>WebStrom이나 IntelliJ와 같이 Java JVM 에서 동작하지 않고 V8기반의 Electron에서 동작하기 때문에 정말 가볍고 빠릅니다.<br>이게 최고의 장점입니다.</p><h4 id="3-개발자에게-꼭-필요한-다양한-플로그인"><a href="#3-개발자에게-꼭-필요한-다양한-플로그인" class="headerlink" title="3. 개발자에게 꼭 필요한 다양한 플로그인"></a>3. 개발자에게 꼭 필요한 다양한 플로그인</h4><p>SublimeText 처럼 인터넷을 살펴보시면 VSCODE의 추천 플러그인들은 차고 넘쳐납니다.<br>언어에 국한되지 않고 차고 넘쳐나요. 더군다나 플러그인 자체가 js이기에 간단한 플러그인도 필요에 따라 직접 만들수 있습니다.<br>(저도 간단히 <a href="http://sculove.github.io/blog/2017/12/27/createvsextension/">Translator라는 플러그인</a>이라는 것을 만들어봤었습니다. 하하하)</p><p>정말 좋은 플러그인이 많은데요.<br>그 중에 좀 특이하지만 유용한것 몇가지만 소개해 드릴께요.</p><h5 id="GithubPull-Requests"><a href="#GithubPull-Requests" class="headerlink" title="GithubPull Requests"></a><a href="https://marketplace.visualstudio.com/items?itemName=GitHub.VSCODE-pull-request-github" rel="external nofollow noopener noreferrer" target="_blank">GithubPull Requests</a></h5><p>이 플러그인은 VSCODE 내에서 코드리뷰를 쉽게 할 수 있게 도와줘요. 리뷰 할때 해당 브랜치 내용을 확인하기 위해서 checkout 받는 경우가 종종 있죠?<br>checkout 받아서 커밋별, 파일별 파일 변경사항을 볼수 있고 리뷰 커멘트를 바로 적을수 있습니다.</p><img src="/blog/2018/11/28/to-vscode-in-2019/pr-by-commit.png"><p>코드 리뷰가 훨씬 편해요.<br><a href="https://github.com/Microsoft/VSCODE-pull-request-github/blob/master/.readme/demo.gif?raw=true" rel="external nofollow noopener noreferrer" target="_blank"><img src="/blog/2018/11/28/to-vscode-in-2019/demo.gif"></a></p><h5 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a><a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" rel="external nofollow noopener noreferrer" target="_blank">Settings Sync</a></h5><p>전 구형 iMac으로 개발하고 최신 MacBook Pro로 개발을합니다.<br>동일한 개발환경을 항상 유지하고 싶은 경우가 많은데요.<br>이때 마다 환경 맞추는 작업을 했었습니다. 쓰던 플러그인도 다시 깔고, 필요없다고 생각했던 플러그인도 지우고, 환경 설정도 매번 맞추는 작업을 했습니다. ㅠㅠ<br>하지만, VS Code의 Settings Sync를 이용하면 명령어 하나로 환경을 동기화할 수 있습니다.<br>이거 완전 편합니다.<br>집에서도 회사처럼 열심히 일할수 있어요 ㅡㅡ;;</p><h4 id="VS-Live-Share"><a href="#VS-Live-Share" class="headerlink" title="VS Live Share"></a><a href="https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare" rel="external nofollow noopener noreferrer" target="_blank">VS Live Share</a></h4><p>라이브 코딩이 됩니다. 페어프로그래밍할때 유용하게 할수 있겠죠?<br>저희 팀은 아직 이 단계까지는 프로세스로 못잡아서 시험만 해봤습니다. 구글독스의 동시편집같이 되요. 로컬이다보니 버벅임도 없이 정말 잘됩니다.<br>커서에 사용자 아이디가 보입니다. 요런식으로 ㅋ<br><a href="https://code.visualstudio.com/assets/blogs/2017/11/15/vs-code-ls-session2.png" rel="external nofollow noopener noreferrer" target="_blank"><img src="/blog/2018/11/28/to-vscode-in-2019/vscode-live.png"></a></p><p>자세한 것은 여기 링크를 봐보세요.<br><a href="https://code.visualstudio.com/blogs/2017/11/15/live-share" rel="external nofollow noopener noreferrer" target="_blank">https://code.visualstudio.com/blogs/2017/11/15/live-share</a></p><h3 id="FrontEnd-개발자라면…"><a href="#FrontEnd-개발자라면…" class="headerlink" title="FrontEnd 개발자라면…"></a>FrontEnd 개발자라면…</h3><p>저는 VSCODE를 사용하면 개발 생산성을 높이는데 많은 도움이 되었습니다.<br>저와 마찬가지로 몇몇 개발자는 이미 WebStorm에서 VSCODE로 옮겼던 경험들을 공유하기도 했습니다.</p><ul><li><a href="https://medium.com/@jawache/from-webstorm-to-vs-code-bd01ccc92aaf" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/@jawache/from-webstorm-to-vs-code-bd01ccc92aaf</a></li><li><a href="https://blog.buddyweb.fr/my-way-from-webstorm-to-vs-code-and-other-things-in-a-developers-life-fe71f0d07c59" rel="external nofollow noopener noreferrer" target="_blank">https://blog.buddyweb.fr/my-way-from-webstorm-to-vs-code-and-other-things-in-a-developers-life-fe71f0d07c59</a></li><li><a href="https://medium.com/linagora-engineering/from-webstorm-to-VSCODE-road-to-the-freedom-743eda17164a" rel="external nofollow noopener noreferrer" target="_blank">https://medium.com/linagora-engineering/from-webstorm-to-VSCODE-road-to-the-freedom-743eda17164a</a></li><li><a href="https://rationaldev.com/webstorm-vs-visual-studio-code/" rel="external nofollow noopener noreferrer" target="_blank">https://rationaldev.com/webstorm-vs-visual-studio-code/</a></li></ul><p>만약 JavaScript/TypeScript/HTML/CSS/node.js 등을 다루는 개발자라면 VSCODE로 IDE를 바꿔보시는 것도 좋은 선택이 될것 같습니다.<br>마지막으로 제가 쓰고 있는 VSCODE 플러그인을 공개합니다. 짜잔~!</p><img src="/blog/2018/11/28/to-vscode-in-2019/mylist.png">]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2018/11/28/to-vscode-in-2019/#disqus_thread</comments>
    </item>
    
    <item>
      <title>책을 쓰기전에 내가 이미 알았더라면 좋았을 툴</title>
      <link>http://sculove.github.io/blog/2018/07/07/know-before-you-write-book/</link>
      <guid>http://sculove.github.io/blog/2018/07/07/know-before-you-write-book/</guid>
      <pubDate>Sat, 07 Jul 2018 11:37:09 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;이번으로-2번째-책을-탈고-했다&quot;&gt;&lt;a href=&quot;#이번으로-2번째-책을-탈고-했다&quot; class=&quot;headerlink&quot; title=&quot;이번으로 2번째 책을 탈고 했다.&quot;&gt;&lt;/a&gt;이번으로 2번째 책을 탈고 했다.&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://book.naver.com/bookdb/book_detail.nhn?bid=7434247&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;첫번째 책&lt;/a&gt;은 정말로 얼떨결에 썼던 것같다.&lt;/p&gt;
&lt;p&gt;첫번째 책이 &lt;strong&gt;‘와 내가 저자가 되는거야?’&lt;/strong&gt; 라는 호기심과 영웅 심리(?)로 했었던 것이라면 이번 건은 진짜 써보고 싶어서 쓴 책이다. 그 만큼 시간도 많이 들어간 것 같고 열정도 많이 쏟았던 것 같다.&lt;br&gt;다만 아쉬움이 있다면. 생활고(?)에 힘들어서 책을 쓰는 기간이 너무 늘어났다는 것이다.&lt;br&gt;원래는 7개월 정도에 마무리 하려고 했지만 질질끌다보니 1년이 훌쩍 지나가 버렸다.&lt;br&gt;아마 처음 계획했던 것을 하려고했으면 아마 지금도 못 끝냈을 지도 모른다.&lt;/p&gt;
&lt;p&gt;책을 쓰는 것은 많이 시간이 들고 집필의 압박감에 꽤나 고단하고 피곤한 작업이다.&lt;br&gt;돈을 벌수 있는 수단도 아니다.&lt;/p&gt;
&lt;p&gt;물론, 초급자 대상의 책을 쭉쭉~ 뽑아내면 금전적으로 이득을 볼 수 있겠지만 나 같이 전문적인 기술 서적으로 돈을 번다는 것은 쉬운 일이 아니다.&lt;/p&gt;
&lt;p&gt;특히나 RxJS와 같이 이해하고 어렵고 특수한 분야의 책으로 돈을 벌기는 더더구나 힘들다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="이번으로-2번째-책을-탈고-했다"><a href="#이번으로-2번째-책을-탈고-했다" class="headerlink" title="이번으로 2번째 책을 탈고 했다."></a>이번으로 2번째 책을 탈고 했다.</h2><p><a href="http://book.naver.com/bookdb/book_detail.nhn?bid=7434247" rel="external nofollow noopener noreferrer" target="_blank">첫번째 책</a>은 정말로 얼떨결에 썼던 것같다.</p><p>첫번째 책이 <strong>‘와 내가 저자가 되는거야?’</strong> 라는 호기심과 영웅 심리(?)로 했었던 것이라면 이번 건은 진짜 써보고 싶어서 쓴 책이다. 그 만큼 시간도 많이 들어간 것 같고 열정도 많이 쏟았던 것 같다.<br>다만 아쉬움이 있다면. 생활고(?)에 힘들어서 책을 쓰는 기간이 너무 늘어났다는 것이다.<br>원래는 7개월 정도에 마무리 하려고 했지만 질질끌다보니 1년이 훌쩍 지나가 버렸다.<br>아마 처음 계획했던 것을 하려고했으면 아마 지금도 못 끝냈을 지도 모른다.</p><p>책을 쓰는 것은 많이 시간이 들고 집필의 압박감에 꽤나 고단하고 피곤한 작업이다.<br>돈을 벌수 있는 수단도 아니다.</p><p>물론, 초급자 대상의 책을 쭉쭉~ 뽑아내면 금전적으로 이득을 볼 수 있겠지만 나 같이 전문적인 기술 서적으로 돈을 번다는 것은 쉬운 일이 아니다.</p><p>특히나 RxJS와 같이 이해하고 어렵고 특수한 분야의 책으로 돈을 벌기는 더더구나 힘들다.</p><a id="more"></a><h2 id="그럼-난-왜-책을-썼는가"><a href="#그럼-난-왜-책을-썼는가" class="headerlink" title="그럼 난 왜 책을 썼는가?"></a>그럼 난 왜 책을 썼는가?</h2><p>그러게 왜 썼을까? ㅋㅋ</p><p>우선 이 책을 쓰게 된 계기는</p><h3 id="첫째-RxJS를-내가-더-잘-알고-싶었다"><a href="#첫째-RxJS를-내가-더-잘-알고-싶었다" class="headerlink" title="첫째. RxJS를 내가 더 잘 알고 싶었다."></a>첫째. RxJS를 내가 더 잘 알고 싶었다.</h3><p>강의도 마찬가지이지만 누군가에서 설명하고 가르치기 위해서는 많은 것을 확인해보고 검증해야한다. 더불어 내가 이해하지 않은 내용은 전달 자체를 할 수가 없다. 전달한다고 하더라고 듣고 있는 청자가 바로 눈치 챌 것이다. 그런데 글로 남는 책은 더더욱 그렇다. 사실 더욱 더 치밀하고 꼼꼼하게 확인해봐야한다.</p><h3 id="둘째-아내의-권유로"><a href="#둘째-아내의-권유로" class="headerlink" title="둘째. 아내의 권유로"></a>둘째. 아내의 권유로</h3><p>아내의 권유로 책을 쓰기로 마음을 먹었다. 아내 입장에서는 남편이 책을 쓴 저자라는게 꽤나 흐믓한 일인것 같았다. 아내도 책을 쓰는 시간을 도와준다고 확답(?)까지 했으니 나도 거절할 이유가 별로 없었다.</p><h3 id="셋째-내가-고민한-내용을-책으로-쓰고-싶었다"><a href="#셋째-내가-고민한-내용을-책으로-쓰고-싶었다" class="headerlink" title="셋째. 내가 고민한 내용을 책으로 쓰고 싶었다."></a>셋째. 내가 고민한 내용을 책으로 쓰고 싶었다.</h3><p>첫번째 쓴 책은 내가 <strong>경험한 것</strong>을 주로 썼던 것이라면 이번 책은 <strong>경험과 함께 고민이 함께 녹아들어간 책</strong>이다. RxJS를 비동기 처리의 한 요소로만 바라보는 분들에게 설명을 해주고 싶었고, 내가 개발하면서 느꼈던 고귀함(?)같은 것을 전달해 주고 싶었다.</p><p>암튼 곧 출판을 곧 앞둔 이 시점에서 가장 마음에 드는 것은 이제 집에가서 책을 써야한다는 강박관념이 없어서 너무 좋다. 행복하다. 오히려 뭘해야하지? 라는 공허함도 든다.</p><p>책 쓰기 전에는 유투브를 보면서도 책을 써야한다는 생각에 앉아서 걱정하며 지냈는데 지금은 집에가면 너무 편하다.</p><p>잠시 이야기를 하다보니 내가 이 글을 쓰게된 이유를 망각했다.</p><p>이 글은 내가 책을 쓰기전에 알았더라면 더 좋았을 툴들을 몇가지 이야기해보고자 한다.</p><h2 id="책을-쓰기전에-내가-이미-알았더라면-좋았을-툴"><a href="#책을-쓰기전에-내가-이미-알았더라면-좋았을-툴" class="headerlink" title="책을 쓰기전에 내가 이미 알았더라면 좋았을 툴"></a>책을 쓰기전에 내가 이미 알았더라면 좋았을 툴</h2><h3 id="1-Typora"><a href="#1-Typora" class="headerlink" title="1. Typora"></a>1. Typora</h3><p>글을 쓸 때 주로 마크다운 문서로 작성을 했다. github 나 gitlab에서 MD파일 자체를 바로 불수 있었기에 꽤 편리했다. 하지만, 아쉬웠던 점은 마크다운 문서의 아웃라인이 잘 보이지 않아서 쓴 글을 몇번이고 쳐다보면서 고쳤던 경험이 있다.<br>아마도 <a href="https://typora.io/" rel="external nofollow noopener noreferrer" target="_blank">typora</a>라는 마크업 편집기를 사전에 썼다면 훨씬 유용했을 것 같다.<br>뿐만아니라 word, pdf와 같은 다양한 포맷으로 문서를 만들수 있어서 작성한 글을 다른 플랫폼으로 이전하기가 너~무 편하다.</p><img src="/blog/2018/07/07/know-before-you-write-book/typora.png"><h3 id="2-Google-Docs"><a href="#2-Google-Docs" class="headerlink" title="2. Google Docs"></a>2. Google Docs</h3><p>이번에 베타리더들 대상으로 실시간 리뷰를 받은 적이 있는데 처음에는 github의 PR로 리뷰를 받다가 결국에는 <a href="https://docs.google.com/" rel="external nofollow noopener noreferrer" target="_blank">구글독스</a>를 이용하였다.<br>MS-WORD가 문서 이력을 관리하고 수정 첨부 등이 용이한 반면 온라인 기능을 바로 사용하기는 어렵다. 물론 MSOffice 365를 사용하면 가능하다 하지만, 유료를 굳이 구매할 필요가 있나싶다.</p><p>MSOffice 365같은 기능을 무료로 사용할 수 있는 툴이 있다. 바로 구글 독스이다.<br>구글 독스를 이용하면 실시간 문서의 리뷰가 가능하다. 베타리더의 의견을 받기에는 이것보다 좋은 것은 아직까지 못 본듯하다.</p><img src="/blog/2018/07/07/know-before-you-write-book/google-docs.png"><h3 id="3-gitbook"><a href="#3-gitbook" class="headerlink" title="3. gitbook"></a>3. gitbook</h3><p>초창기에 이것도 한번 써보려고 해봤는데… 포기.</p><p>사실 개인이 책을 쓰는 것이기 때문에 공개를 목적이 아닌 이상 gitbook은 오히려 번거로워서 사용하려다가 말았다. 만약 공개 책을 쓰거나 gitbook 유료 개정이 있다면 gitbook도 나쁘지 않은 선택인 것 같다.<br>지금은 초창기에 썼던 것보다 훨씬 더 괜찮아진 것 같다.</p><img src="/blog/2018/07/07/know-before-you-write-book/gitbook.jpeg"><h3 id="4-Jsfiddle-codepen"><a href="#4-Jsfiddle-codepen" class="headerlink" title="4. Jsfiddle, codepen"></a>4. Jsfiddle, codepen</h3><p>jsfiddle, codepen과 같은 온라인에서 소스 예제를 작성하기 좋은 사이트들이 있다. 처음에 나도 도입하려고 해봤는데 생각만큼 이력관리가 잘 안된다. 그리고 소스 수정하는게 꽤나 번거롭다.</p><p>암튼 이것도… 포기</p><img src="/blog/2018/07/07/know-before-you-write-book/codepen.png"><h2 id="다시-내가-책을-쓴다면…"><a href="#다시-내가-책을-쓴다면…" class="headerlink" title="다시 내가 책을 쓴다면…"></a>다시 내가 책을 쓴다면…</h2><p>와이프랑 아이에게 프로그래밍 가르치는 책을 한번 써보고 싶다는 생각은 있지만… 생각만 있을뿐 다음에 책을 쓸지는 모르겠다.</p><p>암튼, 만약 내가 다시 책을 쓴다면 아마 다음과 같이 작업을 할 것 같다.</p><ol><li>문서<ul><li>목차, 초안은 <strong><u>Typora</u></strong>로 로컬에서 마크다운 문서를 작성한다.</li><li>이때 작성된 문서는 <strong><u>GitHub나 gitlab</u></strong>으로 관리한다.</li><li>1차로 작성이 끝난 문서는 word형태로 변경하여 <strong><u>구글 독스</u></strong>에서 작업한다.</li><li>문서 리뷰가 필요하다면 구글 독스의 공유기능을 이용하여 베타리뷰어의 리뷰를 받는다.</li></ul></li><li>소스<ul><li>온라인 소스 공유공간을 이용하지 않고 로컬에서 자유롭게 수정할수 있도록 작성한다.</li><li><strong><u>GitHub나 gitlab</u></strong>을 이용하여 소스를 관리하고 PR을 통해 코드 리뷰를 받는다.</li></ul></li></ol><p>아니면…</p><p>그냥 돈을 주고 <strong><u>gitbook</u></strong>을 써볼 듯 하다. ^^;</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2018/07/07/know-before-you-write-book/#disqus_thread</comments>
    </item>
    
    <item>
      <title>아~ 드디어 탈고!</title>
      <link>http://sculove.github.io/blog/2018/04/11/complete-book/</link>
      <guid>http://sculove.github.io/blog/2018/04/11/complete-book/</guid>
      <pubDate>Tue, 10 Apr 2018 15:01:27 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;아~ 드디어 원고를 탈고했다.&lt;/p&gt;
&lt;img src=&quot;/blog/2018/04/11/complete-book/review.jpg&quot;&gt;

&lt;p&gt;인쇄를 했더니 A4 한박스가 훌러덩 다 나갔다.&lt;br&gt;많은 양을 써놓은게 뿌듯하기도 했지만 한 편으로는 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>아~ 드디어 원고를 탈고했다.</p><img src="/blog/2018/04/11/complete-book/review.jpg"><p>인쇄를 했더니 A4 한박스가 훌러덩 다 나갔다.<br>많은 양을 써놓은게 뿌듯하기도 했지만 한 편으로는 무슨 부귀영화를 누리려고 이렇게까지 살았나? 라는 생각도 들었다.</p><p>사실 책은 다 썼지만 아직 제목을 정하지는 못했다. 예제 위주로 RxJS를 익힐 수 있도록 작성한 책이긴 한데… 뭔가 임팩트 있는 제목을 아직까지 못찾았다.<br>이러다보면 결국 출판사에서 제안하는 이름을 선택 택하겠지 ^^;</p><p>책을 읽는 사람이 읽기만 해도 이해를 쉽게 할 수 있도록 가급적이면 상세히 쓰려고 노력했지만 잘 녹아들어갔는지는 원고 교정이 끝난 이후에 피드백을 좀 받아봐야겠다.</p><p>아~ 사실 더 다루고 싶은 내용도 정말 많았다. 하지만 욕심을 많이 버렸다.<br>RxJS 6.0이 나와서 전체적으로 소스도 바꾸고 하다보니 욕심부리다 보면 올해도 책을 못낼 것 같은 생각이 들어 마무리를 지었다.</p><p>담에 기회가 되면 더 많은 내용을 다루는 것을 숙제로 남기고… 그동안 하고싶었던 일들을 좀 여유롭게 해봐야겠다.</p><p>마지막으로 지금까지 묵묵히 바쁜척하는 남편을 도와준 우리 와이프와 아이들에게 마지막으로 감사를 보낸다.<br>이제 넷플릭스로 미드도 보고 게임기로 게임좀 원없이 해보자 ㅋㅋ</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2018/04/11/complete-book/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Typescript로 부터 얻은 것과 잃은 것</title>
      <link>http://sculove.github.io/blog/2018/01/18/typescript-axes/</link>
      <guid>http://sculove.github.io/blog/2018/01/18/typescript-axes/</guid>
      <pubDate>Thu, 18 Jan 2018 10:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;Typescript로-부터-얻은-것과-잃은-것&quot;&gt;&lt;a href=&quot;#Typescript로-부터-얻은-것과-잃은-것&quot; class=&quot;headerlink&quot; title=&quot;Typescript로 부터 얻은 것과 잃은 것&quot;&gt;&lt;/a&gt;Typescript로
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Typescript로-부터-얻은-것과-잃은-것"><a href="#Typescript로-부터-얻은-것과-잃은-것" class="headerlink" title="Typescript로 부터 얻은 것과 잃은 것"></a>Typescript로 부터 얻은 것과 잃은 것</h3><h4 id="eg-Axes-개발-경험기"><a href="#eg-Axes-개발-경험기" class="headerlink" title="eg.Axes 개발 경험기"></a><a href="https://github.com/naver/egjs-axes" rel="external nofollow noopener noreferrer" target="_blank">eg.Axes</a> 개발 경험기</h4><img src="/blog/2018/01/18/typescript-axes/typescript.png"><p>Typescript는 자바스크립트의 자유로움 속에서 타입의 안정성을 함께 추구할수 있는 언어입니다.<br>이 발표는 Typescript를 적용하면서 느낀 좋은 점과 나쁜점을 개인적인 관점에서 살펴봅니다.</p><h4 id="발표-자료"><a href="#발표-자료" class="headerlink" title="발표 자료"></a>발표 자료</h4><iframe src="http://sculove.github.io/slides/typescript_axes/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe><p>자료 : <a href="http://sculove.github.io/slides/typescript_axes/">http://sculove.github.io/slides/typescript_axes/</a></p><h4 id="동영상"><a href="#동영상" class="headerlink" title="동영상"></a>동영상</h4><div class="video-container"><iframe src="//www.youtube.com/embed/3M92klkicVc" frameborder="0" allowfullscreen></iframe></div><h4 id="발표한-행사-정보"><a href="#발표한-행사-정보" class="headerlink" title="발표한 행사 정보"></a>발표한 행사 정보</h4><p>[2018.01.18] TypeScript Korea Meetup 2018-1 <a href="https://www.tumblbug.com/20180118" rel="external nofollow noopener noreferrer" target="_blank">https://www.tumblbug.com/20180118</a></p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2018/01/18/typescript-axes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>자바스크립트 비동기 처리 과정과 RxJS Scheduler</title>
      <link>http://sculove.github.io/blog/2018/01/18/javascriptflow/</link>
      <guid>http://sculove.github.io/blog/2018/01/18/javascriptflow/</guid>
      <pubDate>Wed, 17 Jan 2018 15:58:15 GMT</pubDate>
      <description>
      
        &lt;p&gt;오늘 소개할 부분은 작성 중인 책의 “부록” 중 일부이다.&lt;br&gt;이 장에서는 RxJS Scheduler를 잘 사용하기 위해서 이해해야할 &lt;code&gt;자바스크립트 비동기 처리 과정&lt;/code&gt;을 살펴본다.&lt;/p&gt;
&lt;p&gt;RxJS를 모르는 사람이라도 &lt;code&gt;자바스크립트의 비동기 처리과정&lt;/code&gt;을 이해하면 자바스크립트를 개발하는데 정말 많은 도움을 준다.&lt;br&gt;더 자세한 내용은 다음 URL을 참고하여 꼭! 읽어보기 바란다&lt;/p&gt;
&lt;h4 id=&quot;참고-URL&quot;&gt;&lt;a href=&quot;#참고-URL&quot; class=&quot;headerlink&quot; title=&quot;참고 URL&quot;&gt;&lt;/a&gt;참고 URL&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h1 id=&quot;부록-RxJS-Scheduler와-자바스크립트-비동기-처리-과정의-이해&quot;&gt;&lt;a href=&quot;#부록-RxJS-Scheduler와-자바스크립트-비동기-처리-과정의-이해&quot; class=&quot;headerlink&quot; title=&quot;부록. RxJS Scheduler와 자바스크립트 비동기 처리 과정의 이해&quot;&gt;&lt;/a&gt;부록. RxJS Scheduler와 자바스크립트 비동기 처리 과정의 이해&lt;/h1&gt;&lt;p&gt;RxJS Scheduler는 RxJS에서 자바스크립트의 비동기 작업을 효과적으로 처리할수 있도록 도와주는 역할을 한다.&lt;br&gt;따라서, RxJS Scheduler를 잘 활용하기 위해서는 기본적으로 &lt;code&gt;자바스크립트 엔진이 어떻게 비동기 작업을 처리&lt;/code&gt;하는 지를 알면 RxJS Scheduler를 사용하는데 많은 도움이 된다.&lt;/p&gt;
&lt;p&gt;이 장에서는 자바스크립트 엔진이 어떻게 비동기 작업을 처리하는 지를 살펴보고, 각 비동기 작업에 해당되는 RxJS scheduler는 어떤 것이 있는지 살펴보기로 하자.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>오늘 소개할 부분은 작성 중인 책의 “부록” 중 일부이다.<br>이 장에서는 RxJS Scheduler를 잘 사용하기 위해서 이해해야할 <code>자바스크립트 비동기 처리 과정</code>을 살펴본다.</p><p>RxJS를 모르는 사람이라도 <code>자바스크립트의 비동기 처리과정</code>을 이해하면 자바스크립트를 개발하는데 정말 많은 도움을 준다.<br>더 자세한 내용은 다음 URL을 참고하여 꼭! 읽어보기 바란다</p><h4 id="참고-URL"><a href="#참고-URL" class="headerlink" title="참고 URL"></a>참고 URL</h4><ul><li><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" rel="external nofollow noopener noreferrer" target="_blank">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></li><li><a href="https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5" rel="external nofollow noopener noreferrer" target="_blank">https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5</a></li><li><a href="https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/" rel="external nofollow noopener noreferrer" target="_blank">https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/</a></li></ul><hr><h1 id="부록-RxJS-Scheduler와-자바스크립트-비동기-처리-과정의-이해"><a href="#부록-RxJS-Scheduler와-자바스크립트-비동기-처리-과정의-이해" class="headerlink" title="부록. RxJS Scheduler와 자바스크립트 비동기 처리 과정의 이해"></a>부록. RxJS Scheduler와 자바스크립트 비동기 처리 과정의 이해</h1><p>RxJS Scheduler는 RxJS에서 자바스크립트의 비동기 작업을 효과적으로 처리할수 있도록 도와주는 역할을 한다.<br>따라서, RxJS Scheduler를 잘 활용하기 위해서는 기본적으로 <code>자바스크립트 엔진이 어떻게 비동기 작업을 처리</code>하는 지를 알면 RxJS Scheduler를 사용하는데 많은 도움이 된다.</p><p>이 장에서는 자바스크립트 엔진이 어떻게 비동기 작업을 처리하는 지를 살펴보고, 각 비동기 작업에 해당되는 RxJS scheduler는 어떤 것이 있는지 살펴보기로 하자.</p><a id="more"></a><h2 id="자바스크립트-엔진"><a href="#자바스크립트-엔진" class="headerlink" title="자바스크립트 엔진"></a>자바스크립트 엔진</h2><p>자바스크립트 엔진은 기본적으로 하나의 쓰레드에서 동작한다. 하나의 쓰레드를 가지고 있다는 것은 하나의 stack을 가지고 있다는 의미와 같고, 하나의 stack이 있다는 의미는 <code>동시에 단 하나의 작업만을 할 수 있다</code>는 의미이다.</p><p>자바스크립트 엔진은 하나의 코드 조각을 하나씩 실행하는 일을 하고, 비동기적으로 이벤트를 처리하거나 Ajax 통신을 하는 작업은 사실상 Web API에서 모두 처리된다.</p><img src="/blog/2018/01/18/javascriptflow/browser-structure.png"><p>자바스크립트가 동시에 단 하나의 작업만을 한다는데 어떻게 여러가지 작업을 비동기로 작업을 할수 있을까?<br>그 비밀은 <code>바로 Event Loop와 Queue에 있다.</code></p><h2 id="Event-Loop-와-Queue"><a href="#Event-Loop-와-Queue" class="headerlink" title="Event Loop 와 Queue"></a>Event Loop 와 Queue</h2><p>Event Loop에서 Loop의 사전적인 의미는 ‘반복. 순환’이다. Event Loop는 사전적인 의미처럼 계속 반복해서 call stack과 queue 사이의 작업들을 확인하고, call stack이 비워있는 경우 queue에서 작업을 꺼내어 call stack에 넣는다.<br>자바스크립트는 이 Event Loop와 Queue들을 이용하여 비동기 작업을 수행한다.<br>직접적인 작업은 Web API에서 처리되고, 그 작업들이 완료되면 요청시 등록했던 callback이 queue에 등록된다.<br>Event Loop는 이 작업들을 Queue에서 꺼내어 처리한다.<br>Event Loop는 stack에 처리할 작업이 없을 경우 우선적으로 microtask queue를 확인한다. microtask queue에 작업이 있다면 microtask에 있는 작업을 꺼내서 call stack에 넣는다. 만약 microtask의 queue가 비어서 더 이상 처리할 작업이 없으면 이때 task queue를 확인한다. task queue의 작업도 꺼내서 call stack에 넣는다.<br>이렇게 Event Loop와 Queue는 자바스크립트 엔진이 하나의 코드 조각을 하나씩 처리할 수 있도록 작업을 스케줄하는 동시에 이러한 이유로 우리는 자바스크립트에서 비동기 작업을 할수 있도록 해준다.</p><h2 id="자바스크립트-처리-과정"><a href="#자바스크립트-처리-과정" class="headerlink" title="자바스크립트 처리 과정"></a>자바스크립트 처리 과정</h2><p>다음 코드를 바탕으로 자바스크립트 처리과정을 살펴보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"script start"</span>);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"setTimeout"</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise1"</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"promise2"</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">requestAnimationFrame(<span class="function"><span class="keyword">function</span> </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"requestAnimationFrame"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"script end"</span>);</span><br></pre></td></tr></table></figure><p>위의 코드를 실행하면 다음과 같은 결과 화면을 얻을 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">script start</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">promise2</span><br><span class="line">requestAnimationFrame</span><br><span class="line">setTimeout</span><br></pre></td></tr></table></figure><p>어떻게 이런 결과가 나왔을까?</p><p>간단해 보이는 이 코드는 실제 다음과 같이 처리된다.</p><ol><li>‘script 실행 작업’이 stack에 등록된다.</li><li>console.log(‘script start’)가 처리된다.</li><li>setTimeout 작업이 stack에 등록되고, Web API에게 setTimeout을 요청한다. 이때 setTimeout의 callback 함수를 함께 전달한다. 요청 이후 stack에 있는 setTimeout 작업은 제거된다.<img src="/blog/2018/01/18/javascriptflow/step1.png"></li><li>Web API는 setTimeout 작업(0초 후)이 완료되면 setTimeout callback 함수를 task queue에 등록한다.<img src="/blog/2018/01/18/javascriptflow/step2.png"></li><li>Promise 작업이 stack에 등록되고, Web API에게 Promise 작업을 요청한다. 이때 Promise.then의 callback 함수를 함께 전달한다. 요청 이후 stack에 있는 Promise 작업은 제거된다.<img src="/blog/2018/01/18/javascriptflow/step3.png"></li><li>Web API는 Promise 작업이 완료되면 Promise.then의 callback 함수를 microtask queue에 등록한다.<img src="/blog/2018/01/18/javascriptflow/step4.png"></li><li>requestAnimation 작업이 stack에 등록되고, Web API에게 requestAnimation을 요청한다. 이때 requestAnimation의 callback 함수를 함께 전달한다. 요청 이후 stack에 있는 requestAnimation 작업은 제거된다.<img src="/blog/2018/01/18/javascriptflow/step5.png"></li><li>Web API는 requestAnimation의 callback 함수를 animation frame에 등록한다.<img src="/blog/2018/01/18/javascriptflow/step6.png"></li><li>console.log(‘script end’)가 처리된다.</li><li>‘script 실행 작업’이 완료되어 stack에서 제거된다.</li><li>stack이 비워있어서 microtask queue에 등록된 Promise.then 의 callback 함수를 stack에 등록한다.<img src="/blog/2018/01/18/javascriptflow/promise-step1.png"></li><li>첫번째 Promise.then의 callback 함수가 실행되어 내부의 console.log(‘promise1’)가 처리된다.</li><li>첫번째 Promise.then 다음에 Promise.then이 있다면 다음 Promise.then의 callback 함수를 microtask queue에 등록한다.<img src="/blog/2018/01/18/javascriptflow/promise-step2.png"></li><li>stack 에서 첫번째 Promise.then의 callback 함수를 제거하고 microtask queue에서 첫번째 Promise.then의 callback 함수를 제거한다.</li><li>두번째 Promise.then의 callback 함수를 stack에 등록한다.<img src="/blog/2018/01/18/javascriptflow/promise-step3.png"></li><li>두번째 Promise.then의 callback 함수가 실행되어 내부의 console.log(‘promise2’)가 처리된다.</li><li>stack 에서 두번째 Promise.then의 callback 함수를 제거한다.</li><li>microtask 작업이 완료되면 animation frame에 등록된 callback 함수를 꺼내 실행한다.<img src="/blog/2018/01/18/javascriptflow/raf-step.png"></li><li>이후 브라우저는 랜더링 작업을 하여 UI를 업데이트한다.</li><li>stack과 microtask queue가 비워있어서 task queue에 등록된 callback 함수를 꺼내 stack에 등록한다.<img src="/blog/2018/01/18/javascriptflow/task-step.png"></li><li>setTimeout의 callback가 실행되어 내부의 console.log(‘setTimeout’)이 처리된다.</li><li>setTimeout의 callback 함수 실행이 완료되면 stack에서 제거된다.</li></ol><blockquote><p>처리 과정에 대한 자세한 사항은 다음 링크를 참조하기 바란다.<br><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/" rel="external nofollow noopener noreferrer" target="_blank">https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/</a></p></blockquote><p>꽤나 복잡한 과정이지만 꼭! 명심해야할 것이 있다.</p><ul><li>첫째. 비동기 작업으로 등록되는 작업은 task와 microtask. 그리고 animationFrame 작업으로 구분된다.</li><li>둘째. microtask는 task보다 먼저 작업이 처리된다.</li><li>셋째. microtask가 처리된 이후 requestAnimationFrame이 호출되고 이후 브라우저 랜더링이 발생한다.</li></ul><h2 id="RxJS-Scheduler와-자바스크립트-비동기-작업의-종류"><a href="#RxJS-Scheduler와-자바스크립트-비동기-작업의-종류" class="headerlink" title="RxJS Scheduler와 자바스크립트 비동기 작업의 종류"></a>RxJS Scheduler와 자바스크립트 비동기 작업의 종류</h2><h3 id="Task"><a href="#Task" class="headerlink" title="Task"></a>Task</h3><p>task는 비동기 작업이 순차적으로 수행될 수 있도록 보장하는 형태의 작업 유형이다. 여기서 순차적으로 보장한다는 의미는 작업이 <code>예약되어있는 순서를 보장한다는 의미</code>이다. task 다음에 바로 다음 task가 실행된다는 의미는 아니다. 위의 예처럼 task 사이에는 브라우저 랜더링과 같은 작업이 일어 날 수 있기 때문이다.<br>RxJS에서 task와 같은 형태의 작업을 하려면 <a href="http://reactivex.io/rxjs/variable/index.html#static-variable-async" rel="external nofollow noopener noreferrer" target="_blank">Rx.Scheduler.async</a> 스케줄러를 이용하여 구현할 수 있다.<br>실제 Rx.Scheduler.async는 setInterval을 이용하여 구현되어 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">protected requestAsyncId(scheduler: AsyncScheduler, id?: any, <span class="attr">delay</span>: number = <span class="number">0</span>): any &#123;</span><br><span class="line">  <span class="keyword">return</span> root.setInterval(scheduler.flush.bind(scheduler, <span class="keyword">this</span>), delay);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Microtask"><a href="#Microtask" class="headerlink" title="Microtask"></a>Microtask</h3><p>microtask는 비동기 작업이 현재 실행되는 스크립트 바로 다음에 일어나는 작업이다. 따라서 task보다 항상 먼저 실행된다.<br>microtask로는 <a href="https://developer.mozilla.org/ko/docs/Web/API/MutationObserver" rel="external nofollow noopener noreferrer" target="_blank">MutationObserver</a>와 Promise가 이에 해당된다.<br>RxJS에서 microtask와 같은 형태의 작업을 하려면 <a href="http://reactivex.io/rxjs/variable/index.html#static-variable-asap" rel="external nofollow noopener noreferrer" target="_blank">Rx.Scheduler.asap</a> 스케줄러를 이용하여 구현할 수 있다.<br>실제 Rx.Scheduler.asap은 Promise로 구현되어 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">protected requestAsyncId(scheduler: AsapScheduler, id?: any, <span class="attr">delay</span>: number = <span class="number">0</span>): any &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(</span><br><span class="line">      scheduler.flush.bind(scheduler, <span class="literal">null</span>)</span><br><span class="line">    ));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">setImmediate(cb: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">void</span>): number &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="built_in">Promise</span>.resolve().then(<span class="function"><span class="params">()</span> =&gt;</span> runIfPresent(handle));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2018/01/18/javascriptflow/#disqus_thread</comments>
    </item>
    
    <item>
      <title>VSCODE Extension 만든 삽질기</title>
      <link>http://sculove.github.io/blog/2017/12/27/createvsextension/</link>
      <guid>http://sculove.github.io/blog/2017/12/27/createvsextension/</guid>
      <pubDate>Wed, 27 Dec 2017 08:47:32 GMT</pubDate>
      <description>
      
        &lt;p&gt;MS에 기여한게 없어서 뭔가 해봐야겠다는 생각에&lt;br&gt;그동안 만들고 싶었던 vscode extentions을 만들어 봤다.&lt;/p&gt;
&lt;img src=&quot;/blog/2017/12/27/createvsextension/translator.png&quot;&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=sculove.translator&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;https://marketplace.visualstudio.com/items?itemName=sculove.translator&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;한글을 번역할 때는 번역된 텍스트에 적용할 수 있는 접두사가 적용된 메서드의 이름을 보여주는 기능도 넣었다.&lt;/p&gt;
&lt;img src=&quot;/blog/2017/12/27/createvsextension/korToEn.gif&quot;&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>MS에 기여한게 없어서 뭔가 해봐야겠다는 생각에<br>그동안 만들고 싶었던 vscode extentions을 만들어 봤다.</p><img src="/blog/2017/12/27/createvsextension/translator.png"><p><a href="https://marketplace.visualstudio.com/items?itemName=sculove.translator" rel="external nofollow noopener noreferrer" target="_blank">https://marketplace.visualstudio.com/items?itemName=sculove.translator</a></p><p>한글을 번역할 때는 번역된 텍스트에 적용할 수 있는 접두사가 적용된 메서드의 이름을 보여주는 기능도 넣었다.</p><img src="/blog/2017/12/27/createvsextension/korToEn.gif"><a id="more"></a><h2 id="왜-만들었나"><a href="#왜-만들었나" class="headerlink" title="왜 만들었나?"></a>왜 만들었나?</h2><p>김지한(laziel)군과 윤종문(문)군이 이런거 있으면 좋겠다고 이야기해서 만들기 시작하긴 했는데…<br>따지고 보니 내가 더 필요한 것 같았다.</p><p>우리가 개발할 때 항상 켜놓고 보는게 사전과 번역기다.<br>change와 update, alter등 우리말로는 다 <code>변화하다</code>라는 의미인데 실제 영어는 각각이 의미하는 바가 다르다. 따라서 매번 변수명, 메소드명 짓는데 시간을 낭비한다.<br>그때 기분에 따라 또는 떠오르는 것에 따라 정하다보니 나중에 코드를 보면 의미가 불명확해서 내가 봐도 헷갈리게 된다.<br>더군다나 같이 개발하는 사람들또한 헷갈리다보니 나중에 가서는 더.더.더. 헷갈린다.</p><p>그래서 사전을 보거나 번역을 하는데. 이게 의외로 시간이 좀 걸린다.</p><h2 id="VSCode-Extention-구조에-대한-회고"><a href="#VSCode-Extention-구조에-대한-회고" class="headerlink" title="VSCode Extention 구조에 대한 회고"></a>VSCode Extention 구조에 대한 회고</h2><p>사실 만든 코드는 많지 않지만, 우선은 vscode extentions에 대한 학습이 필요했기에 틈틈히 관련 내용을 살펴봤었다.</p><p>MS가 문서화 하나는 정말 잘해 놓은것 같아서 사실 보기에는 꽤 편했다.<br>내가 참조한 문서는 여기 <a href="https://code.visualstudio.com/docs/extensions/overview" rel="external nofollow noopener noreferrer" target="_blank">overview</a> 문서를 시작으로 <a href="https://code.visualstudio.com/docs/extensionAPI/vscode-api" rel="external nofollow noopener noreferrer" target="_blank">vsdoe namespace API</a> 문서까지 봤다.<br>예상대로 vscode의 extension은 command 패턴으로 되어 있어서 커멘트 단위로 짜서 등록을 하고 쓰는 식이 었다.</p><p>약간 특이한 점은 <a href="https://code.visualstudio.com/docs/extensionAPI/extension-points" rel="external nofollow noopener noreferrer" target="_blank">contribute points</a>가 있어서 <code>템플릿 메타 프로그래밍</code>이 가능하다. 정의된 항목에 정의된 정보를 입력하면 코딩이 된다. 이것도 MS가 예전부터 지향했던 방식 중의 하나라 개발하기에는 편했다. 개인적으로는 메타 프로그래밍과 의 적정한 수준을 유지한게 좋았다.</p><p>다음으로 특이한점은 Language Server가 있었다.<br>처음에는 Language Server라 길래 언어작업을 할때 쓰는 것인가로 생각했는데 알고보니 <code>비용이 많이 발생하는 작업을 서버에서 처리 후 VSCode Language Protocol로 전달하는 형태</code>였다.<br>이건 좀 괜찮은 방식인것 같다. 내가 만들 extention과는 관련이 없지만 나중에 좀 복잡한 것 만들때는 한번 만들어봐야겠다.</p><img src="/blog/2017/12/27/createvsextension/extensibility-architecture.png"><h2 id="만들면서-내가-한-삽질은"><a href="#만들면서-내가-한-삽질은" class="headerlink" title="만들면서 내가 한 삽질은?"></a>만들면서 내가 한 삽질은?</h2><h3 id="아쉬운-점은-API문서가-좀-빈약했다"><a href="#아쉬운-점은-API문서가-좀-빈약했다" class="headerlink" title="아쉬운 점은 API문서가 좀 빈약했다."></a>아쉬운 점은 API문서가 좀 빈약했다.</h3><p>아마도 typescript를 이용해서 타입 정의와 설명 정도를 뽑았던것 같다.<br>사실 이 정도도 훌륭하지만 간단한 예제코드가 있었으면 더 좋았을것 같다.<br>결국 직접 코딩을 해보면서 확인해 보거나, 그것이 안된다면 github 검색을 이용해서 찾아봤다.<br>github가 의외로 좋은 코드조각들을 보여줬다.</p><img src="/blog/2017/12/27/createvsextension/github-code.png"><h3 id="vscode는…-노드입니다"><a href="#vscode는…-노드입니다" class="headerlink" title="vscode는… 노드입니다."></a>vscode는… 노드입니다.</h3><p>vscode가 electron에서 돌다보니 우선 기본적으로 node 환경이다.<br>브라우저 개발에 익숙하다보니 그냥 브라우저인가 보다 하고 작업하다가 나중에 깨닫게(?) 되서 약간 어이가 없는 삽질을 했다. (Document를 너무 설렁 설렁봤다 ㅠㅠ)<br>사실 이렇게 헷갈린 이유는 extentions이 돌아가는 곳에서 devTool를 볼수 있기 때문이다.</p><img src="/blog/2017/12/27/createvsextension/devtool.png"><p>암튼 이로 인해 브라우저 환경으로 착각하고 fetch API를 써봤지만 안되서 삽질을 좀 했다.<br>devtool에서는 분명 fetch API를 사용할 수 있는데 정작 코드에서는 에러가 나서 난감했다.</p><p>환경이 node라는 것을 알았으나, 처음에 fetch를 사용하고자 했던 마음을 접을 수가 없어서 결국 <a href="https://github.com/matthew-andrews/isomorphic-fetch" rel="external nofollow noopener noreferrer" target="_blank">isomorphic-fetch</a>을 사용했다.<br>나중에 알게된 거지만 <a href="https://www.npmjs.com/package/electron-fetch" rel="external nofollow noopener noreferrer" target="_blank">electron-fetch</a>를 썼으면 더 좋았을 뻔 했다.<br><a href="https://developer.mozilla.org/ko/docs/Web/API/FormData" rel="external nofollow noopener noreferrer" target="_blank">FormData</a>도 있고 여러가지 쓸 수 있어서 좋아보였다.<br>담에 코드 수정할때 함 바꿔봐야겠다.</p><h3 id="아-typescript"><a href="#아-typescript" class="headerlink" title="아~ typescript"></a>아~ typescript</h3><p>typscript 설정에서 좀 해멨던것 같다. 어떻게 보면 이것도 node 환경을 인지못해서 난 불상사지만 아니었다고 해도 좀 헤멜수는 있다.<br>vscode가 만들어 주는 tsconfig.ts는 <code>target</code>이 es6이고, <code>lib</code>도 es6만 명시되어있다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">"compilerOptions"</span>: &#123;</span><br><span class="line">        <span class="string">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">        <span class="string">"target"</span>: <span class="string">"es6"</span>,</span><br><span class="line">        <span class="string">"outDir"</span>: <span class="string">"out"</span>,</span><br><span class="line">        <span class="string">"lib"</span>: [</span><br><span class="line">            <span class="string">"es6"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">"rootDir"</span>: <span class="string">"src"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"exclude"</span>: [</span><br><span class="line">        <span class="string">"node_modules"</span>,</span><br><span class="line">        <span class="string">".vscode-test"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이렇게 직접적으로 <code>lib를 지정하면 문제는 딱 지정한 그것만 포함된다.</code><br>lib가 지정되어 있지 않으면 타겟에 따라 기본적으로 추가되는 lib가 다르다.</p><blockquote><p><a href="https://www.typescriptlang.org/docs/handbook/compiler-options.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.typescriptlang.org/docs/handbook/compiler-options.html</a></p><ul><li>target ES5인 경우 <code>DOM,ES5,ScriptHost</code>이 자동 추가</li><li>target ES6인 경우 <code>DOM,ES6,DOM.Iterable,ScriptHost</code>이 자동 추가</li></ul></blockquote><p>따라서 DOM 관련된 API를 사용하면 타입 에러가 난다.</p><p>그런데 문제는 fetch API를 쓰려고 DOM을 추가하면 vscode가 바로 반영이 안된다. 자꾸 타입에러가 난다.<br>이때 결론은 <code>vscode를 껐다가 다시 부르면 된다.</code><br>아~ 이것 때문에 잘못 설정한줄 알고 삽질을 많이함 ㅠㅠ</p><h2 id="소감"><a href="#소감" class="headerlink" title="소감?"></a>소감?</h2><p>개발자가 만들기에는 꽤 괜찮은 vscode extentions.<br>생각보다 쉽게 만들수 있었다.<br>좀 아쉬운 점은 custom UI를 만들수가 없다. 그냥 간단한 view를 보여주고 싶은데 사실 관련 API를 찾지 못했다.<br>아마도 정형화된 UI를 제공하기 위한 포석일수도 있을것 같다.<br>그래고 좀 뷰만 잘되는 UI라도 하나 있으면 좋겠다.</p><p>다름에 또 아이디어가 있으면 한번 더 만들어보고 싶다.</p><h2 id="참고한-예제"><a href="#참고한-예제" class="headerlink" title="참고한 예제"></a>참고한 예제</h2><ul><li><a href="https://code.visualstudio.com/docs/extensions/example-word-count" rel="external nofollow noopener noreferrer" target="_blank">https://code.visualstudio.com/docs/extensions/example-word-count</a></li><li><a href="https://github.com/Microsoft/vscode-MDTools" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Microsoft/vscode-MDTools</a> : vscode.window.showQuickPick, QuickPickItem, TextEditor 사용 예</li><li><a href="https://github.com/Microsoft/vscode-extension-samples" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Microsoft/vscode-extension-samples</a></li></ul>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/12/27/createvsextension/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React로 레거시(?) 코드 랩핑하기</title>
      <link>http://sculove.github.io/blog/2017/11/21/wrappingReact/</link>
      <guid>http://sculove.github.io/blog/2017/11/21/wrappingReact/</guid>
      <pubDate>Tue, 21 Nov 2017 14:41:50 GMT</pubDate>
      <description>
      
        &lt;p&gt;기존에 작성한 또는 DOM 기반으로 작성한 코드를 React나 Angular, Vue와 같은 프레임워크에서 사용하고 싶은 경우가 많다.&lt;br&gt;물론, &lt;code&gt;기존 코드의 내용은 하나도 안고치고 사용하고자 한다.&lt;/code&gt;&lt;br&gt;그래서 일반적으로 기존 코드를 사용하는(랩핑) 프레임워크의 컴포넌트를 만들게 된다.&lt;/p&gt;
&lt;p&gt;JQuery plugin을 React로 랩핑하는 것은 &lt;a href=&quot;http://tech.oyster.com/using-react-and-jquery-together/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;아티클&lt;/a&gt;에 나온 것 처럼 의외로 간단하다.&lt;br&gt;하지만, DOM을 주무르듯이 계속 만져(?)주는 컴포넌트인 경우는 처음부터 상태기반으로 컴포넌트를 설계하지 않는 이상 React/Angular/Vue에 맞는 컴포넌트를 맞추는 것은 쉽지 않다.&lt;br&gt;생각 같아서는 native한 코드를 작성해서 사용하고,&lt;br&gt;이를 각 프레임워크 스타일로 랩핑만 하면 간단히 될거라고 생각했는데 만들고 보니 꽤나 부자연스러웠다.&lt;/p&gt;
&lt;p&gt;내가 주로 만들고 있는 것들이 UI 컴포넌트인데 복잡한 UI 컴포넌트는 사실 프레임워크와 엮는게 쉽지 않다.&lt;br&gt;지금 작업하고 있는게 &lt;a href=&quot;https://github.com/naver/egjs-infinitegrid&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;InfiniteGrid&lt;/a&gt;라는 컴포넌트이다.&lt;br&gt;이 컴포넌트는 꽤나 빈번하게 DOM을 조작하고 내부적으로 상태를 관리하고 있기 때문에 더욱 그러한 것 같다.&lt;br&gt;이것과 관련해서 했던 &lt;code&gt;삽질&lt;/code&gt;과 약간의 &lt;code&gt;꽁수&lt;/code&gt;를 찾게 되어 몇자 끄적여 본다.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>기존에 작성한 또는 DOM 기반으로 작성한 코드를 React나 Angular, Vue와 같은 프레임워크에서 사용하고 싶은 경우가 많다.<br>물론, <code>기존 코드의 내용은 하나도 안고치고 사용하고자 한다.</code><br>그래서 일반적으로 기존 코드를 사용하는(랩핑) 프레임워크의 컴포넌트를 만들게 된다.</p><p>JQuery plugin을 React로 랩핑하는 것은 <a href="http://tech.oyster.com/using-react-and-jquery-together/" rel="external nofollow noopener noreferrer" target="_blank">아티클</a>에 나온 것 처럼 의외로 간단하다.<br>하지만, DOM을 주무르듯이 계속 만져(?)주는 컴포넌트인 경우는 처음부터 상태기반으로 컴포넌트를 설계하지 않는 이상 React/Angular/Vue에 맞는 컴포넌트를 맞추는 것은 쉽지 않다.<br>생각 같아서는 native한 코드를 작성해서 사용하고,<br>이를 각 프레임워크 스타일로 랩핑만 하면 간단히 될거라고 생각했는데 만들고 보니 꽤나 부자연스러웠다.</p><p>내가 주로 만들고 있는 것들이 UI 컴포넌트인데 복잡한 UI 컴포넌트는 사실 프레임워크와 엮는게 쉽지 않다.<br>지금 작업하고 있는게 <a href="https://github.com/naver/egjs-infinitegrid" rel="external nofollow noopener noreferrer" target="_blank">InfiniteGrid</a>라는 컴포넌트이다.<br>이 컴포넌트는 꽤나 빈번하게 DOM을 조작하고 내부적으로 상태를 관리하고 있기 때문에 더욱 그러한 것 같다.<br>이것과 관련해서 했던 <code>삽질</code>과 약간의 <code>꽁수</code>를 찾게 되어 몇자 끄적여 본다.</p><a id="more"></a><h2 id="InfiniteGrid"><a href="#InfiniteGrid" class="headerlink" title="InfiniteGrid"></a>InfiniteGrid</h2><p>사용자가 스크롤을 계속 할수록 컨텐츠는 무한으로 추가되고,<br>DOM의 개수는 화면사이즈에 맞게 동적으로 DOM을 제거하는 모듈이다.<br>한 마디로 <code>DOM 밑장 빼기</code> 기술이다. 이론은 간단하지만, 실제로는 고민할 거리가 꽤 많다.<br>더군다나 InfiniteGrid는 카드를 다양한 형태로 배치가 가능하니 더 복잡하다.<br>하지만 이 글은 이에 대한 내용이 아니니 과감히 생략하고 본론으로 이야기해보자.</p><p>이 컴포넌트의 형태는 다음과 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 특정 엘리먼트 기준으로 인스턴스를 생성한다.</span></span><br><span class="line"><span class="keyword">const</span> infinite = <span class="keyword">new</span> InfinieGrid(element, options);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 이벤트를 통해 특정 시점을 전달받는다.</span></span><br><span class="line">infinite.on(<span class="string">"append"</span>, () =&gt; &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 메소드를 통해 제어한다.</span></span><br><span class="line">infinite.setLayout(GridLayout, options);</span><br><span class="line">infinite.append(items);</span><br></pre></td></tr></table></figure><blockquote><p>메소드를 통해 인스턴스에 데이터를 전달하거나 얻고, 이벤트를 통해 시점을 전달받는다.<br>인스턴스를 생성할 때는 옵션을 받아 제어할 정보를 전달받는다.</p></blockquote><p>React는 상위컴포넌트에서 하위컴포넌트로 데이터를 prop를 통해 단방향으로 전달하기 때문에 다음과 같이 간단한 형태의 React Component를 만들 수 있다.</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;InfiniteGrid</span><br><span class="line">  layout=&#123;&#123; <span class="attr">class</span>: GridLayout, <span class="attr">options</span>: &#123; <span class="attr">margin</span>: <span class="number">10</span> &#125; &#125;&#125;</span><br><span class="line">  options=&#123;&#123; <span class="attr">isOverflowScroll</span>: <span class="literal">true</span> &#125;&#125;</span><br><span class="line">  onAppend=&#123;<span class="keyword">this</span>.onAppend.bind(<span class="keyword">this</span>)&#125;</span><br><span class="line">  append=&#123;<span class="keyword">this</span>.state.items&#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure><p>옵션(options)과 메소드(append), 이벤트(OnAppend) 모두 prop로 전달해주면 된다.<br>이벤트는 핸들러에서 <code>setState</code>를 이용하여 상태를 다시 상위로 전파 시키면 양방향으로 데이터 전달이 가능하다.</p><p>하지만 문제는 React는 prop가 변경되거나 내부 state가 변경되면 <code>다시 그린다(물론 비교는 한다)</code>는 것이다.<br>애써 DOM을 순환형태로 구성하면 다시 그려버리는 것이다. ㅠㅠ</p><h3 id="첫번째-꽁수-React-DOM-처리는-내가할께"><a href="#첫번째-꽁수-React-DOM-처리는-내가할께" class="headerlink" title="첫번째 꽁수! React. DOM 처리는 내가할께."></a>첫번째 꽁수! React. DOM 처리는 내가할께.</h3><p>React 컴포넌트는 라이프 사이클이 있어서 초기에 render 함수가 호출 된 이후, prop나 state가 변경되면 shouldComponentUpdate가 발생하고 그 반환값이 <code>true</code>이면 render를 호출한다.</p><img src="/blog/2017/11/21/wrappingReact/react-lifecycle.png"><p>이렇게 DOM을 React Component가 아닌 내부(egjs의 infiniteGrid)에서 다룬다면, shouldComponentUpdate의 반환값을 <code>false</code>로 바꾸면 초기 로딩 이후 render를 호출하지 않는다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shouldComponentUpdate() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>React는 껍데기일뿐 DOM을 그리는 것은 infiniteGrid가 직접 그리게 된다.<br>으하하하~!</p><h3 id="두번째-꽁수-React-컴포넌트도-마크업으로-뿅"><a href="#두번째-꽁수-React-컴포넌트도-마크업으로-뿅" class="headerlink" title="두번째 꽁수! React 컴포넌트도 마크업으로 뿅!"></a>두번째 꽁수! React 컴포넌트도 마크업으로 뿅!</h3><p>native로 작성한 infiniteGrid 코드에서는 append나 prepend를 이용하여 <code>HTML string</code>이나 <code>HTMLElement 배열</code>, 또는 <code>jQuery 인스턴스</code>를 데이터로 받는다.<br><a href="https://naver.github.io/egjs-infinitegrid/release/latest/doc/eg.InfiniteGrid.html#append" rel="external nofollow noopener noreferrer" target="_blank">https://naver.github.io/egjs-infinitegrid/release/latest/doc/eg.InfiniteGrid.html#append</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">infnite.append([<span class="string">"&lt;div&gt;아이템1&lt;/div&gt;"</span>, <span class="string">"&lt;div&gt;아이템2&lt;/div&gt;"</span>]);</span><br></pre></td></tr></table></figure><p>하지만, React에서는 가급적이면 React 컴포넌트를 아이템으로 받고자 한다.<br>React 컴포넌트를 아이템으로 사용하기 위해서는 내부 코드를 바꾸고 React 컴포넌트 여부를 파악 후에 별도로 render를 부르고, 어쩌고 저쩌고 하면…된다.</p><h4 id="그런데-기존-코드를-건드리지-않고-할-수-있는-방법이-있을까"><a href="#그런데-기존-코드를-건드리지-않고-할-수-있는-방법이-있을까" class="headerlink" title="그런데 기존 코드를 건드리지 않고 할 수 있는 방법이 있을까?"></a>그런데 기존 코드를 건드리지 않고 할 수 있는 방법이 있을까?</h4><p>여기서 찾은 두번째 꽁수는 React 컴포넌트를 받아서 <code>string 배열</code>로 만드는 방법이다.<br>가장 쉬운 방법은 <a href="https://reactjs.org/docs/react-dom-server.html#rendertostaticmarkup" rel="external nofollow noopener noreferrer" target="_blank">ReactDOMServer.renderToStaticMarkup</a>를 이용하여 React 컴포넌트를 string 형태로 만들 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stringInArray = items.map(<span class="function"><span class="params">v</span> =&gt;</span> ReactDOMServer.renderToStaticMarkup(v));</span><br></pre></td></tr></table></figure><p>야호! 이제 React 컴포넌트도 사용할수 있게 되었다.</p><h3 id="랩핑의-한계"><a href="#랩핑의-한계" class="headerlink" title="랩핑의 한계"></a>랩핑의 한계</h3><h4 id="껍데기만-React-컴포넌트인-아이템들"><a href="#껍데기만-React-컴포넌트인-아이템들" class="headerlink" title="껍데기만 React 컴포넌트인 아이템들"></a>껍데기만 React 컴포넌트인 아이템들</h4><p>하지만. 이렇게 만들면 문제는 <code>ReactDOMServer.renderToStaticMarkup</code> 함수에 의해 변경된 React 컴포넌트는 string으로만 변경되기 때문에 해당 React 컴포넌트에서 처리한 이벤트 핸들러 같은 것은 사라져 버린다. ㅠㅠ<br>실무에서는 아이템 상위 요소인 InfiniteGrid에 click 이벤트를 delegate해서 처리하긴 했지만…<br>꽤나 찝찝하다. 쩝쩝.</p><h4 id="내부에서-상태관리를-하는-경우라면…-뭐…-방법이-없네"><a href="#내부에서-상태관리를-하는-경우라면…-뭐…-방법이-없네" class="headerlink" title="내부에서 상태관리를 하는 경우라면… 뭐… 방법이 없네."></a>내부에서 상태관리를 하는 경우라면… 뭐… 방법이 없네.</h4><p>앞에서 DOM 관리를 native infiniteGrid에서 하기 위해서는 shouldComponentUpdate로 render를 제어 할수 있다.<br>하지만, <code>내부에서 상태관리를 하는 경우에 대해서는 마땅한 방법이 없다.</code><br>native infiniteGrid도 내부에서 자체적으로 2개의 상태를 관리한다. 실제 리스트의 내용과 화면에 보여지는 일정한 개수의 리스트를 가지고 있다. 이를 고치려면 근본적으로 infiniteGrid의 상태를 외부에서 주입하는 방식으로 변경해야만 한다.<br>infiniteGrid와 같이 append, prepend와 같은 메소드가 아니라 항상 상태에 따라 데이터가 변경될 수 있도록 변경해야한다.<br>그렇지 않는다면, 궁극적으로 상태는 React로 랩핑한 컴포넌트와 랩핑된 native 컴포넌트 둘 다 가지고 있게 될 뿐만아니라 상태 변경 상태에 대한 별도의 sync 작업도 해주어야한다.</p><p>만약 상태값을 전달하지 않고 append/prepnd와 같은 메소드의 인자로 데이터를 전달하는 방식으로 개발을 한다면 <code>외부에서 변경여부에 따라 변경된 부분(추가할거나 삭제할것)을 구분해서 랩핑한 react 컴포넌트에 전달해야만 한다.</code><br>react스럽지 않은 부자연스러움이 아주 많~이 느껴진다 ㅠㅠ</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">componentWillReceiveProps(&#123;append&#125;) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="comment">// 랩핑된 컴포넌트의 append prop로 변경될(추가될) 아이템만을 넘겨주어야한다.</span></span><br><span class="line">  <span class="keyword">const</span> elements = append.map(<span class="function"><span class="params">v</span> =&gt;</span> ReactDOMServer.renderToStaticMarkup(v));</span><br><span class="line">  <span class="keyword">this</span>._instance.append(elements);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><p>이 글을 쓴 진짜 이유는 나같은 사람이 발생하지 않길 바라는 의미이다.<br>기존의 DOM 제어 방식의 개발을 단순히 스타일만 바꾼다고 각 프레임워크에 맞는 컴포넌트가 되지는 않는다.<br>간단한 기능이라면 위에서 언급한 <code>꽁수</code> 들로 랩핑만으로 충분하겠지만.<br>꽁수는 꽁수일뿐. 해결책은 아니다.</p><h4 id="내부적으로-상태를-관리하는-native-컴포넌트라면-랩핑보다는-state에-적합한-구조로-재개발을-하는게-장기적으로-더-좋은-결과를-얻을수-있을것-같다"><a href="#내부적으로-상태를-관리하는-native-컴포넌트라면-랩핑보다는-state에-적합한-구조로-재개발을-하는게-장기적으로-더-좋은-결과를-얻을수-있을것-같다" class="headerlink" title="내부적으로 상태를 관리하는 native 컴포넌트라면 랩핑보다는 state에 적합한 구조로 재개발을 하는게 장기적으로 더 좋은 결과를 얻을수 있을것 같다."></a>내부적으로 상태를 관리하는 native 컴포넌트라면 랩핑보다는 state에 적합한 구조로 재개발을 하는게 장기적으로 더 좋은 결과를 얻을수 있을것 같다.</h4><blockquote><p>참고: 개인적으로는 Angular를 기반으로 이야기하고 싶지만, 현실은 React를 더 많이 사용하기에 React를 만들게 되었다. 내가 React를 만들면서 이런 고민을 하게 될 줄이야. ㅜㅜ</p><p>사실 React나 Angular나 Vue나 기능적인 면에서는 다 거기서 거기다. (사실 vue는 잘모름)<br>모두 <code>상태 기반</code>을 지향하기 때문에 만들어가는 방식도 유사하고 데이터 흐름제어도 유사하다.<br>따라서 이 글에서는 React를 기준으로 이야기했지만 다른 프레임워크의 랩핑 컴포넌트를 만들때도 비슷한 고민을 하게된다. 또한 처리 방식도 비슷하다.</p></blockquote>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/11/21/wrappingReact/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RxJS 써야겠어요? 안써야겠어요?</title>
      <link>http://sculove.github.io/blog/2017/10/21/shoulduserxjs/</link>
      <guid>http://sculove.github.io/blog/2017/10/21/shoulduserxjs/</guid>
      <pubDate>Sat, 21 Oct 2017 09:17:07 GMT</pubDate>
      <description>
      
        &lt;img src=&quot;/blog/2017/10/21/shoulduserxjs/express.jpg&quot;&gt;

&lt;p&gt;RxJS는 일관된 방식으로 안전하게 데이터 흐름을 처리하는 라이브러리입니다.&lt;br&gt;이 발표는 RxJS가 본질적으로 의미하는 바를 살펴봅니다.&lt;br&gt;더불어 개발자로서 RxJS를 써야할지 안써야할지도 함께 살펴봅니다.&lt;/p&gt;
&lt;h4 id=&quot;발표-자료&quot;&gt;&lt;a href=&quot;#발표-자료&quot; class=&quot;headerlink&quot; title=&quot;발표 자료&quot;&gt;&lt;/a&gt;발표 자료&lt;/h4&gt;&lt;iframe src=&quot;https://sculove.github.io/slides/rxjs/&quot; width=&quot;100%&quot; height=&quot;500px&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;자료 : &lt;a href=&quot;https://sculove.github.io/slides/rxjs/&quot;&gt;https://sculove.github.io/slides/rxjs/&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2017/10/21/shoulduserxjs/express.jpg"><p>RxJS는 일관된 방식으로 안전하게 데이터 흐름을 처리하는 라이브러리입니다.<br>이 발표는 RxJS가 본질적으로 의미하는 바를 살펴봅니다.<br>더불어 개발자로서 RxJS를 써야할지 안써야할지도 함께 살펴봅니다.</p><h4 id="발표-자료"><a href="#발표-자료" class="headerlink" title="발표 자료"></a>발표 자료</h4><iframe src="https://sculove.github.io/slides/rxjs/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe><p>자료 : <a href="https://sculove.github.io/slides/rxjs/">https://sculove.github.io/slides/rxjs/</a></p><a id="more"></a><h4 id="동영상"><a href="#동영상" class="headerlink" title="동영상"></a>동영상</h4><div class="video-container"><iframe src="//www.youtube.com/embed/2f09-veX4HA" frameborder="0" allowfullscreen></iframe></div><h4 id="발표한-행사-정보"><a href="#발표한-행사-정보" class="headerlink" title="발표한 행사 정보"></a>발표한 행사 정보</h4><p>[2017.10.21] FEConf 2017 <a href="https://2017.feconf.kr/" rel="external nofollow noopener noreferrer" target="_blank">https://2017.feconf.kr/</a></p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/10/21/shoulduserxjs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RxJS란 무엇인가?</title>
      <link>http://sculove.github.io/blog/2017/10/07/rxjsbook4/</link>
      <guid>http://sculove.github.io/blog/2017/10/07/rxjsbook4/</guid>
      <pubDate>Sat, 07 Oct 2017 06:09:27 GMT</pubDate>
      <description>
      
        &lt;p&gt;오늘 소개할 부분은 작성 중인 책 2부의 개론에 해당하는 내용이다.&lt;br&gt;이 장을 통해 &lt;code&gt;RxJS의 개발과정의 큰 그림&lt;/code&gt;을 다시한번 살펴보기 바란다&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;1부에서는 RxJS의 본질을 알아가기 위해 RxJS가 고민했던 문제들을 살펴보았다. 2부에서부터는 RxJS 라이브러리에 대해 자세히 알아보자. 이 장을 통해서는 RxJS로 간단한 소스를 구현해보면서 RxJS의 사용법을 익혀보도록 하자.&lt;/p&gt;
&lt;h2 id=&quot;RxJS&quot;&gt;&lt;a href=&quot;#RxJS&quot; class=&quot;headerlink&quot; title=&quot;RxJS&quot;&gt;&lt;/a&gt;RxJS&lt;/h2&gt;&lt;p&gt;RxJS의 공식 사이트에서는 RxJS에 대해 다음과 같이 정의하고 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RxJS is a library for composing asynchronous and event-based programs by using observable sequences.&lt;br&gt;RxJS는 Observable를 사용하여 비동기 및 이벤트 기반 프로그램을 작성하기 위한 라이브러리이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1부에서 필자가 정의한 &lt;code&gt;범용적인 데이터 플로우 솔루션&lt;/code&gt;을 지향하는 라이브러리의 국소적인 표현이라고 할수 있다. 특이한 것은 공식 홈페이지에는 RxJS에 대해 &lt;code&gt;이벤트용 lodash 정도라고 생각해라&lt;/code&gt;라는 말도 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Think of RxJS as Lodash for events.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;앞의 용어가 RxJS의 철학에 대한 정의라면, 뒤의 정의는 실제 사용에 대한 정의라고 볼수 있다.&lt;br&gt;RxJS가 어렵다면 지금은 그냥 &lt;code&gt;비동기 Array/Collection 데이터&lt;/code&gt;를 다루는 라이브러리 정도로 생각하고 접근해보자.&lt;/p&gt;
      
      </description>
      
      <content:encoded><![CDATA[<p>오늘 소개할 부분은 작성 중인 책 2부의 개론에 해당하는 내용이다.<br>이 장을 통해 <code>RxJS의 개발과정의 큰 그림</code>을 다시한번 살펴보기 바란다</p><hr><p>1부에서는 RxJS의 본질을 알아가기 위해 RxJS가 고민했던 문제들을 살펴보았다. 2부에서부터는 RxJS 라이브러리에 대해 자세히 알아보자. 이 장을 통해서는 RxJS로 간단한 소스를 구현해보면서 RxJS의 사용법을 익혀보도록 하자.</p><h2 id="RxJS"><a href="#RxJS" class="headerlink" title="RxJS"></a>RxJS</h2><p>RxJS의 공식 사이트에서는 RxJS에 대해 다음과 같이 정의하고 있다.</p><blockquote><p>RxJS is a library for composing asynchronous and event-based programs by using observable sequences.<br>RxJS는 Observable를 사용하여 비동기 및 이벤트 기반 프로그램을 작성하기 위한 라이브러리이다.</p></blockquote><p>1부에서 필자가 정의한 <code>범용적인 데이터 플로우 솔루션</code>을 지향하는 라이브러리의 국소적인 표현이라고 할수 있다. 특이한 것은 공식 홈페이지에는 RxJS에 대해 <code>이벤트용 lodash 정도라고 생각해라</code>라는 말도 있다.</p><blockquote><p>Think of RxJS as Lodash for events.</p></blockquote><p>앞의 용어가 RxJS의 철학에 대한 정의라면, 뒤의 정의는 실제 사용에 대한 정의라고 볼수 있다.<br>RxJS가 어렵다면 지금은 그냥 <code>비동기 Array/Collection 데이터</code>를 다루는 라이브러리 정도로 생각하고 접근해보자.</p><a id="more"></a><h2 id="RxJS-시작하기"><a href="#RxJS-시작하기" class="headerlink" title="RxJS 시작하기"></a>RxJS 시작하기</h2><h3 id="RxJS-첫번째-예제"><a href="#RxJS-첫번째-예제" class="headerlink" title="RxJS 첫번째 예제"></a>RxJS 첫번째 예제</h3><p>RxJS로 간단한 예제를 만들어보자.<br>웹 개발시 가장 빈번히 이루어지는 이벤트를 처리하는 예제를 작성해보자.</p><p>페이지를 클릭했을 경우 event.currentTarget 정보를 콘솔로 찍어보도록 하자.</p><p>다음과 같이 간단히 작성할 수 있다.<br>이벤트 핸들러를 만들고, 그 핸들러를 <code>addEventListener</code>를 통해 등록하기만 하면 우리가 원하는 코드를 작성할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> eventHandler = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.currentTarget);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"click"</span>, eventHandler);</span><br></pre></td></tr></table></figure><p>이 코드와 동일한 기능을 RxJS로 작성해 보자.<br>RxJS에서는 이벤트를 Observable로 변환하는 <a href="http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#static-method-fromEvent" rel="external nofollow noopener noreferrer" target="_blank">fromEvent</a> 메소드를 제공한다.<br>Observable의 <code>subscribe</code> 메소드를 이용하면 Observer가 Observable을 구독할 수 있다.<br>즉, Observable에서 전달된 데이터를 Observer는 소비할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> click$ = Rx.Observable.fromEvent(<span class="built_in">document</span>, <span class="string">"click"</span>); <span class="comment">// observable</span></span><br><span class="line"><span class="keyword">const</span> observer = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(event.currentTarget);</span><br><span class="line">&#125;;</span><br><span class="line">click$.subscribe(observer);</span><br></pre></td></tr></table></figure><p>RxJS에서는 이벤트 핸들러를 만들었던 것과 같이 Observer를 만들고,<br>addEventListener를 통해 이벤트 핸들러를 등록하는 것과 같이 observer를 Observable에 구독(subscribe)하였다.<br>다른 것이 있다면 브라우저를 통해 전달되는 이벤트 정보를 Observable로 변환하는 작업을 추가적으로 하고 있다.</p><h3 id="RxJS-첫번째-예제-개선하기"><a href="#RxJS-첫번째-예제-개선하기" class="headerlink" title="RxJS 첫번째 예제 개선하기"></a>RxJS 첫번째 예제 개선하기</h3><p>앞에서 살펴본 예제를 살펴보면 실제 우리가 필요한 정보는 click이 아니라 click 될때의 currentTarget 정보이다.</p><p>Observable 인스턴스의 <a href="http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#instance-method-pluck" rel="external nofollow noopener noreferrer" target="_blank">pluck</a> 메소드를 이용하면 이 의도를 코드에 더욱 명확히 나타낼 수 있다.</p><blockquote><p>pluck은 사전적으로 “~을 뽑다” 라는 의미이다.<br>추출할 속성들을 “문자열”로 지정할수 있다. 이 함수의 반환값은 새로운 Observable 인스턴스 이다.<br><code>public pluck(properties: ...string): Observable</code></p></blockquote><p>다음 코드는 pluck 메소드를 이용하여 코드의 의도를 더욱 분명하게 변경한 예이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> currentTarget$ = Rx.Observable.fromEvent(<span class="built_in">document</span>, <span class="string">"click"</span>).pluck(</span><br><span class="line">  <span class="string">"currentTarget"</span></span><br><span class="line">); <span class="comment">// observable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="function"><span class="params">currentTarget</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(currentTarget);</span><br><span class="line">&#125;;</span><br><span class="line">currentTarget$.subscribe(observer);</span><br></pre></td></tr></table></figure><p>click이 발생하는 시점에 전달된 event 객체의 currentTarget을 전달하는 currentTarget$을 만들 수 있다.<br>Observer는 currentTarget을 구독함으로써 currentTarget 데이터를 전달받을 수 있다.</p><h3 id="RxJS-두번째-예제"><a href="#RxJS-두번째-예제" class="headerlink" title="RxJS 두번째 예제"></a>RxJS 두번째 예제</h3><p>앞의 예제가 비동기 방식을 RxJS로 구현한 것이라면 이번에는 동기적인 작업을 RxJS로 구현해보자.<br>간단한 예로 사용자 정보를 가지는 배열에서 “촉”나라 사람만 추출하여보자.</p><p>다음과 같이 작성할 수 있다.<br>array의 <code>filter</code> 메소드를 통해 원하는 사용자만을 추출할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users = [</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"유비"</span>,</span><br><span class="line">    birthYear: <span class="number">161</span>,</span><br><span class="line">    nationality: <span class="string">"촉"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"손권"</span>,</span><br><span class="line">    birthYear: <span class="number">182</span>,</span><br><span class="line">    nationality: <span class="string">"오"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"관우"</span>,</span><br><span class="line">    birthYear: <span class="number">160</span>,</span><br><span class="line">    nationality: <span class="string">"촉"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"장비"</span>,</span><br><span class="line">    birthYear: <span class="number">168</span>,</span><br><span class="line">    nationality: <span class="string">"촉"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"조조"</span>,</span><br><span class="line">    birthYear: <span class="number">155</span>,</span><br><span class="line">    nationality: <span class="string">"위"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"손권"</span>,</span><br><span class="line">    birthYear: <span class="number">182</span>,</span><br><span class="line">    nationality: <span class="string">"오"</span></span><br><span class="line">  &#125;</span><br><span class="line">].filter(<span class="function"><span class="params">user</span> =&gt;</span> user.nationality === <span class="string">"촉"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> log = <span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">console</span>.log(user);</span><br><span class="line">users.forEach(log);</span><br></pre></td></tr></table></figure><p>이 코드와 동일한 기능을 RxJS로 작성해 보자.<br>RxJS에서는 Array를 Observable로 변환하는 <a href="http://reactivex.io/rxjs/class/es6/Observable.js~Observable.html#static-method-from" rel="external nofollow noopener noreferrer" target="_blank">from</a> 메소드를 제공한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> users$ = Rx.Observable.from([</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"유비"</span>,</span><br><span class="line">    birthYear: <span class="number">161</span>,</span><br><span class="line">    nationality: <span class="string">"촉"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"손권"</span>,</span><br><span class="line">    birthYear: <span class="number">182</span>,</span><br><span class="line">    nationality: <span class="string">"오"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"관우"</span>,</span><br><span class="line">    birthYear: <span class="number">160</span>,</span><br><span class="line">    nationality: <span class="string">"촉"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"장비"</span>,</span><br><span class="line">    birthYear: <span class="number">168</span>,</span><br><span class="line">    nationality: <span class="string">"촉"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"조조"</span>,</span><br><span class="line">    birthYear: <span class="number">155</span>,</span><br><span class="line">    nationality: <span class="string">"위"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    name: <span class="string">"손권"</span>,</span><br><span class="line">    birthYear: <span class="number">182</span>,</span><br><span class="line">    nationality: <span class="string">"오"</span></span><br><span class="line">  &#125;</span><br><span class="line">]).filter(<span class="function"><span class="params">user</span> =&gt;</span> user.nationality === <span class="string">"촉"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observer = <span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">console</span>.log(user);</span><br><span class="line">users$.subscribe(observer);</span><br></pre></td></tr></table></figure><p>RxJS에서는 추출된 사용자를 콘솔에 출력하기 위해 log를 만든 것과 같이 Observer를 만들고,<br>forEach를 통해 log 함수를 호출하는 것과 같이 observer를 Observable에 구독(subscribe)하였다.<br>다른 것이 있다면 Array 객체를 Observable로 변환하는 작업을 추가적으로 하고 있다.</p><p>RxJS를 이용하면 데이터 소스(이벤트, 배열)를 Observable로 만들기만 하면 <code>비동기 방식도 동기 방식도 모두 동일한 행태로 개발</code>을 할수 있다.</p><h2 id="RxJS-4대-천왕"><a href="#RxJS-4대-천왕" class="headerlink" title="RxJS 4대 천왕"></a>RxJS 4대 천왕</h2><p>RxJS에서는 다루는 중요 개념은 다음과 같다.</p><ul><li>Observable</li><li>Operator</li><li>Observer</li><li>Subscription</li><li>Subject</li><li>Scheduler</li></ul><p>이 장에서는 이 중 항상 사용하게 되는 4개 개념인 Observable, Operator, Observer, Subscription에 대해 다루기로 하자.<br>나머지 Subject와 Scheduler는 뒷 장에서 다루도록 하겠다.</p><h3 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h3><p>시간을 축으로 연속적인 데이터를 저장하는 컬렉션을 표현한 객체이다. 데이터를 제공하는 소스나 Observabler과 연결되어 데이터를 제공한다. Operator와 함께 RxJS의 핵심 중의 핵심인 개념이다. 이를 stream이라고 부른다.</p><img src="/blog/2017/10/07/rxjsbook4/observable_detail.png" title="observable"><h3 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a>Operator</h3><p>Observable의 static 메소드나 인스턴스의 메소드로 Observable 객체를 반환하는 메소드를 Operator라고 한다. Operator는 현재의 Observable Instance를 기반으로 항상 새로운 Observable instance를 반환한다.<br>Operator는 Observable을 생성하기도 하고, 각각의 Observable을 연결하기도 한다. 또한, Observable을 분리하거나 합치기도 한다.<br>위 예제에서는 <code>Observable.fromEvent</code> operator를 이용하여 Observable을 생성하고 Observable 인스턴스의 <code>pluck</code> operator를 이용하여 데이터를 변경하였다.</p><img src="/blog/2017/10/07/rxjsbook4/operator_detail.png" title="operator"><h3 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h3><p>Observable에 의해 전달된 데이터를 소비하는 주체이다. Observer는 next, error, complete 함수를 가진 객체를 가리킨다. Observable에 의해 데이터가 전달될때는 next가 호출되고, 에러가 발생했을 때는 error 함수, 데이터 전달이 완료되었을 때는 complete함수가 호출되어진다.<br>Observer은 Observable과 subscribe 메소드를 통해 연결되어 진다.</p><blockquote><h4 id="Observable-subscribe-함수"><a href="#Observable-subscribe-함수" class="headerlink" title="Observable#subscribe 함수"></a>Observable#subscribe 함수</h4><p>subscribe는 Observer를 파라미터로 받는다.</p><h5 id="1-Observer-객체를-전달하는-subscribe-사용-예"><a href="#1-Observer-객체를-전달하는-subscribe-사용-예" class="headerlink" title="1. Observer 객체를 전달하는 subscribe 사용 예"></a>1. Observer 객체를 전달하는 subscribe 사용 예</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> observer = &#123;</span><br><span class="line">   next: <span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Observer가 Observable로부터 받은 데이터: "</span> + x),</span><br><span class="line">   error: <span class="function"><span class="params">err</span> =&gt;</span></span><br><span class="line">     <span class="built_in">console</span>.error(<span class="string">"Observer가 Observable로부터 받은 에러 데이터: "</span> + err),</span><br><span class="line">   complete: <span class="function"><span class="params">()</span> =&gt;</span></span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"Observer가 Observable로부터 종료 되었다는 알림을 받은 경우"</span>)</span><br><span class="line">&#125;;</span><br><span class="line">click$.subscribe(observer); <span class="comment">// observer 객체를 파라미터로 받는다.</span></span><br></pre></td></tr></table></figure></blockquote><blockquote><h5 id="2-next-콜백함수를-전달하는-subscribe-사용-예"><a href="#2-next-콜백함수를-전달하는-subscribe-사용-예" class="headerlink" title="2. next 콜백함수를 전달하는 subscribe 사용 예"></a>2. next 콜백함수를 전달하는 subscribe 사용 예</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// observer의 next 함수를 파라미터로 받는다.</span></span><br><span class="line">click$.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Observer가 Observable로부터 받은 데이터: "</span> + x));</span><br></pre></td></tr></table></figure></blockquote><blockquote><h5 id="3-next-error-complete-콜백함수를-전달하는-subscribe-사용-예"><a href="#3-next-error-complete-콜백함수를-전달하는-subscribe-사용-예" class="headerlink" title="3. next, error, complete 콜백함수를 전달하는 subscribe 사용 예"></a>3. next, error, complete 콜백함수를 전달하는 subscribe 사용 예</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// observer의 next, error, complete 함수를 파라미터로 받는다.</span></span><br><span class="line">  click$.subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Observer가 Observable로부터 받은 데이터: "</span> + x),</span><br><span class="line">    error: <span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.error(<span class="string">"Observer가 Observable로부터 받은 에러 데이터: "</span> + err),</span><br><span class="line">    complete: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">"Observer가 Observable로부터 종료 되었다는 알림을 받은 경우"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></blockquote><h3 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h3><p>Observable.subscribe의 반환값이다. Subscription 객체는 자원의 해제를 담당한다. 등록된 Observable의 데이터를 더이상 전달 받고 싶지 않을 경우 <code>unsubscribe</code> 메소드를 호출하여 자원을 해제한다.</p><img src="/blog/2017/10/07/rxjsbook4/subscription_detail.png" title="subscription"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> subscription = currentTarget$.subscribe(observer);</span><br><span class="line"></span><br><span class="line"><span class="comment">// subscription으로 자원 해제가 가능</span></span><br><span class="line">subscription.unsubscribe();</span><br></pre></td></tr></table></figure><h2 id="RxJS-개발-방법"><a href="#RxJS-개발-방법" class="headerlink" title="RxJS 개발 방법"></a>RxJS 개발 방법</h2><p>위에서 제시한 예제를 rxjs의 4개 개념으로 표현하면 다음과 같다.</p><img src="/blog/2017/10/07/rxjsbook4/rxjs-structure1.png" title="rxjs 4가지 개념"><p>이벤트를 Observable로 변환하고 Observable의 pluck, filter 메소드를 통해 데이터를 변경한다. 데이터를 처리할 Observer를 만들고, Observable의 subscribe 메소드를 통해 Observer를 구독한다.</p><p>RxJS를 사용하여 개발할 때의 프로세스는 대부분 다음과 같은 과정을 거친다.</p><ul><li>첫째. 데이터 소스를 Observable로 변경한다.</li><li>둘째. Observable의 operator를 통해 데이터를 변경하거나 추출한다.<br>또는 여러 개의 Observable을 하나의 Observable로 합치거나 하나의 Observable을 여러 개의 Observable로 만든다.</li><li>셋째. 원하는 데이터를 받아 처리하는 Observer를 만든다.</li><li>넷째. Observable의 subscribe를 통해 Observer를 등록한다.</li><li>다섯째. Observable 구독을 정지하고 자원을 해지한다.</li></ul><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>이번 장에서는 RxJS로 간단한 예제를 작성해 봄으로서 RxJS의 4가지 중요한 개념에 대해 살펴보았다. 더불어 RxJS개발 프로세스를 간단하게나마 살펴볼수 있었다.<br>다음 장에서는 실제로 Observable을 만드는 방법에 대해 살펴보기로 하자.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/10/07/rxjsbook4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Microsoft와의 인연</title>
      <link>http://sculove.github.io/blog/2017/10/07/Microsoft/</link>
      <guid>http://sculove.github.io/blog/2017/10/07/Microsoft/</guid>
      <pubDate>Sat, 07 Oct 2017 03:33:49 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;추석 고향가기전에 Microsoft로 부터 다음과 같은 메일을 받았다.&lt;/p&gt;
&lt;img src=&quot;/blog/2017/10/07/Microsoft/mail.png&quot;&gt;

&lt;p&gt;오~ 마이갓!&lt;br&gt;내가 &lt;code&gt;Microsoft MVP (Most V
        
      
      </description>
      
      <content:encoded><![CDATA[<p>추석 고향가기전에 Microsoft로 부터 다음과 같은 메일을 받았다.</p><img src="/blog/2017/10/07/Microsoft/mail.png"><p>오~ 마이갓!<br>내가 <code>Microsoft MVP (Most Valuable Professional)</code>라니…<br>사실 MS는 내 삶에 많은 영향을 끼친 기업이 었다.</p><p>어렸을때 프로그래머가 되고 싶어했던 이유도 <code>빌게이츠</code> 때문이었다. 빌게이츠가 대단한 프로그래머 일거라는 잘못된 생각(빌게이츠는 프로그래머이기도 하지만 그보다는 위대한 사업가…)으로 난 이 길을 택했다.</p><h4 id="프로그래머"><a href="#프로그래머" class="headerlink" title="프로그래머"></a>프로그래머</h4><p>그때는 그냥 막연히 프로그래머가 되고 싶었던 것 같다.<br>학교 공부도 ‘대학가면 프로그래밍 공부할 수 있겠지’ 라는 생각으로 했던 것 같다.<br>물론, 코딩한다고 DOS책도 사서보고 C/C++ 프로그래밍 책도 사서 혼자 보기도 했지만 직접 완성도 있는 프로그램을 만든적은 없었던것 같다.<br>지금이라면 주의에 커뮤니티도 많고, 경진 대회도 있고, 정보도 많아서 배우려는 의지만 있으면 뭔가를 해볼수 있는 시기이지만, 그때 당시 내 주의에는 프로그래머란 직업도 없었을 뿐더러 주변에 컴퓨터도 거의 없을때 였다.<br>그래서 어떻게 해야 프로그래머가 되어야하는지 막막할 때였다.<br>주변의 누군가라도 한명 있었다면 더 좋은 경험을 했을수도 있었을 텐데라는 아쉬움이 들기도한다.<br>또는 내가 지방이 아닌 수도권에서라도 살고 있었다면 지금의 모습보다 더 나은 모습으로 살아가지 않을까 하는 생각도 든다.</p><h4 id="MS빠"><a href="#MS빠" class="headerlink" title="MS빠"></a>MS빠</h4><p>암튼, 대학에와서 그 좋아하는 프로그래밍을 하게되면서 개인적으로는 정말 즐거웠던 것 같다.<br>코딩하는 것도 잼있고 더불어 성적도 잘나오고, 뭔가를 알아간다는 즐거움도 함께 느꼈던 시기였던것 같다.<br>그때 당시 나는 MFC를 배우고 Visual Studio를 쓰면서 앞으로는 C#이 주요 언어가 될것 이라며 혼자 C# 공부를 하고 다니기도 하였다.<br>물론, 졸업 전까지도 MS는 내 동경의 대상이었고 내 기술 스텍의 주요 영역이기도 하였다.<br>한마디로 그 당시에는 <code>난 MS빠</code>였다.</p><h4 id="Bye-Microsoft"><a href="#Bye-Microsoft" class="headerlink" title="Bye~ Microsoft"></a>Bye~ Microsoft</h4><p>하지만, 직장에 가서 본 현실은 너무 달랐다.<br>직장에서 C, C++, MFC는 장비업체를 제외하고는 대다수 Java 기반의 웹 플랫폼 사업을 하고 있었다. MS가 제공하는 제품은 Window와 오피스를 제외하고는 어느것 하나 없었다. MS의 제품은 돈많은 기업이나 MS와 이해관계가 있는 회사에서만 쓰는 것들이었다.<br>사실 이때부터 MS에 대한 관심은 내 삶에서 점점 멀어져갔던 것 같다.<br>오히려 훌륭한 오픈소스에 더 관심이 많이 갔고, MS보다는 Apple. Apple 보다는 구글에 더 많은 관심이 갔다.<br>이렇게 내 삶에서 MS가 잊혀져 갔다.</p><h4 id="Meet-Again"><a href="#Meet-Again" class="headerlink" title="Meet Again!"></a>Meet Again!</h4><p>최근 들어 구글의 Angular를 관심을 갖게되면서부터 그동안 잊혀졌던 MS가 내 삶에 조금씩 스며들어 왔다.<br>VSCode를 사용하게 되고, Angular를 쓰면서 Typescript와 RxJS를 사용하게 됨으로써 나도 모르게 MS와 다시 연을 맺게 되었다.</p><p>사실 MS 제품중 가장 좋은 것 중에 하나가 바로 Visual Studio 인것 같다. 훌륭한 code assist부터 디버깅툴까지 정말 갑 오프 갑인 툴이다.<br>이 툴이 있기에 한때 MS빠가 되기도 했었다.<br>사실 내가 Front End로 기술영역을 바꾼 이후로 이런 IDE에 대한 아쉬움이 있었다.<br>하지만. <code>Javascript의 맛은 자유로움이라고 했던가?</code><br>그냥 가벼운 편집기만 있어도 충분히 개발을 할수 있었을 뿐만아니라 Chrome DevTool 자체가 워낙에 좋기 때문에 부족함이 없었다.</p><p>다만 편집기가 좀 있으면 좋겠다는 생각으로 가벼운 <a href="https://www.sublimetext.com/" rel="external nofollow noopener noreferrer" target="_blank">SublimeText</a>를 사용하고 있었다.<br>그런데 작업하는 workspace가 커지면서 점점 느려지는 편집기를 보면서 IDE를 갈아타기로 마음을 먹었다.<br>그때 다시 내 눈에 들어 온게 <a href="https://code.visualstudio.com/" rel="external nofollow noopener noreferrer" target="_blank">VSCode</a>였다.  </p><p>VSCode는 오픈소스 V8 기반의 편집기로서 MS가 가지고 있는 Visual Stuido를 연상하게 만들 정도로 잘 만들어진 IDE 툴이었다. 지금은 나의 IDE 툴로 잘 쓰고 있다.<br>지금쓰고 있는 이 글도 VSCode로 마크다운 문서를 만들어 쓰고 있는 것이다.<br>참 좋다!</p><h4 id="Microsoft-MVP"><a href="#Microsoft-MVP" class="headerlink" title="Microsoft MVP"></a>Microsoft MVP</h4><p>지인의 우연한 소개로 신청서를 적었다. 사실 크게 관심도 없어서 잊고 지냈었는데 <a href="https://mvp.microsoft.com/en-us/PublicProfile/5002818" rel="external nofollow noopener noreferrer" target="_blank">MVP</a>가 되었다.</p><p>막상 되고보니 뭔가 해야할 것 같은 책임감이 든다.<br>VSCode Extention이라도 만들어야하는 기분이다.</p><p>그래서 MVP 사이트에서 한국에있는 MVP분들을 한번 찾아봤다.<br><a href="https://mvp.microsoft.com/en-us/MvpSearch?lo=Korea" rel="external nofollow noopener noreferrer" target="_blank">https://mvp.microsoft.com/en-us/MvpSearch?lo=Korea</a></p><p>모두 71명의 MVP중 나처럼 개발자 MVP분이 총 21명 검색되었다.<br>MS책도 내고, 커뮤니티도 하시고, 개발도 하시는 등 굉장한 분들이 등록 되어있었다.<br>난 VSCode를 쓰고, Typescript를 사용하고, RxJS에 대한 책을 쓰고 있지만… 사실 MS와 직접적으로 관련이 있는 일을 내가 한 것은 없다.  </p><p>지금부터라도 좀더 적극적으로 관심을 가지고 MS 제품군들을 써봐야겠다.<br>MVP기간 중에 부족한 부분이 있으면 컨트리뷰트도하고, 의견도 내놓아야겠다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/10/07/Microsoft/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RxJS가 해결하려고했던 문제3 - 로직 처리의 오류</title>
      <link>http://sculove.github.io/blog/2017/07/26/rxjsbook3/</link>
      <guid>http://sculove.github.io/blog/2017/07/26/rxjsbook3/</guid>
      <pubDate>Tue, 25 Jul 2017 16:55:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;오늘 소개할 부분은&lt;br&gt;웹어플리케이션 개발시 발생할 수 있는 &lt;code&gt;로직 오류에 대한 문제&lt;/code&gt;를 RxJS는 어떻게 접근했는지에 대한 이야기이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id=&quot;웹어플리케이션의-로직&quot;&gt;&lt;a href=&quot;#웹어플리케이션의
        
      
      </description>
      
      <content:encoded><![CDATA[<p>오늘 소개할 부분은<br>웹어플리케이션 개발시 발생할 수 있는 <code>로직 오류에 대한 문제</code>를 RxJS는 어떻게 접근했는지에 대한 이야기이다.</p><hr><h3 id="웹어플리케이션의-로직"><a href="#웹어플리케이션의-로직" class="headerlink" title="웹어플리케이션의 로직"></a>웹어플리케이션의 로직</h3><p>웹어플리케이션은 로직에 근거하여 전달받은 입력값을 이용하여 새로운 결과를 반환하거나 표현한다.<br>여기서 로직은 산술적인 로직이 될 수 있고 비즈니스적인 로직이 될수 있다. 또는 if문과 같이 간단한 프로그램의 흐름을 담당하는 부분일 수도 있다.</p><p>화면에 사용자 정보를 표현하는 UI 작성하는 예를 생각해보자. (예제에서 사용하는 API는 스타워즈 등장인물을 조회한다)<br>DB로부터 조회한 사용자 목록 데이터가 입력값이라면 이 값을 바탕으로 우리는 다양한 처리를 한다.</p><ul><li>성별이 “남”과 “여”인 사용자만 추출한다 (스타워즈 등장인물은 로봇과 같이 성별이 없는 사용자도 있다)</li><li>사용자의 이름, 키, 몸무게를 표시한다.</li><li>사용자의 성별에 맞게 아이콘을 화면에 표시한다.</li><li>사용자의 표준 체중을 계산하여 표시한다.<blockquote><p>BROCA 방식</p><ul><li>남자 표준체중 = (키 - 100) × 0.9</li><li>여자 표준체중 = (키 - 105) × 0.9</li></ul><p>BMI 방식</p><ul><li>남자 표준체중 = 키/100 _ 키/100 _ 22</li><li>여자 표준체중 = 키/100 _ 키/100 _ 21</li></ul></blockquote></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> jsonData = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"users"</span>).innerHTML = process(jsonData);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, <span class="string">"http://swapi.co/api/people/"</span>);</span><br><span class="line">xhr.send();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 데이터를 처리하는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">people</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> html = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> user <span class="keyword">of</span> people.results) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/male|female/</span>.test(user.gender)) &#123;</span><br><span class="line">      <span class="keyword">let</span> broca;</span><br><span class="line">      <span class="keyword">let</span> bmi;</span><br><span class="line">      <span class="keyword">if</span> (user.gender == <span class="string">"male"</span>) &#123;</span><br><span class="line">        broca = (user.height - <span class="number">100</span> * <span class="number">0.9</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">        bmi = ((((user.height / <span class="number">100</span>) * user.height) / <span class="number">100</span>) * <span class="number">22</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        broca = (user.height - <span class="number">100</span> * <span class="number">0.9</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">        bmi = ((((user.height / <span class="number">100</span>) * user.height) / <span class="number">100</span>) * <span class="number">21</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> obesityUsingBroca = (((user.mass - broca) / broca) * <span class="number">100</span>).toFixed(</span><br><span class="line">        <span class="number">2</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">const</span> obesityUsingBmi = (((user.mass - bmi) / bmi) * <span class="number">100</span>).toFixed(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">      html.push(<span class="string">`&lt;li class='card'&gt;</span></span><br><span class="line"><span class="string">  &lt;dl&gt;</span></span><br><span class="line"><span class="string">      &lt;dt&gt;<span class="subst">$&#123;user.name&#125;</span> &lt;i class="fa fa-<span class="subst">$&#123;user.gender&#125;</span>"&gt;&lt;/i&gt;&lt;/dt&gt;</span></span><br><span class="line"><span class="string">      &lt;dd&gt;&lt;span&gt;키 : &lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;user.height&#125;</span> cm&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">      &lt;dd&gt;&lt;span&gt;몸무게: &lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;user.mass&#125;</span> kg&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">      &lt;dd&gt;&lt;span&gt;BROCA 표준체중 : &lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;broca&#125;</span> kg&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">      &lt;dd&gt;&lt;span&gt;BROCA 비만도 : <span class="subst">$&#123;obesityUsingBroca&#125;</span>&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">      &lt;dd&gt;&lt;span&gt;BMI 표준체중 : &lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;bmi&#125;</span> kg&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">      &lt;dd&gt;&lt;span&gt;BMI 비만도 : <span class="subst">$&#123;obesityUsingBmi&#125;</span>&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">  &lt;/dl&gt;</span></span><br><span class="line"><span class="string">      &lt;/li&gt;`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> html.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/blog/2017/07/26/rxjsbook3/userscreenshot.png"><p>원래 조회했던 데이터는 온데 간데 없고 그 데이터로부터 생산된 새로운 정보들을 사용하고 있다.<br>위 예제는 사용자 체중과 키를 이용하여 성별에 따라 비만도 값을 계산하고 성별 아이콘을 화면에 표시한다.</p><p>우리는 알게 모르게 데이터를 추출하고 변환하는 작업을 빈번하게 하고 있다.<br>복수 데이터를 처리하기 위해서는 반복문을 사용하고, 상황에 따라 데이터를 추출하거나 접근하기 위해서 분기문을 사용한다.<br>또한, 상황을 기억하거나 추출된 정보를 임시로 기억하기 위해서 변수를 사용한다.</p><h3 id="로직의-복잡성-그리고-오류"><a href="#로직의-복잡성-그리고-오류" class="headerlink" title="로직의 복잡성 그리고 오류"></a>로직의 복잡성 그리고 오류</h3><p>반복문과 분기문 그리고 변수는 우리 코드를 복잡하게 만든다. 반복문은 우리 코드의 가독성을 떨어뜨리고 분기문은 우리가 확인해야할 프로그램의 흐름을 여러 개로 만든다. 더군다나 우리가 기억해 놓은 변수의 값은 누군가에 의해 변경될 수 있다. 변수의 값이 변하면 우리가 의도했던대로 흐름으로 프로그램이 동작하지 않을 수 있다.<br>이렇게 반복문과 분기문 그리고 변수는 우리 코드의 복잡도를 높이고 가독성을 떨어뜨리고, 결국에는 오류의 발생 빈도를 높인다.</p><h4 id="반복문과-분기문"><a href="#반복문과-분기문" class="headerlink" title="반복문과 분기문"></a>반복문과 분기문</h4><p>로직의 복잡성을 줄이는 가장 간단한 방법으로는 기능을 쪼개는 것이다. 기능별로 쪼갠다는게 단순히 구역별로 쪼개게 되면 기능의 의미를 명확하게 드러내지 못한다. 더불어 이런 코드는 재사용성을 떨어뜨린다.</p><p>이렇게 기능을 쪼개는 일이 쉬운 일이 아닌 이유는 코드의 대다수는 다음과 같이 로직과 반복문, 분기문의 결합으로 구성되어 있기 때문이다.</p><img src="/blog/2017/07/26/rxjsbook3/logic.png"><p>코드에서 반복문과 분기문을 모두 제거한다는 것은 사실상 불가능하다. 하지만 기능 단위로 분리 할 수 있다면 기능을 추상화 할 수 있고, 이로 인해 로직의 복잡성을 줄일 수 있다.</p><h4 id="변수는-오류의-시작"><a href="#변수는-오류의-시작" class="headerlink" title="변수는 오류의 시작"></a>변수는 오류의 시작</h4><p>변수를 사용한다는 의미는 오류를 발생시킬 수 있는 확률을 높일 수 있다. 변수는 변경될 수 있는 값이기 때문에 유용하다. 반면, 의도치 않게 이 값이 바뀔 경우에 우리는 오류에 직면하게 된다.<br>브라우저 환경의 자바스크립트에서는 싱글 쓰레드 구조이기 때문에 Mutil Thread의 사용으로 인한 동시성 문제는 자주 발생하지 않는다. 하지만 DOM에 등록된 이벤트 핸들러로 인해 변수의 값이 변경되거나 비동기 행위로 인해 외부로 노출된 변수의 값들이 변경 될 수 있다.</p><blockquote><p>WebWorker와 같은 기술 스펙을 사용하면 Mutil Thread 기술을 사용할 수 있지만 브라우저는 기본적으로 하나의 메인 스레드에서 모든 작업이 이루어 진다.</p></blockquote><p>따라서, 우리는 변수의 노출 범위를 제한하거나 제거함으로써 변수의 값이 외부에 의해 변경되지 않고 개발자의 의도에 따라 정확하게 변경될 수 있도록 보장하여만 한다.</p><h3 id="자바스크립트의-솔루션"><a href="#자바스크립트의-솔루션" class="headerlink" title="자바스크립트의 솔루션"></a>자바스크립트의 솔루션</h3><p>다행히도 자바스크립트는 이런 면에서는 꽤나 훌륭한 솔루션을 제공하고 있다.<br>함수형 프로그래밍의 특성을 가진 자바스크립트 함수를 이용하면 실제 로직과 상관이 없는 반복문, 분기문을 분리할 수 있다. 더불어 변수 또한 제거해 나갈 수 있다.<br>이렇게 함으로써 로직의 의미를 더욱 명확히 할 수 있으며 재사용성을 더욱 높일 수 있다.</p><blockquote><p>자바스크립트 함수는 일급객체이다.<br>일급 객체(First-class object)는 다음과 같은 특성을 가지고 있다.</p><ul><li>변수 혹은 데이터 구조에 저장할 수 있다<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> savedFunction = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>파라미터로 전달할 수 있다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">f, value</span>) </span>&#123;&#125;;</span><br><span class="line"> foo(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="string">"함수를 파라미터로 전달 할 수 있다"</span>);</span><br><span class="line"> &#125;, <span class="string">"값"</span>);</span><br></pre></td></tr></table></figure></li></ul></blockquote><blockquote><ul><li>반환값으로 사용할 수 있다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"함수를 반환할 수 있다"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></blockquote><h4 id="로직의-분리"><a href="#로직의-분리" class="headerlink" title="로직의 분리"></a>로직의 분리</h4><p>앞의 process 함수를 기능 단위의 로직과 반복문, 분기문으로 분리해보자.<br>process 함수는 다음과 같은 구조로 되어 있다.</p><img src="/blog/2017/07/26/rxjsbook3/advance_logic.png"><p>여기에서 우리의 주요 관심사는 성별에 따라 비만도를 구하는 로직과 사용자별 HTML을 만드는 로직이다.<br>이 부분을 별도의 함수로 만들어보자.</p><p>표준 체중과 비만도를 계산하는 함수는 height, mass, gender을 입력값으로 받아서 BROCA와 BMI 방식의 비만도와 표준 체중을 반환한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 표준 체중과 비만도를 계산하는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logic</span>(<span class="params">height, mass, gender</span>) </span>&#123;</span><br><span class="line"><span class="keyword">let</span> broca = (height - (gender === <span class="string">"male"</span> ? <span class="number">100</span> : <span class="number">105</span>)) * <span class="number">0.9</span>;</span><br><span class="line"><span class="keyword">let</span> bmi = height / <span class="number">100</span> * height / <span class="number">100</span> * (gender === <span class="string">"male"</span> ? <span class="number">22</span> : <span class="number">21</span>);</span><br><span class="line"><span class="keyword">if</span> (gender == <span class="string">"male"</span>) &#123;</span><br><span class="line">broca = (height - <span class="number">100</span> * <span class="number">0.9</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">bmi = (height / <span class="number">100</span> * height / <span class="number">100</span> * <span class="number">22</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">broca = (height - <span class="number">100</span> * <span class="number">0.9</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">bmi = (height / <span class="number">100</span> * height / <span class="number">100</span> * <span class="number">21</span>).toFixed(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obesityUsingBroca = ((mass - broca) / broca * <span class="number">100</span>).toFixed(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> obesityUsingBmi = ((mass - bmi) / bmi * <span class="number">100</span>).toFixed(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">broca,</span><br><span class="line">bmi,</span><br><span class="line">obesityUsingBroca,</span><br><span class="line">obesityUsingBmi</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>사용자 정보별 HTML을 만드는 함수는 user 정보를 받아서 string 형태의 html을 반환한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 사용자 정보를 표현하기 위해 HTML을 만드는 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeHtml</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;li class='card'&gt;</span></span><br><span class="line"><span class="string">&lt;dl&gt;</span></span><br><span class="line"><span class="string">&lt;dt&gt;<span class="subst">$&#123;user.name&#125;</span> &lt;i class="fa fa-<span class="subst">$&#123;user.gender&#125;</span>"&gt;&lt;/i&gt;&lt;/dt&gt;</span></span><br><span class="line"><span class="string">&lt;dd&gt;&lt;span&gt;키 : &lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;user.height&#125;</span> cm&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">&lt;dd&gt;&lt;span&gt;몸무게: &lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;user.mass&#125;</span> kg&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">&lt;dd&gt;&lt;span&gt;BROCA 표준체중 : &lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;user.broca&#125;</span> kg&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">&lt;dd&gt;&lt;span&gt;BROCA 비만도 : <span class="subst">$&#123;user.obesityUsingBroca&#125;</span>&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">&lt;dd&gt;&lt;span&gt;BMI 표준체중 : &lt;/span&gt;&lt;span&gt;<span class="subst">$&#123;user.bmi&#125;</span> kg&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">&lt;dd&gt;&lt;span&gt;BMI 비만도 : <span class="subst">$&#123;user.obesityUsingBmi&#125;</span>&lt;/span&gt;&lt;/dd&gt;</span></span><br><span class="line"><span class="string">&lt;/dl&gt;</span></span><br><span class="line"><span class="string">&lt;/li&gt;`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logic, makeHtml함수를 이용하면 다음과 같이 process 함수를 작성할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">people</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> html = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">const</span> user <span class="keyword">of</span> people.results) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/male|female/</span>.test(user.gender)) &#123;</span><br><span class="line">      <span class="keyword">const</span> result = logic(user.height, user.mass, user.gender);</span><br><span class="line">      <span class="built_in">Object</span>.assign(user, result);</span><br><span class="line">      html.push(makeHtml(user));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> html.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>logic, makeHtml 함수를 만듦으로서 우리는 핵심 로직을 작성는데 집중할 수 있게 되었다.<br>더불어 logic, makeHtml 함수도 재사용 할 수 있는 단위 함수가 되었다.</p><h4 id="반복문-분기문-그리고-변수와의-이별"><a href="#반복문-분기문-그리고-변수와의-이별" class="headerlink" title="반복문, 분기문, 그리고 변수와의 이별"></a>반복문, 분기문, 그리고 변수와의 이별</h4><p>위에 개선한 process도 좋은 코드이다. 우리는 구현 로직에 더 집중할 수 있게 되었다.<br>하지만, 흐름을 제어하는 반복문과 분기문은 여전히 process에 존재한다.<br>코드가 크면 클수록 process에 존재하는 반복문과 조건문은 우리 코드의 가독성을 떨어뜨릴 것이다. 더불어 html, result 같은 변수가 여전히 존재하기 때문에 우리는 항상 오류에 노출될 것이다.</p><p>이번에는 ES5에서 제공하는 Array의 filter, map, reduce와 같은 고차함수(High-order function)를 이용하여 process를 개선해 보자.</p><blockquote><h3 id="고차함수-Higher-order-function"><a href="#고차함수-Higher-order-function" class="headerlink" title="고차함수 (Higher-order function)"></a>고차함수 (Higher-order function)</h3><ul><li>다른 함수를 인자로 받거나 그 결과로 함수를 반환하는 함수.<br>출처: wikipedia <a href="https://en.wikipedia.org/wiki/Higher-order_function" rel="external nofollow noopener noreferrer" target="_blank">https://en.wikipedia.org/wiki/Higher-order_function</a></li><li>고차 함수는 변경되는 주요 부분을 함수로 제공함으로서 동일한 패턴 내에 존재하는 문제를 손쉽게 해결할 수 있는 고급 프로그래밍 기법이다.</li><li>고차 함수를 이용하면 함수의 합성, 변형과 같은 작업을 손쉽게 할수 있다. 더불어 Currying, Memoization과 같은 기법도 사용할 수 있다.<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> twice = <span class="function">(<span class="params">f, v</span>) =&gt;</span> f(f(v));</span><br><span class="line"><span class="keyword">const</span> fn = <span class="function"><span class="params">v</span> =&gt;</span> v + <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(twice(fn, <span class="number">7</span>)); <span class="comment">// 13</span></span><br></pre></td></tr></table></figure></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">process</span>(<span class="params">people</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> people.results</span><br><span class="line">  .filter(<span class="function"><span class="params">user</span> =&gt;</span> <span class="regexp">/male|female/</span>.test(user.gender))</span><br><span class="line">.map(<span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">Object</span>.assign(</span><br><span class="line">      user,</span><br><span class="line">      logic(user.height, user.mass, user.gender)</span><br><span class="line">))</span><br><span class="line">.reduce(<span class="function">(<span class="params">acc, user</span>) =&gt;</span> &#123;</span><br><span class="line">acc.push(makeHtml(user));</span><br><span class="line"><span class="keyword">return</span> acc;</span><br><span class="line">&#125;, [])</span><br><span class="line">.join(<span class="string">""</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>if문은 filter로 변환하고, 값을 변환해야하는 경우에는 map을 이용하고, 축적된 데이터를 반환해야하는 경우에는 reduce를 이용하였다.<br>각각의 고차함수에 전달되는 함수는 외부의 변수에 영향을 미치지도 않고, 영향을 받지도 않는 함수이다.<br>전달된 함수는 항상 같은 입력이 주어지면, 항상 같은 출력을 반환한다.<br>이런 함수를 함수형 프로그래밍에서는 <code>순수함수</code>라고 한다.</p><blockquote><p>순수함수와 함수형 프로그래밍에 대한 내용은 <code>부록. 함수형 프로그래밍 (Functional Programming)</code>을 참조하기 바란다.</p></blockquote><p>개선된 process에서는 반복문, 분기문, 변수가 존재하지 않는다.<br>핵심 로직은 분리되었고 코드의 흐름은 단일화되었다. 더불어 변수를 사용하지 않음으로서 오류의 발생 빈도도 크게 줄었다.</p><h2 id="RxJS는-어떻게-개선하였나"><a href="#RxJS는-어떻게-개선하였나" class="headerlink" title="RxJS는 어떻게 개선하였나?"></a>RxJS는 어떻게 개선하였나?</h2><p>RxJS 또한 ES5 Array의 고차 함수와 같은 <code>operator를 제공</code>함으로써 로직에 존재하는 분기문과 반복문, 그리고 변수를 제거하려고 하였다.</p><h3 id="Immutable-객체-Observable"><a href="#Immutable-객체-Observable" class="headerlink" title="Immutable 객체 Observable"></a>Immutable 객체 Observable</h3><p>ES5 Array의 고차함수들이 반환값으로 새로운 Array 객체를 반환하여 각각에 영향을 미치지 않도록 하는 것과 같이 RxJS의 operator는 항상 새로운 Observable을 반환함으로써 Array의 고차함수와 같이 <code>불변 객체 (Immutable Object)</code>를 반환한다.<br>불변 객체는 생성 후 그 상태를 바꿀 수 없는 객체이다. 불변 객체는 외부에서 값을 변경할 수 없기 때문에 불변 객체를 사용하는 것만으로도 프로그램의 복잡도가 줄어든다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> mappedArr = arr.map(<span class="function"><span class="params">v</span> =&gt;</span> v);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr === mappedArr); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>Array와 다른점이 있다면 Array의 경우는 새로운 Array 객체 생성 작업만 하지만 Observable은 새로운 Observable를 만들고, 그 Observable이 operator를 호출한 Observable을 내부적으로 subscribe 하는 형태를 유지한다. 즉, Linked list 형태로 기존 Observable 객체와 새롭게 만든 Observable 객체를 operator로 연결하고 있다.</p><img src="/blog/2017/07/26/rxjsbook3/linked-observable.png" title="linked-observable"><p>한 예로 Observable.map은 다음과 같이 구현되어 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Observable.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">transformationFn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> source = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">new</span> Rx.Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 새로운 Observable은 현재의 Observable을 subscribe 한다.</span></span><br><span class="line">    source.subscribe(</span><br><span class="line">      <span class="comment">// 현재의 Observable에서 전달된 데이터를 변경하여 전달한다.</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        observer.next(transformationFn(x));</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        observer.error(err);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        observer.complete();</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>이런 구조를 취함으로서 <code>source부터 전달된 데이터, 에러, 종료여부가 Observable의 operator들을 통해 전달되거나 변경되어 구독한 Observer에게 전달할 수 있게 된다.</code></p><p>앞에서 설명한 표준체중과 비만도 조회 예를 Observable로 변경해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ajax$ = <span class="keyword">new</span> Rx.Observable(<span class="function"><span class="params">observer</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> jsonData = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">      <span class="comment">// user 데이터를 user 단위로 변환하여 전달</span></span><br><span class="line">      jsonData.results.forEach(<span class="function"><span class="params">v</span> =&gt;</span> observer.next(v));</span><br><span class="line">      observer.complete();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  xhr.open(<span class="string">"GET"</span>, <span class="string">"http://swapi.co/api/people/"</span>);</span><br><span class="line">  xhr.send();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">ajax$</span><br><span class="line">  .filter(<span class="function"><span class="params">user</span> =&gt;</span> <span class="regexp">/male|female/</span>.test(user.gender))</span><br><span class="line">  .map(<span class="function"><span class="params">user</span> =&gt;</span> <span class="built_in">Object</span>.assign(user, logic(user.height, user.mass, user.gender)))</span><br><span class="line">  .reduce(<span class="function">(<span class="params">acc, user</span>) =&gt;</span> &#123;</span><br><span class="line">    acc.push(makeHtml(user));</span><br><span class="line">    <span class="keyword">return</span> acc;</span><br><span class="line">  &#125;, [])</span><br><span class="line">  .subscribe(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">"users"</span>).innerHTML = v;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>이전 우리가 개선한 process 소스와 큰 차이가 없다.</p><blockquote><p>원리 설명을 위해 부득이하게 사용자 리스트를 사용자로 바꿔 전달하였다.<br>일반적으로는 Ajax를 통해 전달 받은 정보를 바탕으로 operator를 적용한다.</p></blockquote><p>차이라면 다음과 같이 ajax$ Observable를 통해 전달 받은 데이터가 filter, map, reduce를 거쳐 observer에게 전달되는 구조로 되어있다는 것이다.</p><img src="/blog/2017/07/26/rxjsbook3/rx_process.png"><h2 id="RxJS가-제공하는-Operator"><a href="#RxJS가-제공하는-Operator" class="headerlink" title="RxJS가 제공하는 Operator"></a>RxJS가 제공하는 Operator</h2><p>다음은 공식 홈페이지에서 제공하는 operator 목록이다.<br><a href="http://reactivex.io/rxjs/manual/overview.html#categories-of-operators" rel="external nofollow noopener noreferrer" target="_blank">http://reactivex.io/rxjs/manual/overview.html#categories-of-operators</a></p><table><thead><tr><th>카테고리</th><th>operator</th></tr></thead><tbody><tr><td>생성 operator</td><td>ajax, bindCallback, bindNodeCallback, create, defer, empty, from, fromEvent, fromEventPattern, fromPromise, generate, interval, never, of,repeat ,repeatWhen, range ,throw ,timer</td></tr><tr><td>변환 operator</td><td>buffer, bufferCount, bufferTime, bufferToggle, bufferWhen, concatMap, concatMapTo, exhaustMap, expand, groupBy, map, mapTo, mergeMap, mergeMapTo, mergeScan, pairwise, partition, pluck, scan, switchMap, switchMapTo, window, windowCount, windowTime, windowToggle, windowWhen</td></tr><tr><td>추출 operator</td><td>debounce, debounceTime, distinct, distinctKey, distinctUntilChanged, distinctUntilKeyChanged, elementAt, filter, first, ignoreElements, audit, auditTime, last, sample, sampleTime, single, skip, skipUntil, skipWhile, take, takeLast, takeUntil, takeWhile, throttle, throttleTime</td></tr><tr><td>결합 operator</td><td>combineAll, combineLatest, concat, concatAll, exhaust, forkJoin, merge, mergeAll, race, startWith, switch, withLatestFrom, zip, zipAll</td></tr><tr><td>멀티캐스팅 operator</td><td>cache, multicast, publish, publishBehavior, publishLast, publishReplay, share</td></tr><tr><td>에러 처리 operator</td><td>catch, retry, retryWhen</td></tr><tr><td>유틸리티 operator</td><td>do, delay, delayWhen, dematerialize, finally, let, materialize, observeOn, subscribeOn, timeInterval, timestamp, timeout, timeoutWith, toArray, toPromise</td></tr><tr><td>조건.참거짓 operator</td><td>defaultIfEmpty, every, find, findIndex, isEmpty</td></tr><tr><td>수학,누적 operator</td><td>count, max, min, reduce</td></tr></tbody></table><p>RxJS에서 제공하는 operator를 이용하면 Observable을 생성 할 수도 있고 전달된 데이터를 변환하거나 필요한 데이터만을 추출할 수 도 있다.<br>더불어 여러 개의 Observable을 합성하기도 하고, 하나의 Observable을 다른 여러개의 Observable로 나눌 수도 있다.</p><p>RxJS는 정말 많은 operator를 제공한다. operator의 의미에 대해 잘 아는 사람에게는 굉장히 편리하다. 반면 그 의미를 잘 알지 못하는 사람에게는 오히려 진입 장벽이 되기도 한다.<br>이 operator의 기본적인 철학은 <code>함수형 프로그래밍</code>에 그 근간을 두고 있다.<br>아마도 함수형 프로그래밍 언어를 배운 독자라면 꽤 익숙한 이름의 operator들이 있는 것 을 알 수 있다.</p><p>RxJS의 operator는 어휘와 같다.<br>내가 많은 단어와 문장을 알아서 사용하게 되면 나의 편의성이 증가하고 더불어 나의 품격도 높아질수 있다. 하지만, 다른 한편으로는 다른 사람이 내 말을 이해하기 어려워 할 수도 있다.<br>반면 내가 알고 있는 단어와 문장이 적다고 하더라도 의사소통이 될 정도의 단어와 문장을 사용한다면 생활하는데 부족함이 없다. 마찬가지로 RxJS의 모든 operator를 다 알 필요는 없다.<br>카테고리별로 자주쓰는 operator 몇 개를 잘 알고 적용할 수 있다면 충분히 RxJS의 장점을 극대화 할수 있다.<br>따라서, 이 책에서도 RxJS의 모든 Operator를 다루지는 않는다. 주요 카테고리별로 꼭! 알아야하는 RxJS의 Operator를 몇 개를 기준으로 설명을 할 예정이다.<br>자세한 내용은 다음 2부에서 진행하는 실제 프로젝트를 통해 조금씩 익혀나가 보자.</p><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>웹어플리케이션의 로직은 반복문, 분기문, 변수에 의해 복잡도가 증가한다. 복잡도가 증가하게되면 이로 인해 코드의 가독성이 떨어지고 결국에는 오류에 직면하게 된다.<br>ES5 Array의 고차함수를 이용하면 반복문, 분기문, 변수를 로직으로부터 분리하고 제거할수 있다. 마찬가지로 RxJS는 ES5 Array의 고차함수와 같은 operator를 제공한다.<br>operator는 Immutable한 Observable를 항상 생성함으로써 외부나 내부에 영향을 미치지 않는다. 이런 구조는 오류의 발생 빈도를 낮추는 역할을 한다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/07/26/rxjsbook3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RxJS가 해결하려고했던 문제2 - 상태 전파 문제</title>
      <link>http://sculove.github.io/blog/2017/07/26/rxjsbook2/</link>
      <guid>http://sculove.github.io/blog/2017/07/26/rxjsbook2/</guid>
      <pubDate>Tue, 25 Jul 2017 16:51:20 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;오늘 소개할 부분은&lt;br&gt;웹어플리케이션 개발시 발생할 수 있는 &lt;code&gt;상태 전파 문제&lt;/code&gt;를 RxJS는 어떻게 접근했는지에 대한 이야기이다.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id=&quot;웹어플리케이션의-상태&quot;&gt;&lt;a href=&quot;#웹어플리케이션의-상태&quot;
        
      
      </description>
      
      <content:encoded><![CDATA[<p>오늘 소개할 부분은<br>웹어플리케이션 개발시 발생할 수 있는 <code>상태 전파 문제</code>를 RxJS는 어떻게 접근했는지에 대한 이야기이다.</p><hr><h2 id="웹어플리케이션의-상태"><a href="#웹어플리케이션의-상태" class="headerlink" title="웹어플리케이션의 상태"></a>웹어플리케이션의 상태</h2><p>우리가 만드는 웹어플리케이션은 하나의 큰 상태 머신이고 이를 구성하고 있는 크고 작은 단위들 또한 하나의 상태머신이다.<br>각각의 상태 머신들은 각자의 상태를 가지고 있고, 상태 머신들은 각자의 역할에 따라 서로 유기적으로 연결되어 있다.</p><p>A라는 작은 상태 머신의 상태값은 B의 입력값이 될수 있고, B의 상태값은 C와 D에 관련 있는 상태값 일수 있다.<br>따라서, A의 상태 값은 B로 전달되어야하고 B의 상태값은 다시 C와 D에 전달되어야만 한다.<br>이렇게 A의 상태 변화 정보가 B에 전달되어야하고 B의 상태값이 다시 C와 D에 전달되어야하는 이유는 바로 A, B, C, D 모듈간에 <code>의존성</code>이 있기 때문이다.</p><p>간단한 예를 들어보자.<br>사용자 정보(상태)를 System 클래스가 check() 함수에서 사용하고 있는 예제이다.<br>System과 User간에는 다음과 같은 의존성이 존재한다.</p><img src="/blog/2017/07/26/rxjsbook2/A-B-use.png" title="B가 A를 사용하는 구조"><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>._state = &#123;</span><br><span class="line">      name: <span class="string">"손찬욱"</span>,</span><br><span class="line">      isLogin: <span class="literal">false</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  getName() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._state.name;</span><br><span class="line">  &#125;</span><br><span class="line">  isLogin() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._state.isLogin;</span><br><span class="line">  &#125;</span><br><span class="line">  login(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>._state.name = name;</span><br><span class="line">    <span class="keyword">this</span>._state.isLogin = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  logout() &#123;</span><br><span class="line">    <span class="keyword">this</span>._state.name = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">this</span>._state.isLogin = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">System</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(user) &#123;</span><br><span class="line">    <span class="keyword">this</span>._token = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>._id = <span class="string">"System"</span>;</span><br><span class="line">    <span class="keyword">this</span>._user = user;</span><br><span class="line">  &#125;</span><br><span class="line">  check() &#123;</span><br><span class="line">    <span class="keyword">const</span> username = <span class="keyword">this</span>._user.getName();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._user.isLogin()) &#123;</span><br><span class="line">      <span class="keyword">this</span>._token = [...username].reduce(<span class="function">(<span class="params">acc, v</span>) =&gt;</span> acc + v.charCodeAt(<span class="number">0</span>), <span class="number">0</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>._id&#125;</span>] <span class="subst">$&#123;username&#125;</span> 의 토큰은 <span class="subst">$&#123;<span class="keyword">this</span>._token&#125;</span> 입니다`</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>._token = <span class="literal">null</span>;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>._id&#125;</span>] 로그인 되지 않았습니다`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="keyword">let</span> system = <span class="keyword">new</span> System(user);</span><br><span class="line"></span><br><span class="line"><span class="comment">// System 작업</span></span><br><span class="line">system.check(); <span class="comment">// [System] 로그인 되지 않았습니다</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// User의 상태변화 발생</span></span><br><span class="line">user.login(<span class="string">"sculove"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// System 작업</span></span><br><span class="line">system.check(); <span class="comment">// [System] sculove 의 토큰은 769 입니다</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// User의 상태변화 발생</span></span><br><span class="line">user.logout();</span><br><span class="line"></span><br><span class="line"><span class="comment">// System 작업</span></span><br><span class="line">system.check(); <span class="comment">// [System] 로그인 되지 않았습니다</span></span><br></pre></td></tr></table></figure><p>System은 User의 로그인 정보에 의해 System의 출력(상태)이 결정된다.</p><h2 id="웹어플리케이션의-상태변화로-인한-문제점"><a href="#웹어플리케이션의-상태변화로-인한-문제점" class="headerlink" title="웹어플리케이션의 상태변화로 인한 문제점."></a>웹어플리케이션의 상태변화로 인한 문제점.</h2><p>System과 User 코드는 굉장히 간단하면서도 훌륭한 예제이다. 하지만, 실프로젝트에서 사용된다면 많은 문제점이 발생할 수 있는 코드이다.</p><h3 id="첫째-User의-인터페이스가-변경되면-System도-함께-변경을-해주어야한다"><a href="#첫째-User의-인터페이스가-변경되면-System도-함께-변경을-해주어야한다" class="headerlink" title="첫째, User의 인터페이스가 변경되면, System도 함께 변경을 해주어야한다."></a>첫째, User의 인터페이스가 변경되면, System도 함께 변경을 해주어야한다.</h3><p>System에서는 user의 메소드인 getName, isLogin을 사용하고 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">System</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  check() &#123;</span><br><span class="line">    <span class="keyword">const</span> username = <span class="keyword">this</span>._user.getName();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._user.isLogin()) &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드는 작은 코드 조각이기 때문에, 크게 문제가 되지 않을수 있지만, 클래스의 크기가 커지면 커질수록 변경에 대한 영향도는 점점 커질 것이다.<br>뿐만 아니라, 지금은 System이 User를 사용하고 있는 상황이지만, 다른 클래스 A, B, C, … 등이 모두 User에 의존도를 가지고 있을 경우에는 더욱 더 변경에 대한 영향도는 커질 것이다.</p><h3 id="둘째-User-상태를-확인하기-위한-인터페이스에-대한-의사소통-비용이-발생한다"><a href="#둘째-User-상태를-확인하기-위한-인터페이스에-대한-의사소통-비용이-발생한다" class="headerlink" title="둘째, User 상태를 확인하기 위한 인터페이스에 대한 의사소통 비용이 발생한다."></a>둘째, User 상태를 확인하기 위한 인터페이스에 대한 의사소통 비용이 발생한다.</h3><p>User를 개발한 개발자와 User와 의존관계가 있는 class A, class B, class C,… 을 개발한 개발자 사이에는 의사소통에 따른 비용이 발생하게 된다.<br>지금은 User의 인터페이스가 getName, isLogin, login, logout 정도이지만, 인터페이스가 많아 질 경우 이에 대한 비용이 증가하게 될 것이다.</p><h3 id="셋째-다수의-클래스가-User에-의존-관계가-있는-경우라면-User의-변경여부를-반영하기-위해-다수의-클래스들이-직접-User의-상태를-모두-반영해야만-한다"><a href="#셋째-다수의-클래스가-User에-의존-관계가-있는-경우라면-User의-변경여부를-반영하기-위해-다수의-클래스들이-직접-User의-상태를-모두-반영해야만-한다" class="headerlink" title="셋째, 다수의 클래스가 User에 의존 관계가 있는 경우라면, User의 변경여부를 반영하기 위해 다수의 클래스들이 직접 User의 상태를 모두 반영해야만 한다."></a>셋째, 다수의 클래스가 User에 의존 관계가 있는 경우라면, User의 변경여부를 반영하기 위해 다수의 클래스들이 직접 User의 상태를 모두 반영해야만 한다.</h3><p>즉, 변경에 대한 전파가 원활하게 이루어지지 않는다.<br>이는 꽤나 번거로운 작업일 뿐만 아니라, User와 의존성이 있는 다수의 클래스들과의 의존 관계를 항상 염두에 두고 개발을 해야만 하기 때문에, 잦은 오류가 발생하기 쉽다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// User 상태변화 발생</span></span><br><span class="line">user.login(<span class="string">"sculove"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// User와 의존관계가 있는 classA</span></span><br><span class="line"><span class="comment">// User와 의존관계가 있는 classB</span></span><br><span class="line"><span class="comment">// User와 의존관계가 있는 classC</span></span><br><span class="line"><span class="comment">// User와 의존관계가 있는 classN ...</span></span><br><span class="line">classA.process();</span><br><span class="line">classB.process();</span><br><span class="line">classC.process();</span><br><span class="line">classN.process();</span><br></pre></td></tr></table></figure><h2 id="우리가-이미-알고-있는-솔루션-Observer-Pattern"><a href="#우리가-이미-알고-있는-솔루션-Observer-Pattern" class="headerlink" title="우리가 이미 알고 있는 솔루션 - Observer Pattern"></a>우리가 이미 알고 있는 솔루션 - Observer Pattern</h2><p>앞에서 이야기했던 문제점은 이미 우리가 익히 알고 있는 패턴으로 대부분 해결이 가능하다.<br>바로 <code>Observer Pattern</code>이다.<br>자 그럼 Observer Pattern에 대해 잠시 살펴보자.</p><h3 id="Loose-Coupling"><a href="#Loose-Coupling" class="headerlink" title="Loose Coupling"></a>Loose Coupling</h3><p>Observer Pattern에서는 상태가 변경될 대상을 Subject라고 한다. 그리고, 그 상태 변화를 관찰하는 대상을 Observer라고 한다.<br>Observer Pattern에서는 Subject와 Observer가 서로 느슨하게 연결되어 있다.<br>여기서 <code>느슨하게 연결되었다 (Loose Coupling)</code>는 의미는 Subject와 Observer가 서로 상호작용을 하지만, 서로 잘 모른다는 의미이다.<br>Subject가 Observer 에 대해서 아는 것은 Observer가 특정 인터페이스(update)를 구현한다는 것 뿐이다.<br>Observer는 언제든지 추가, 삭제할 수 있으며, 새로운 타입의 Observer를 추가하려고 해도 Subject를 변경할 필요가 전혀 없다.<br>또한, Subject와 Observer는 서로 독립적으로 사용이 가능하며, Observer 가 바뀌더라도 서로한테 영향을 미치지 않는다.</p><h3 id="자동-상태-전파"><a href="#자동-상태-전파" class="headerlink" title="자동 상태 전파"></a>자동 상태 전파</h3><p>기존 방식과 같이 데이터를 얻고자 하는 대상이 데이터를 직접 가져오는 방식은 매번 요청을 하여 변경 사항을 확인해야만 한다.<br>하지만 Observer Pattern은 이와 다르게 의존 관계의 대상(Subject)으로 부터 데이터를 제공 받는 방식이다.<br>전자의 경우를 <code>Pull</code> 방식이라고 후자를 <code>Push</code> 방식이라고 한다.</p><img src="/blog/2017/07/26/rxjsbook2/pull_push.png" title="Pull과 Push"><p>Push 방식은 Pull 방식에 비해 상태 전파 문제를 효과적으로 처리 할 수 있다.<br>Push 방식으로 구성된 Observer Pattern은 Subject의 상태가 변경되었을 경우 관찰하는 Observer에게 자동으로 알려준다. 특히, Subject와 Observer가 1:n의 상황에서는 더욱 유효하다.<br>다수의 Observer를 Subject에 등록하기만하면 Subject의 변경사항이 등록된 다수의 Observer에게 자동으로 전달된다.<br>개발자는 데이터 변경 시점을 매번 확인할 필요도 없고 신경쓸 필요도 없다. 단지 변경되었다는 신호가 왔을 경우 처리만 해주면된다.</p><h3 id="인터페이스의-단일화"><a href="#인터페이스의-단일화" class="headerlink" title="인터페이스의 단일화"></a>인터페이스의 단일화</h3><p>앞에서 살펴본 바와 같이 인터페이스가 있다는 것은 많은 비용을 수반한다. 인터페이스가 증가 할때마다 개발자간의 의사소통 비용이 증가하고 변경 영향도도 커진다.<br>사실 이 문제는 인터페이스를 줄이는 것 만으로도 비용을 줄일 수 있다. 하지만 더욱 좋은 방법은 인터페이스가 있어도 없게 만드는 것이다. 어려운 이야기지만 사실 간단하다. <code>인터페이스를 특정 몇개로 통일하는 것이다.</code><br>모든 객체가 쓰는 인터페이스는 methodA, methodB, methodC 이다라고 정의하면 서로의 의사소통 비용이 줄어든다. 더불어, 변경사항이 생기더라도 영향도는 기존 보다 훨씬 작아진다.<br>Observer Pattern은 <code>Observer.update</code>만 존재하기 때문에 Subject에서는 Observer 인터페이스에 대한 별도의 비용이 존재하지 않는다.</p><h2 id="Observer-Pattern의-흔한-예"><a href="#Observer-Pattern의-흔한-예" class="headerlink" title="Observer Pattern의 흔한 예"></a>Observer Pattern의 흔한 예</h2><p>실제 Observer Pattern으로 작성된 예제를 통해 Observer Pattern을 이해해보자.<br>이런 Observer pattern의 가장 흔한 예로는 뉴스를 발행하는 신문사와 이를 구독하는 고객들이 있는 경우가 있다.</p><p>뉴스를 발행하는 신문사(Subject)는 고객들(Observer)를 등록하고, 신문이 발행될 때, 각각의 고객들에게 신문이 발행되었다고 알려준다.(notify)<br>각 고객들은 신문이 발행되었을때, 어떤 고객은 뉴스를 스크랩하거나, 어떤 고객은 뉴스를 읽기 시작한다.</p><p>이를 다이어그램으로 표현하면 다음과 같다.</p><img src="/blog/2017/07/26/rxjsbook2/observerpattern.png" title="Observer 패턴"><p>이제 간단하게 코드로 작성해보자.</p><p>뉴스 정보를 저장하는 클래스를 작성해보자. 이 클래스는 뉴스 정보를 변경할 수 있는 setNews() 메소드를 제공한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsPaper</span> </span>&#123;</span><br><span class="line">  setNews(news) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>NewsPaper 클래스를 Subject 역할을 할수 있도록 구현해보자.<br>각각의 Observer를 등록, 삭제 할수 있는 add, remove 메소드를 추가하고,<br>상태 변경이 일어났을 때 각각 Observer의 update 메소드를 호출하는 notify 메소드를 추가하자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsPaper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>._observers = [];</span><br><span class="line">    &#125;</span><br><span class="line">    setNews(news) &#123;</span><br><span class="line">        <span class="keyword">this</span>.notify(news);</span><br><span class="line">    &#125;</span><br><span class="line">    add(observer) &#123;</span><br><span class="line">        <span class="keyword">this</span>._observers.push(observer);</span><br><span class="line">    &#125;</span><br><span class="line">    remove(observer) &#123;</span><br><span class="line">        <span class="keyword">let</span> idx = <span class="keyword">this</span>._observers.indexOf(observer);</span><br><span class="line">        <span class="keyword">if</span> (idx !== <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>._observers.splice(idx,<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    notify(news) &#123;</span><br><span class="line">        <span class="keyword">this</span>._observers.forEach( <span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">            v.update(news);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제는 뉴스를 구독하고자 하는 각각의 NewsScrapper와 NewsReader Obsever를 만들어보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsScrapper</span> </span>&#123;</span><br><span class="line">  update(news) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`뉴스를 스크랩하자 - <span class="subst">$&#123;news&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsReader</span> </span>&#123;</span><br><span class="line">  update(news) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`뉴스를 읽자 - <span class="subst">$&#123;news&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>자 이제 Observer Pattern을 이용하여 Subject와 Observer들을 만들어 보았다.<br>잘 동작하는지 확인해보자.</p><p>NewsPaper에 구독을 원하는 Observer(NewsScrapper, NewsReader)를 등록하고 NewsPaper의 setNews()를 통해 뉴스의 내용을 변경해보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newsPaper = <span class="keyword">new</span> NewsPaper();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 구독하기</span></span><br><span class="line">newsPaper.add(<span class="keyword">new</span> NewsScrapper());</span><br><span class="line">newsPaper.add(<span class="keyword">new</span> NewsReader());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 상태 변경</span></span><br><span class="line">newsPaper.setNews(<span class="string">"북한 미사일 발사!!!"</span>);</span><br><span class="line">newsPaper.setNews(<span class="string">"코스피 최저점 이탈!!!"</span>);</span><br><span class="line">newsPaper.setNews(<span class="string">"남북평화회담 성사"</span>);</span><br><span class="line">newsPaper.setNews(<span class="string">"남북통일"</span>);</span><br></pre></td></tr></table></figure><p>새로운 뉴스가 구독자들에게 잘 전달이 되는가?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">뉴스를 스크랩하자 - 북한 미사일 발사!!!</span><br><span class="line">뉴스를 읽자 - 북한 미사일 발사!!!</span><br><span class="line">뉴스를 스크랩하자 - 코스피 최저점 이탈!!!</span><br><span class="line">뉴스를 읽자 - 코스피 최저점 이탈!!!</span><br><span class="line">뉴스를 스크랩하자 - 남북평화회담 성사</span><br><span class="line">뉴스를 읽자 - 남북평화회담 성사</span><br><span class="line">뉴스를 스크랩하자 - 남북통일</span><br><span class="line">뉴스를 읽자 - 남북통일</span><br></pre></td></tr></table></figure><p>상태 변경이 잘 전파되고 있다.<br>좋다.</p><h2 id="Observer-패턴-적용-하기"><a href="#Observer-패턴-적용-하기" class="headerlink" title="Observer 패턴 적용 하기"></a>Observer 패턴 적용 하기</h2><p>Observer 패턴을 우리가 고민했던 문제의 예제에 적용해보자.<br>상태 변화를 관찰할 User를 Subject로 만들고, System을 Observer로 변경해보자.</p><p>Subject는 각각의 Observer를 관리하는 기능 자제가 별도로 존재하기 때문에, 이를 상위 클래스로 만들고,<br>User를 하위 클래스로 변경해보자.</p><p>User의 상위 클래스로 사용될 Subject를 만들어보자.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>._observers = [];</span><br><span class="line">  &#125;</span><br><span class="line">  add(observer) &#123;</span><br><span class="line">    <span class="keyword">this</span>._observers.push(observer);</span><br><span class="line">  &#125;</span><br><span class="line">  remove(observer) &#123;</span><br><span class="line">    <span class="keyword">let</span> idx = <span class="keyword">this</span>._observers.indexOf(observer);</span><br><span class="line">    <span class="keyword">if</span> (idx !== <span class="number">-1</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>._observers.splice(idx, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  notify(status) &#123;</span><br><span class="line">    <span class="keyword">this</span>._observers.forEach(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">      v.update(status);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Subject를 User의 부모 클래스로 지정하고, Observer인 System은 User와의 의존 관계를 제거 한다.<br>check 메소드는 Subject로 부터 데이터를 전달받을 상태정보(status)를 파라미터로 받고, 메소드명을 update로 변경한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Subject</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>._state = &#123;</span><br><span class="line">            name: <span class="string">"손찬욱"</span>,</span><br><span class="line">            isLogin: <span class="literal">false</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    getName() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._state.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    isLogin() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._state.isLogin;</span><br><span class="line">    &#125;,</span><br><span class="line">    login(name) &#123;</span><br><span class="line">        <span class="keyword">this</span>._state.name = name;</span><br><span class="line">        <span class="keyword">this</span>._state.isLogin = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.notify(<span class="keyword">this</span>._state);</span><br><span class="line">    &#125;,</span><br><span class="line">    logout() &#123;</span><br><span class="line">        <span class="keyword">this</span>._state.name = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">this</span>._state.isLogin = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">this</span>.notify(<span class="keyword">this</span>._state);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">System</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>._token = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>._id = <span class="string">"System"</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    update(status) &#123;</span><br><span class="line">        <span class="keyword">if</span> (status.isLogin) &#123;</span><br><span class="line">            <span class="keyword">this</span>._token = <span class="built_in">Array</span>.prototype.reduce.call(</span><br><span class="line">                status.username,</span><br><span class="line">                (acc, v) =&gt; acc + v.charCodeAt(<span class="number">0</span>), <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>._id&#125;</span>] <span class="subst">$&#123;status.username&#125;</span> 의 토큰은 <span class="subst">$&#123;<span class="keyword">this</span>._token&#125;</span> 입니다`</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>._token = <span class="literal">null</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">`[<span class="subst">$&#123;<span class="keyword">this</span>._id&#125;</span>] <span class="subst">$&#123;status.username&#125;</span> 은(는) 로그인 되지 않았습니다`</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="keyword">let</span> system = <span class="keyword">new</span> System();</span><br><span class="line"></span><br><span class="line">user.add(system);</span><br><span class="line"></span><br><span class="line"><span class="comment">// User의 상태변화 발생</span></span><br><span class="line">user.login(<span class="string">"sculove"</span>);</span><br><span class="line">user.logout();</span><br><span class="line">user.login(<span class="string">"crazymonlong"</span>);</span><br></pre></td></tr></table></figure><p>System은 생성자에서 더이상 User의 인스턴스를 받지 않는다. 기존에 비해 의존성은 느슨해졌고 변경 상태도 의존성을 가진 모든 객체에 즉시 전파가 된다.</p><p>Login 클래스에 생성자의 파라미터로 구분자를 받는다면, 다수의 Login 모듈을 User에 등록하여 사용할 수도 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">System</span> </span>&#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">constructor</span>(id) &#123;</span><br><span class="line">    <span class="keyword">this</span>._id = id;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>이제는 User의 add를 통해 등록만 하면, User의 상태 변화를 모두 감지할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> user = <span class="keyword">new</span> User();</span><br><span class="line"><span class="keyword">let</span> observer1 = <span class="keyword">new</span> System(<span class="string">"observer1"</span>);</span><br><span class="line"><span class="keyword">let</span> observer2 = <span class="keyword">new</span> System(<span class="string">"observer2"</span>);</span><br><span class="line"><span class="keyword">let</span> observer3 = <span class="keyword">new</span> System(<span class="string">"observer3"</span>);</span><br><span class="line"></span><br><span class="line">user.add(observer1);</span><br><span class="line">user.add(observer2);</span><br><span class="line">user.add(observer3);</span><br></pre></td></tr></table></figure><p>변경에 대한 인터페이스도 <code>update</code> 하나로 간결해졌다.</p><h2 id="RxJS는-무엇을-해결하고자-했는가"><a href="#RxJS는-무엇을-해결하고자-했는가" class="headerlink" title="RxJS는 무엇을 해결하고자 했는가?"></a>RxJS는 무엇을 해결하고자 했는가?</h2><p>RxJS는 상태 변화에 대한 문제를 Observer Pattern을 기반으로 해결하려고 하였다. 다만 기존 Observer Pattern에서 아쉬웠던 몇가지를 개선하였다.<br>앞에서 살펴본 <code>신문사와 구독자</code>의 예를 기준으로 살펴보자.</p><h3 id="RxJS가-개선하려고했던-Observer-Pattern"><a href="#RxJS가-개선하려고했던-Observer-Pattern" class="headerlink" title="RxJS가 개선하려고했던 Observer Pattern"></a>RxJS가 개선하려고했던 Observer Pattern</h3><h4 id="1-상태-변화는-언제-종료되는가"><a href="#1-상태-변화는-언제-종료되는가" class="headerlink" title="1. 상태 변화는 언제 종료되는가?"></a>1. 상태 변화는 언제 종료되는가?</h4><p>만약, 뉴스 서비스 종료로 더이상 뉴스를 전달하지 않게 되었다면 우리는 어떻게 구독자들(NewsScrapper, NewsReader)에게 이 내용을 전달할 수 있을까?<br>아마 다음과 같이 <code>뉴스서비스 종료</code>라는 특정 문자를 각 구독자들에게 보내고,<br>구독자는 <code>뉴스서비스 종료</code>라는 상태가 전달이 되면 <code>구독이 중지되었다</code>고 생각하고 별도의 처리를 해야만 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsScrapper</span> </span>&#123;</span><br><span class="line">  update(news) &#123;</span><br><span class="line">    <span class="keyword">if</span> (news === <span class="string">"뉴스서비스 종료"</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"뉴스 스크랩 서비스가 종료되었음"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`뉴스를 스크랩하자 - <span class="subst">$&#123;news&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsReader</span> </span>&#123;</span><br><span class="line">  update(news) &#123;</span><br><span class="line">    <span class="keyword">if</span> (news === <span class="string">"뉴스서비스 종료"</span>) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"뉴스 읽는 서비스가 종료되었음"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`뉴스를 읽자 - <span class="subst">$&#123;news&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// NewsScrapper 구독</span></span><br><span class="line">newsPaper.add(<span class="keyword">new</span> NewsScrapper());</span><br><span class="line"><span class="comment">// NewsReader 구독</span></span><br><span class="line">newsPaper.add(<span class="keyword">new</span> NewsReader());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 상태 변경</span></span><br><span class="line">newsPaper.setNews(<span class="string">"북한 미사일 발사!!!"</span>);</span><br><span class="line"><span class="comment">//...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 종료시</span></span><br><span class="line">newsPaper.setNews(<span class="string">"뉴스서비스 종료"</span>);</span><br></pre></td></tr></table></figure><p>이는 우리가 처음에 고민했던, 의사소통 비용에 대한 문제를 완벽하게 해결하지 못한 경우라고 이야기할 수 있다.<br>Observer Pattern은 상태를 전달하는 Subject의 데이터가 언제 종료되는지를 Observer들은 알 수가 없다.<br>이를 해결하기 위해서는 위와 같이 Observer와 Subject간에 별도의 규칙을 정해야만 한다. 결국 우린 또 다른 의사소통 비용을 쏟아야만하고, 결국 이런 의사소통의 산출물로 코드에 if문을 만들어야만 한다.<br>개발자로서 꽤 찝찝하고, 아쉬운 부분이다.</p><h4 id="2-상태-변화에서-에러가-발생하면"><a href="#2-상태-변화에서-에러가-발생하면" class="headerlink" title="2. 상태 변화에서 에러가 발생하면?"></a>2. 상태 변화에서 에러가 발생하면?</h4><p>프로그램에서 기능이 정상 동작하는 경우가 대다수이지만 꼭 고민해야할 부분 중의 하나가 바로 에러 처리이다.<br>프로그래머가 예측한 경우에 대한 에러 일수도 있고 예측 불가능한 에러 일 수도 있다.<br>하지만, 분명한 것은 우리가 개발한 서비스는 항상 정상적인 상황에서 돌아가지만은 않는다는 것이다.</p><p>NewsPaper의 setNews 메소드에서 다음과 같이 에러가 발생하게 되면 어떻게 될까?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setNews(news) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"NewsPaper Error"</span>); <span class="comment">// 에러 발생.</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.notify(news);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>우선, Subject 자체적으로 에러처리를 할 수 있다.<br>try-catch 문을 사용하면, 에러 발생 시 다시 한번 상태 변경을 시도 하거나, 상태 변경 작업 자체를 무시하는 등의 작업을 할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setNews(news) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"NewsPaper Error"</span>); <span class="comment">// 에러 발생.</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.notify(news);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="comment">// 다시 시도~!</span></span><br><span class="line">        <span class="keyword">this</span>.notify(news);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 Subject 쪽에서 에러에 대한 처리를 별도로 하면, 등록된 Observer들은 상태 변경시 에러가 발생했는지 정상 동작했는지 모른다. 물론, 이 방법도 좋다.<br>하지만, 경우에 따라서는 등록된 Observer 쪽에서 에러 발생 여부를 인지하고, 이에 대한 별도의 처리를 해야하는 경우가 필요하다.<br>Observer 패턴은 update 인터페이스만을 통해서 Subject의 상태를 Observer에게 전달하기 때문에, 이 상황을 처리하기에는 어렵다.<br>아쉽지만, Observer 패턴은 에러 발생 여부를 Observer들에게 전달할 방법이 딱히 없다.</p><h4 id="3-Observer에-의해-Subject의-상태가-변경되는-경우는"><a href="#3-Observer에-의해-Subject의-상태가-변경되는-경우는" class="headerlink" title="3. Observer에 의해 Subject의 상태가 변경되는 경우는?"></a>3. Observer에 의해 Subject의 상태가 변경되는 경우는?</h4><p>신문사 기자이면서 동시에 구독자인 사람이 있는 경우라면 어떻게 될까?<br>만약 이 기자가 구독받은 기사의 내용을 조금 변경하여 다시 뉴스를 만드는 기레기 기자라면 우리는 생각보다 심각한 상황에 빠지게 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WriterAndReader</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(newsPaper) &#123;</span><br><span class="line">    <span class="keyword">this</span>._newPaper = newsPaper;</span><br><span class="line">  &#125;</span><br><span class="line">  update(news) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`전달 받은 뉴스 - <span class="subst">$&#123;news&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">this</span>._newPaper.setNews(<span class="string">`변형된 뉴스 - <span class="subst">$&#123;news&#125;</span>`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// WriterAndReader 구독</span></span><br><span class="line">newsPaper.add(<span class="keyword">new</span> WriterAndReader(newsPaper));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 상태 변경</span></span><br><span class="line">newsPaper.setNews(<span class="string">"북한 미사일 발사!!!"</span>);</span><br></pre></td></tr></table></figure><p>뉴스는 계속 반복적으로 생성되어 결국 브라우저는 뻗게 될 것이다.<br>이와 같이 Subject를 관찰하는 Observer가 Subject의 상태를 변경하는 경우에는 우리가 예상하지 못하는 복잡한 상황에 직면하게 될 수 있다.<br>이 예는 다소 과한 면이 있지만 우리가 프로그램을 하다보면 이렇게 데이터가 양방향으로 흐르게하는 경우가 종종 있다.<br>데이터의 흐름이 양방향으로 흐르게 함으로써 편한 면도 있지만 궁극적으로는 코드의 복잡도를 증가시키는 경우가 많다.</p><h2 id="RxJS는-어떻게-개선하였나"><a href="#RxJS는-어떻게-개선하였나" class="headerlink" title="RxJS는 어떻게 개선하였나?"></a>RxJS는 어떻게 개선하였나?</h2><p>RxJS 역시 Observer 패턴으로 상태 전달 문제를 해결하려고 하였다.</p><p>우선 RxJS에 녹아 있는 Observer 패턴을 살펴보자.<br>RxJS에서 전달되는 데이터는 모두 Observable 형태로 반환된다.<br>Observable은 <code>subscribe</code> 과정 후부터 데이터를 전달받기 시작한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> click$ = Rx.Observable.fromEvent(<span class="built_in">document</span>, <span class="string">"click"</span>);</span><br><span class="line">click$.subscribe(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>반면, Observer 패턴에서는 Subject와 Observer가 <code>add</code> 과정 후 부터 데이터를 전달받기 시작한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> newsPaper = <span class="keyword">new</span> Subject();</span><br><span class="line">newsPaper.add(&#123;</span><br><span class="line">  update: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>둘의 관계는 닮았다. RxJS의 Observable은 Observer 패턴의 Suject와 닮았다.<br>그런데 Observer 패턴의 Observer에 해당하는 subscribe의 파라미터는 정작 객체가 아니라 함수이다.</p><p>이런 차이가 발생하게 된 배경은 RxJS가 기존 Observer 패턴의 아쉬웠던 점을 개선하고자 했기 때문이다.<br>RxJS가 개선한 Observer 패턴에 대해 살펴보도록 하자.</p><h3 id="RxJS가-개선한-Observer-Pattern"><a href="#RxJS가-개선한-Observer-Pattern" class="headerlink" title="RxJS가 개선한 Observer Pattern"></a>RxJS가 개선한 Observer Pattern</h3><h4 id="인터페이스의-확장"><a href="#인터페이스의-확장" class="headerlink" title="인터페이스의 확장"></a>인터페이스의 확장</h4><p>1장에서 살펴본 바와 같이 RxJS는 시간의 축으로 데이터를 보기 때문에 데이터의 연속적인 변화를 Observer에서 표현할수 있도록 기존 <code>update 메소드를 next로 바꾸었다.</code><br>또한 Observer 패턴은 종료시점, 에러시점에 대한 인터페이스가 존재하지 않기 때문에, 종료를 나타내는 <code>complete 메소드와 에러시점을 나타내는 error 메소드를 추가</code>하였다.</p><p>즉, Observer패턴에서는 하나의 메소드를 갖는 Observer를 사용하였다면 RxJS의 Observer는 next, complete, error의 3개 메소드를 갖는다. 그런데 객체가 아닌 왜 함수를 사용하는 것인가?<br>물론, Observable.subscribe는 다음과 같이 객체, 함수 모든 형태로든 다 전달 받을 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers$ = Rx.Observable.of([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// next, error, complete가 있는 객체를 받음</span></span><br><span class="line">numbers$.subscribe(&#123;</span><br><span class="line">  next(v) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">  &#125;,</span><br><span class="line">  error(e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e);</span><br><span class="line">  &#125;,</span><br><span class="line">  complete() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"complete"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// next 함수만 받음</span></span><br><span class="line">numbers$.subscribe(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// next, error 함수만 받음</span></span><br><span class="line">numbers$.subscribe(</span><br><span class="line">  v =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">  &#125;,</span><br><span class="line">  e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// next, error, complete 함수를 받음</span></span><br><span class="line">numbers$.subscribe(</span><br><span class="line">  v =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(v);</span><br><span class="line">  &#125;,</span><br><span class="line">  e =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(e);</span><br><span class="line">  &#125;,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"complete"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>하지만, RxJS의 subscribe는 특별한 경우를 제외하고는 가급적 함수 형태를 사용한다.<br>그 이유는 객체는 상태를 가질 수 있기 때문이다.<br>객체가 상태를 가진다는 의미는 또 다른 상태 머신이 될 수 있다는 의미이기도 하다. 반면 함수는 상태가 존재하지 않는 기능만을 담당하기 때문에 상태에 관한 문제에서는 보다 자유롭다.<br>이와 관련된 내용은 3장에서 다룰 <code>로직 오류에 대한 문제</code>에서 다시 한번 다루도록 하겠다.</p><h4 id="Observable은-Read-only"><a href="#Observable은-Read-only" class="headerlink" title="Observable은 Read-only"></a>Observable은 Read-only</h4><p>“기자이면서 구독자인 사례”와 같이 데이터가 양방향으로 흐르는 문제를 RxJS는 구조적으로 개선하려고 하였다.<br>Observable은 subscribe를 통해 데이터를 전달할 대상(Observer)에게 데이터를 전달할 수 있지만, 반대로 전달 대상(Observer)에게는 데이터를 전달할 수 없다. Observable은 전달하는 데이터를 설정할 수 있는 그 어떤 메소드도 제공하지 않는다. Observable은 데이터를 얻거나 변경 또는 머지만 할 수있을 뿐 데이터를 생성하지는 못한다. 즉, Observable에서 전달된 데이터는 <code>Observer 한 방향으로만 흐르게 된다</code></p><p>이렇게한 근본적인 이유는 데이터 흐름을 단순화함으로 복잡도를 낮추고 오류 발생 빈도를 줄이기 위해서 이다.<br>물론, 데이터가 양방향으로 흐르게 되면 사용상 편리할 수는 있다. 하지만, 어플리케이션의 규모가 커지게 되면 양방향으로 흐르는 데이터의 복잡도는 통제하기 어려울 정도로 복잡해진다.</p><p>이러한 이유로 최근 등장한 프레임워크들은 모두 <code>단방향 데이터 흐름</code>을 지향한다.</p><blockquote><p>React와 Angular2+, Vue 모두 단방향 데이터 흐름을 지향한다.</p></blockquote><h3 id="Observable은-리액티브하다"><a href="#Observable은-리액티브하다" class="headerlink" title="Observable은 리액티브하다."></a>Observable은 리액티브하다.</h3><p>RxJS는 Observer 패턴과 마찬가지로 데이터가 발생하게되면 Observer에게 자동으로 그리고 빠르게 변경된 데이터를 전달한다.<br>이를 보고 <code>리액티브하다</code>고 이야기한다.<br>리액티브하다라는 의미를 이해하기 위해서는 우선 리액티브 프로그래밍(Reactive Programming)에 대한 정의 부터 살펴보자. 위키피디아에서는 다음과 같이 정의되어 있다.</p><blockquote><p>리액티브 프로그래밍은 데이터 흐름과 상태 변화 전파에 중점을 둔 프로그램 패러다임이다. 사용되는 프로그래밍 언어에서 데이터 흐름을 쉽게 표현할 수 있어야하며 기본 실행 모델이 변경 사항을 데이터 흐름을 통해 자동으로 전파한다는 것을 의미한다.</p><p>출처 : <a href="https://en.wikipedia.org/wiki/Reactive_programming" rel="external nofollow noopener noreferrer" target="_blank">https://en.wikipedia.org/wiki/Reactive_programming</a></p></blockquote><p>위 정의에서 가장 핵심이 되는 단어는 <code>데이터 흐름</code>과 <code>자동으로 전파</code>이다. 즉, 상태 변화의 흐름이 자동으로 전파되는 것을 <code>리액티브</code>하다고 이야기한다.</p><p><code>리액티브</code>의 가장 흔하게 드는 예로 ‘엑셀’을 이야기할 수 있다.</p><p>A열의 값과 B열의 값의 합을 나타내는 C열은 A열이나 B열의 값이 변화되는 경우 자동으로 C열의 값이 변경된다.<br>이렇게 A나 B열의 변경사항이 데이터 흐름을 통해 자동으로 C열에 전파되도록 구조화하는 프로그래밍의 패러다임을 <code>리액티브 프로그래밍</code>이라고 한다.</p><p>이 말은 앞에서 살펴 보았던 상태 변화에 대한 우리의 고민들과 일맥 상통한다고 이야기할 수 있다.<br>이런 고민의 해결책이 Observer 패턴이고, RxJS는 이런 Observer 패턴을 개선하여 어플리케이션에서 발생하는 모든 데이터를 리액티브하게 전달 할 수 있게 해준다. 따라서, RxJS는 <code>리액티브 프로그래밍(Reactive Programming)</code>을 지향하는 라이브러리이다.</p><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>이 장에서는 웹어플리케이션의 상태가 어떻게 전파되는지를 살펴 봄으로써 상태 전파로 인해 발생할 수 있는 문제점을 살펴보았다. 또한, 이러한 문제를 효과적으로 해결했던 Observer 패턴에 대해서도 살펴보았다.<br>Observer 패턴은 느슨하게 연결되어 Subject와 Observer간의 의존도를 줄였으며, Push 방식으로 데이터를 전파함으로써 상태 전파에 대한 많은 문제를 해결했다.<br>RxJS에서는 이런 Observer 패턴을 개선하여 상태 전파 문제를 해결하려고 하였다.<br>에러상황과 종료상황에 대한 인터페이스를 확장하였고, 데이터를 단방향으로 흐를 수 있도록 개선함으로써 코드의 복잡도를 낮추었다. 이런 결과 RxJS는 궁극적으로 Reactive Programming을 지향하는 라이브러리가 되었다.</p><p>다음장에서는 RxJS가 고민한 로직 오류에 대해 살펴보기로 하자.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/07/26/rxjsbook2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RxJS가 해결하려고했던 문제1 - 입력 데이터의 오류</title>
      <link>http://sculove.github.io/blog/2017/06/30/rxjsbook1/</link>
      <guid>http://sculove.github.io/blog/2017/06/30/rxjsbook1/</guid>
      <pubDate>Thu, 29 Jun 2017 20:59:51 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;몇일 전에 요즘 내가 쓰고 있는 책의 초안을 일부를 공개하기로 셀프 선언한 이후, 사실 너무 바빴다 ㅠㅠ&lt;br&gt;1부 탈고일이 좀 남았지만… 마음이 급하다.&lt;br&gt;지인과는 과감히 탕수육 내기도 했으니. 더 급하다.&lt;/p&gt;
&lt;p&gt;처음이니깐 간단히 책
        
      
      </description>
      
      <content:encoded><![CDATA[<p>몇일 전에 요즘 내가 쓰고 있는 책의 초안을 일부를 공개하기로 셀프 선언한 이후, 사실 너무 바빴다 ㅠㅠ<br>1부 탈고일이 좀 남았지만… 마음이 급하다.<br>지인과는 과감히 탕수육 내기도 했으니. 더 급하다.</p><p>처음이니깐 간단히 책소개만 해보면.</p><blockquote><p>RxJS가 무엇을 위해 준비된 라이브러리인지에 대한 답을 구하는 책이다. 더불어 RxJS의 활용법도 학습하는 책이다. 참고로 rxjs5 기준으로 쓰고 있다</p><img src="/blog/2017/06/30/rxjsbook1/rxjs.png"></blockquote><p>오늘 소개할 부분은<br>웹어플리케이션 개발시 발생할 수 있는 <code>입력 오류</code>를 RxJS는 어떻게 접근했는지에 대한 이야기이다.</p><hr><h2 id="웹어플리케이션의-입력-데이터"><a href="#웹어플리케이션의-입력-데이터" class="headerlink" title="웹어플리케이션의 입력 데이터"></a>웹어플리케이션의 입력 데이터</h2><p>웹어플리케이션의 동작 과정을 되돌아보면 사실 몇 개의 큰 과정으로 나눌 수 있다.</p><p>간단한 게시판을 예로 생각해보자.<br>게시판은 서버에 저장된 글을 보여주는 목록화면과 게시글의 내용을 보여주는 상세화면으로 구성되어 있다.<br>서버로부터 저장된 글에 대한 정보를 받고, 받은 정보를 바탕으로 화면과 관련된 UI작업을 한다.<br>게시글의 종류나 카테고리를 셀렉트 박스로 표현할 수도 있고, 작성된 글의 내용 일부를 화면에 표현하기도 한다.</p><p>또한 사용자가 게시글을 등록. 수정하는 편집화면도 있다. 편집화면에서는 사용자가 셀렉트 박스를 선택하기도 하고, 글을 입력하기도 한다. 사용자의 입력이 잘못된 경우에는 사용자에게 메시지를 전달하기도 하기도 한다.<br>글의 작성 및 수정이 끝나면 등록한 정보를 서버에 저장한다.</p><p>이 과정을 <code>데이터가 흐르는 관점</code>으로 살펴보면</p><ul><li><ol><li>목록화면과 조회화면은 서버로부터 데이터를 불러와 브라우저에게 전달한다.</li></ol></li><li><ol start="2"><li>브라우저에 전달된 정보를 브라우저의 UI객체에 전달한다.</li></ol></li><li><ol start="3"><li>편집화면은 브라우저 UI객체를 통해 사용자 입력정보를 전달받고 이를 다시 브라우저의 다른 UI객체나 브라우저 객체에 전달한다.</li></ol></li><li><ol start="4"><li>사용자가 작성한 정보를 브라우저 UI객체나 브라우저 객체를 이용하여 서버로 전달한다.</li></ol></li></ul><p>이 과정을 다시 <code>상태머신</code> 관점에서 살펴보자.<br>1)과 2)의 과정에서 입력값은 <code>서버로부터 전달 받은 게시글 데이터</code>가 된다. 두 과정의 입력값이 동일 할지라도 입력값을 받는 브라우저와 브라우저 UI 객체는 <code>서로 다른 시점</code>에 입력값을 전달받는다.<br>예를 들어 1)과정이 Ajax로 JSON 데이터를 받아와 브라우저의 객체로 저장하는 경우라면 Ajax는 비동기(Asynchronous) 호출로 데이터를 받기 까지 시간이 걸린다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// XMLHttpRequest에 의해 입력된 데이터</span></span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">const</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.onload = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * Ajax를 통해 얻은 데이터를 result 변수에 저장한다.</span></span><br><span class="line"><span class="comment">   *</span></span><br><span class="line"><span class="comment">   * &#123;</span></span><br><span class="line"><span class="comment">   *   list: [</span></span><br><span class="line"><span class="comment">   *      "게시글1번. 안녕하세요.",</span></span><br><span class="line"><span class="comment">   *      "게시글2번. 반갑습니다.",</span></span><br><span class="line"><span class="comment">   *      "게시글3번. RxJS에 대해 알아봐요."</span></span><br><span class="line"><span class="comment">   *   ]</span></span><br><span class="line"><span class="comment">   * &#125;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  result = <span class="built_in">JSON</span>.parse(xhr.responseText);</span><br><span class="line">&#125;;</span><br><span class="line">xhr.open(<span class="string">"GET"</span>, url);</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>반면, 브라우저 UI객체는 이미 브라우저에 존재하는 JSON 데이터를 받기 때문에 동기(Synchronous) 호출로 바로 결과 데이터를 얻을수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">"li"</span>)).forEach(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// Ajax의 결과인 result 변수를 이용하여 DOM에 정보를 표현한다.</span></span><br><span class="line">  v.innerText = result.list[i];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>마찬가지로 3)과 4)의 과정도 입력값은 <code>사용자의 입력</code>이 되지만, 전달된 입력값을 처리하는 시점은 상황에 따라 각각 다르다.</p><p>앞에서 설명한 내용을 간단히 정리하면 다음과 같다.</p><table><thead><tr><th>과정</th><th>데이터</th><th>데이터 흐름</th><th>전달 시점</th><th>예제</th></tr></thead><tbody><tr><td>1)</td><td>게시글</td><td>서버 -&gt; 브라우저</td><td>비동기</td><td>Ajax 통신으로 JSON 데이터를 받는다.</td></tr><tr><td>2)</td><td>게시글</td><td>브라우저 -&gt; 브라우저 UI 객체</td><td>동기</td><td>JSON 데이터를 UI에 반영한다.</td></tr><tr><td>3)</td><td>사용자가 입력한 내용</td><td>사용자 -&gt; 브라우저 UI객체</td><td>비동기</td><td>&lt;textarea&gt;를 통해 사용자 입력을 받는다.</td></tr><tr><td>4)</td><td>사용자가 입력한 내용</td><td>브라우저 UI 객체 -&gt; 브라우저 -&gt; 서버</td><td>동기, 비동기</td><td>&lt;textarea&gt;에 있는 데이터를 JSON 객체로 저장 후, 서버로 Ajax 요청을 한다</td></tr></tbody></table><h2 id="입력-데이터의-전달-시점이-다양하다"><a href="#입력-데이터의-전달-시점이-다양하다" class="headerlink" title="입력 데이터의 전달 시점이 다양하다."></a>입력 데이터의 전달 시점이 다양하다.</h2><p>앞에서 살펴본 바와 같이 입력데이터가 같을지라도 실제 각 객체들 사이로 데이터가 전달되는 시점은 다르다. 어떤 상황에서는 동기(Synchronous) 방식으로 데이터를 주고 받고, 어떤 상황에서는 비동기(Asynchronous) 방식으로 데이터를 주고 받는다.<br>이런 구조는 비단 웹어플리케이션 뿐만이 아니다. 소프트웨어 전반적으로 이와 같은 상황이 발생한다.<br>이런 이유는 두 방식의 차이점을 살펴보면 보다 명확히 알수 있다.</p><h3 id="동기-Synchronous"><a href="#동기-Synchronous" class="headerlink" title="동기(Synchronous)"></a>동기(Synchronous)</h3><p>동기방식은 작업이 들어온 순서에 맞게 차근차근 하나씩 진행되는 것을 의미한다. 호출하는 함수가 호출되는 함수의 작업 완료를 기다린 후 그 다음을 진행하는 방식이다. 이 방식의 장점은 순차적으로 진행되기 때문에 개발이 쉽다. 반면, 처리하는 작업이 많을 경우에는 전체 작업 속도가 느려진다. 특히, 웹브라우저와 같이 단일 UI쓰레드를 사용하는 경우에는 해당 작업이 끝날때까지 브라우저는 대기하고 있어야만 한다.</p><img src="/blog/2017/06/30/rxjsbook1/sync.png" title="Synchronous"><h3 id="비동기-Asynchronous"><a href="#비동기-Asynchronous" class="headerlink" title="비동기(Asynchronous)"></a>비동기(Asynchronous)</h3><p>반면, 비동기 방식은 작업이 들어온 순서에 상관없이 산발적으로 진행되는 것을 의미한다. 호출하는 함수가 호출되는 함수의 작업 완료를 기다리지 않고, 그 다음을 진행하고 호출되는 함수의 작업이 완료되면 별도의 이벤트나 callback 함수를 통해 결과를 전달하는 방식이다. 이 방식의 장점은 효과적으로 작업을 진행할 수 있다는 점이다. 설사 먼저 실행된 작업의 처리시간이 오래걸리더라도 다른 작업을 진행할 수 있다. 반면, 개발은 더욱 복잡해지고 오류 확률은 높아질 우려가 있다.</p><img src="/blog/2017/06/30/rxjsbook1/async.png" title="Asynchronous"><h2 id="동기와-비동기를-함께-사용할-수-밖에-없는가"><a href="#동기와-비동기를-함께-사용할-수-밖에-없는가" class="headerlink" title="동기와 비동기를 함께 사용할 수 밖에 없는가?"></a>동기와 비동기를 함께 사용할 수 밖에 없는가?</h2><p>동기 방식은 명확한 순서를 보장하면서 코드의 흐름과 프로그램의 흐름을 동일하게 처리하는 장점이 있지만, 비동기에 비해 효과적인 작업을 할 수 없다.<br>반면, 비동기 방식은효과적으로 작업을 할 수 있지만 호출의 순서를 보장하기가 어렵다. 이를 보장하기 위해서는 우리는 많은 작업들을 추가적으로 해야만 한다.</p><p>그렇다면 모두 동기 방식으로 개발하면 개발 생산성도 높이고, 오류의 발생빈도도 더 낮출수 있기 때문에 다른 한편으로는 더 좋은 선택이지 않는가?</p><p>틀린말은 아니다. 하지만 결론부터 이야기하면 그렇게 할수가 없다.<br>기반 플래폼이 제공하는 API자체가 동기 또는 비동기 방식을 제공하고 있기 때문에 본질적으로 우리는 이 문제를 피해갈 수가 없다.<br>특히 단일 쓰레드 기반의 브라우저 환경에서는 비동기 방식을 사용하지 않으면 성능 문제를 해결할 수 없기 때문에 우리에게는 선택의 여지가 없다.</p><h2 id="RxJS는-어떻게-개선하였나"><a href="#RxJS는-어떻게-개선하였나" class="headerlink" title="RxJS는 어떻게 개선하였나?"></a>RxJS는 어떻게 개선하였나?</h2><p>RxJS가 주목했던 부분은 바로 이 입력 데이터에 대한 구조적 문제를 개선하고자 하였다.</p><p>RxJS는 이런 구조적인 문제를 개선하기 위해 <code>단 하나의 방식</code>을 사용할 수 있는 구조를 제공한다. 이런 구조의 일원화는 개발을 단순화시킨다. 이런 단순화는 결국에는 오류 발생 빈도를 낮추고, 생산성 향상을 도와준다.</p><p>RxJS는 동기(Synchronous)와 비동기(Asynchronous)의 차이점을 <code>시간</code>이라는 개념을 도입함으로써 해결하려고했다.</p><p>대표적인 비동기(Asynchronous) 처리방식인 이벤트(Event)를 살펴보자.<br>Button에서 발생하는 click 이벤트를 처리하기 위해서는 다음과 같이 버튼에 이벤트 핸들러를 등록한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">button.addEventListener(<span class="string">"click"</span>, event =&gt; &#123;</span><br><span class="line">  <span class="comment">// @todo</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>한번 이벤트 핸들러가 등록되면 사용자가 버튼을 눌렀을 때마다 등록된 이벤트 핸들러가 호출된다.<br>이런 과정에 <code>시간</code>이라는 개념을 도입함으로써 우리는 다른 시각을 얻을 수 있다.</p><p>버튼을 누르는 행위가 우리가 원하는 데이터라면 시간 축을 기준으로 이 데이터는 다음과 같은 모습을 보일 것이다.</p><img src="/blog/2017/06/30/rxjsbook1/async-time.png"><p>이벤트가 아닌 동기(Synchronous) 방식인 함수호출도 <code>시간</code>이라는 개념을 도입하면 다음과 같이 표현될 수 있다.</p><img src="/blog/2017/06/30/rxjsbook1/sync-time.png"><p>결국 동기와 비동기는 시간의 축으로 봤을때는 같은 형태인 것이다.<br>또한, 이런 형태는 <code>시간을 인덱스로 둔 컬렉션</code>으로 생각할 수도 있다. RxJS에서는 이를 <code>스트림(Stream)</code>이라 표현한다.</p><img src="/blog/2017/06/30/rxjsbook1/collection-time.png"><p>RxJS에서는 이런 Stream을 표현하는 <code>Observable</code> 클래스를 제공한다.</p><h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h2><p>Observable은 <code>시간을 인덱스로 둔 컬렉션을 추상화한 클래스</code>이다.<br>이 클래스는 동기나 비동기의 동작 방식으로 전달된 데이터를 <code>하나의 컬렉션</code>으로 바라볼 수 있게 해준다.<br>이렇게 함으로써 개발자는 데이터가 어떤 형태로 전달되는지에 대해 더이상 고민할 필요가 없어진다.<br>단지, Observable을 통해 데이터를 전달 받기만 하면 된다.</p><blockquote><h5 id="Observable의-표준화"><a href="#Observable의-표준화" class="headerlink" title="Observable의 표준화"></a>Observable의 표준화</h5><p>RxJS의 Observable은 Rx에서 만든 라이브러리이기도 하지만, ECMAScript에 표준으로 제안된 스펙이기도하다.<br><a href="https://github.com/tc39/proposal-observable" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/tc39/proposal-observable</a></p><p>이 책에서 다루는 RxJS5는 ECMAScript에 제안된 표준 스펙을 기반으로 작성된 라이브러리이다.</p></blockquote><h2 id="모든-데이터는-Observable로-만들-수-있다"><a href="#모든-데이터는-Observable로-만들-수-있다" class="headerlink" title="모든 데이터는 Observable로 만들 수 있다."></a>모든 데이터는 Observable로 만들 수 있다.</h2><p>Observble은 모든 데이터를 다룬다.</p><ul><li>키보드를 눌러서 입력된 데이터</li><li>마우스를 이동하거나 클릭해서 입력된 데이터</li><li>Ajax/fetch 요청을 통해 얻은 데이터</li><li>Web socket을 통해 전달된 데이터</li><li>Message를 통해 전달된 데이터</li><li>…</li></ul><p></p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/06/30/rxjsbook1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>요즘 일상</title>
      <link>http://sculove.github.io/blog/2017/06/25/recent/</link>
      <guid>http://sculove.github.io/blog/2017/06/25/recent/</guid>
      <pubDate>Sun, 25 Jun 2017 00:06:04 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;내가 알았던 의미있는 내용 중 정리가 필요한 부분이나, 사람들에게 공유하면 의미가 있을것 같은 자료들은 가급적 블로그로 정리하려고 한다. 하지만 생각만큼 쉽지가 않다.&lt;/p&gt;
&lt;p&gt;특히 올해는 개인적으로 &lt;code&gt;책&lt;/code&gt;을 쓴다는 작은 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>내가 알았던 의미있는 내용 중 정리가 필요한 부분이나, 사람들에게 공유하면 의미가 있을것 같은 자료들은 가급적 블로그로 정리하려고 한다. 하지만 생각만큼 쉽지가 않다.</p><p>특히 올해는 개인적으로 <code>책</code>을 쓴다는 작은 목표가 있다보니 글을 올릴 여유가 없다.</p><img src="/blog/2017/06/25/recent/writing-book.jpg"><p>두아이의 아빠로 살면서 책 쓴다는게 사실 쉬운 일은 아닌것 같다.<br>아침에 일어나면 큰애 유치원 데려다주고 바로 회사 가서 열일하고<br>일많으면 야근도 한다.<br>그러면 실제 책을 쓸 수 있는 시간은 11시 부터이다.</p><p>야근 안하고 집에 빨리가더라도 우리 아이들이 10시 이후에 잠들기 때문에, 마찬가지로 11시 부터이다.<br>시간은 2시간 반이지만 웜업시간을 고려하면 많아야 <code>하루 2시간</code></p><p>하지만, 집에만 있는 아내를 배려해야하는 점을 고려하면 일주일에 투자할 수 있는 날은 많아야 2<del>3일 정도이다.<br>그래서 내가 일주일에 투자할수 있는 총 시간은 `4</del>6 시간`</p><p>사실 책쓰는 작업이 집중해서 하는게 더 효과적인데, 쪼개서하다보니 실제 한 챕터를 쓰는데 시간이 더 많이 든다.<br>기존에 뭐썼지? 부터 어떤 스토리로 전개했는지에 대한 기억이 희미해지기 때문에, 다시 앞에서 부터 살펴봐야하는 문제도 있다.</p><p>암튼 요즘은 총체적인 난국을 보내고 있다.</p><p>그래서 생각해낸 방법이 3가지이다.</p><h4 id="첫번째-책쓰는-일을-좀더-작은-단위의-일로-쪼개고-있다"><a href="#첫번째-책쓰는-일을-좀더-작은-단위의-일로-쪼개고-있다" class="headerlink" title="첫번째. 책쓰는 일을 좀더 작은 단위의 일로 쪼개고 있다."></a>첫번째. 책쓰는 일을 좀더 작은 단위의 일로 쪼개고 있다.</h4><p>책을 쓰기 위한 타스크를 굉장히 작은 단위로 나눠서 스케쥴을 했다.</p><ul><li>1장 스토리 라인 만들기</li><li>1장 서론 쓰기</li><li>1장 서론과 본론 이어지는 부분 쓰기</li><li>…</li></ul><p>뭐 이런식으로 쪼개서 하고 있다.<br>그나마 진행도가 나오기때문에 그전 보다는 속도감이 붙은것 같다.</p><h4 id="두번째-주변-사람들에게-예상-탈고일을-알리고-있다"><a href="#두번째-주변-사람들에게-예상-탈고일을-알리고-있다" class="headerlink" title="두번째. 주변 사람들에게 예상 탈고일을 알리고 있다."></a>두번째. 주변 사람들에게 예상 탈고일을 알리고 있다.</h4><p>이 일이 혼자하는 일이고 살다보면 우선순위도 굉장히 낮은 작업이기 때문에 의도적으로 주변사람들에게 알림으로써 내 개인적인 우선순위를 높이고 있다.<br>아직까지는 압박감만 느끼고 스트레스만 더 받고 있는 상황이지만…<br>해볼만은 한것 같다.</p><h4 id="그리고-세번째"><a href="#그리고-세번째" class="headerlink" title="그리고 세번째."></a>그리고 세번째.</h4><p>마찬가지로 <code>책의 초안 일부분을 블로그</code>에 올려 볼 생각이다.</p><p>책을 쓰기 위한 나의 의지이기도 하지만.<br>더 큰 의도는 내가 쓰고 있는 책이 사람들의 공감을 받을수 있는 책인지?<br>내가 이 책에서 어떤 헛소리를 하고 있는지?<br>실제로 이 책에 관심을 갖는 사람들이 누구인지?</p><p>이런 걸 알면 더 좋은 책을 쓸수 있지 않을까하는 막역한 생각에 시작해볼 생각이다.</p><p>오늘은 이 책에서 다룰 내용을 간단히 적고 마무리 할려고 한다.<br>이 책은 <code>RxJS</code>에 대한 책이다.</p><img src="/blog/2017/06/25/recent/rxjs.png"><p>일반적인 RxJS 기술 서적은 아니다.</p><p>이 책은</p><blockquote><p>RxJS가 무엇을 위해 준비된 라이브러리인지에 대한 답을 구하는 책이다. 더불어 RxJS의 활용법도 학습하는 책이다.</p><footer><strong>참고로 rxjs5 기준으로 쓰고 있다</strong></footer></blockquote><p>말은 거창하지만 잘 나올지 모르겠다.</p><p>다시 일상으로~ 고!</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/06/25/recent/#disqus_thread</comments>
    </item>
    
    <item>
      <title>QWebview-Plus 프로젝트 회고</title>
      <link>http://sculove.github.io/blog/2017/05/08/QWebview-plus/</link>
      <guid>http://sculove.github.io/blog/2017/05/08/QWebview-plus/</guid>
      <pubDate>Mon, 08 May 2017 04:12:44 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;“내가 좋아하는 프로그래밍으로 주식을 하면 더 재미있지 않을까?” 라는 생각으로&lt;br&gt;시작한 개인 프로젝트(&lt;a href=&quot;https://github.com/sculove/QWebview-plus&quot; rel=&quot;external nofollow noo
        
      
      </description>
      
      <content:encoded><![CDATA[<p>“내가 좋아하는 프로그래밍으로 주식을 하면 더 재미있지 않을까?” 라는 생각으로<br>시작한 개인 프로젝트(<a href="https://github.com/sculove/QWebview-plus" rel="external nofollow noopener noreferrer" target="_blank">QWebview-plus</a>)가 생각 외로 스타수가 붙었다.</p><p>따로 홍보도 하지 않았는데 몇몇 사람들이 사용하고 있는 것 같다.<br>작년 3월 정도에 뚝딱 만들었던 프로젝트였는데 지금까지 버려진 채로 놓여진게 개발자로서 조금 미안한 생각마저 든다.</p><p>사실 처음에는 프로그래밍으로 system-trading을 하면 수익을 올릴 수 있을 것 같은 막연한 생각이 들어 만들기 시작했다.<br>그래서 시작한 프로젝트가 <a href="https://github.com/sculove/xing-plus" rel="external nofollow noopener noreferrer" target="_blank">xing-api</a>이다. 처음에는 열심히 만들어서 실제 매매도 해보려고 준비까지 했었다.</p><img src="/blog/2017/05/08/QWebview-plus/trading.jpg"><p>하지만, 결국은 나보다 더 잘 할수 있는 분(<a href="mailto:cheesev4@gmail.com" rel="external nofollow noopener noreferrer" target="_blank">cheesev4@gmail.com</a>)에게 xing-api 프로젝트를 넘겨 주었다.</p><p>그렇게 한 이유는</p><ul><li>첫째. python으로 하다 보니 내 주력 언어가 아니어서 언어외 로 배워야할 게 많아서 좀 버거운 면이 있었다.</li><li>둘째. 내 주력언어인 JavaScript로 가능한 방법을 찾게 되었다.</li><li>셋째. 주 증권사가 키움인데, 이베스트 증권사를 사용하는게 번거로웠다.</li><li>넷째. 키움 오픈 API가 내 기준으로는 더 좋은 인터페이스로 보였다. 특히, 실시간 처리에 대해서는 더 사용하기 편했다.</li></ul><p>하지만 정작 지금까지 QWebview-plus는 방치하고 있다.</p><p>이 프로젝트를 해보면서 개인적으로 느낀 점은 크게 3가지이다.</p><h3 id="첫째-오픈소스에-대한-경험"><a href="#첫째-오픈소스에-대한-경험" class="headerlink" title="첫째. 오픈소스에 대한 경험?"></a>첫째. 오픈소스에 대한 경험?</h3><p>개인적으로 오픈소스를 몇개 해봤지만 대중적이지 못했다. 더불어, 열정적으로 개발도 해보지 못했다. 오히려 오픈소스를 하기 위한 프로젝트를 하려고 찾다보니 잘 안되었던 것 같다.<br>지금까지 내가 진행한 주식 관련한 프로젝트는 성공한 오픈소스는 아니다.<br>하지만, 홍보도 안했고, 대중적인 수요도 굉장히 적은 분야에서 여러 개발자들과 커뮤니케이션을 해봤던 경험은 개인적으로 나를 설레게하는데 충분했다고 생각한다.<br>상투적인 경험일지 모르지만, 그냥 하고 싶은 걸 해보는 게 정답인 것 같다.</p><h3 id="둘째-주식에-대한-나의-경험"><a href="#둘째-주식에-대한-나의-경험" class="headerlink" title="둘째. 주식에 대한 나의 경험?"></a>둘째. 주식에 대한 나의 경험?</h3><p>난 프로그래밍을 통한 매매를 하면 남들보다 많은 장점이 있고, 이를 이용하면 유리한 고지에서 많은 수익을 이룰수 있을거라고 생각했다. 하지만 몇가지 간과하지 못한 점이 있다. 우선, 내가 주식을 잘 못한다.<br>주식을 한지는 오래됐지만 정작 고민해보고 분석해본 적이 몇번 없었던 것 같다. 그냥 막연히 오르겠지. 또는 그냥 감으로, 소문으로 주식을 매매했던것 같다. 원칙도 없는데 프로그래밍을 해서 무엇하리?<br>아마 개발에서도 마찬가지인 것 같다. 기술적인 성숙도가 높다고 하더라도 그 비즈니스를 완벽하게 이해하지 못한 개발자는 훌륭한 개발자가 되지 못한다. 이 부분에서 난 크게 착각하고 있었던 것 같다.<br>좋은 연장이 결코 좋은 작품을 만들지는 안듯 프로그래밍을 좀 한다고 주식 프로그래밍을 잘 만들수 있는 것은 아닌것 같다.</p><h3 id="셋째-시스템-트레이닝을-하기전에-해야할-일"><a href="#셋째-시스템-트레이닝을-하기전에-해야할-일" class="headerlink" title="셋째. 시스템 트레이닝을 하기전에 해야할 일?"></a>셋째. 시스템 트레이닝을 하기전에 해야할 일?</h3><p>주식 데이터는 단순히 데이터를 보고 바로 유추할 수 있는 형태의 데이터가 아닌 걸 확인했다. 딥러닝과 같은 복잡한 개념을 이야기 하지 않더라도 데이터가 의미하는 바를 해석하고 분석하는 능력이 선행되어야 전략이나 원칙을 세울수 있는 것을 경험했다.<br>이건 어떻게 보면 내가 주식에 대한 이해가 부족한 것도 영향이 있지만, 실제 나오는 데이터가 의미하는 바를 명확하게 나타내는 작업이 선행되어야 한다는 것을 알았다. 그래야 매매라는 것도 시작해 볼 수 있을 것 같다.</p><h2 id="그래서-앞으로-어떻게-할지에-대한-내-결론은-이렇다"><a href="#그래서-앞으로-어떻게-할지에-대한-내-결론은-이렇다" class="headerlink" title="그래서 앞으로 어떻게 할지에 대한 내 결론은 이렇다."></a>그래서 앞으로 어떻게 할지에 대한 내 결론은 이렇다.</h2><ul><li>첫째. 현재 투자하는 모든 금액을 회수하고, 가능성이 있을 경우 투자하기로 했다.</li><li>둘째. 주식 공부를 먼저 할 필요가 있을 것 같다. 좀 체계적으로 해봐야겠다. 아직 방법은 잘 모르겠지만. 이 부분에 대해서는 별도로 생각해봐야겠다.</li><li>셋째. 버려진 QWebview-plus를 매매용이 아닌 <code>분석의 목적</code>으로 활용하고 발전시킬 필요가 있을 것 같다. 이건 개인적으로 관심있는 기술 스택으로 만드면서 접근해 볼 수 있을 것 같다.</li></ul><p>주식이 본업이 아닌 이상. 취미생활로 긴 호흡으로 즐기면서 해봐야겠다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/05/08/QWebview-plus/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular4 구글은 어떻게 성능 개선을 했나?</title>
      <link>http://sculove.github.io/blog/2017/04/21/Angular4/</link>
      <guid>http://sculove.github.io/blog/2017/04/21/Angular4/</guid>
      <pubDate>Fri, 21 Apr 2017 13:01:43 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;Angular4-구글은-어떻게-성능-개선을-했나&quot;&gt;&lt;a href=&quot;#Angular4-구글은-어떻게-성능-개선을-했나&quot; class=&quot;headerlink&quot; title=&quot;Angular4 구글은 어떻게 성능 개선을 했나?&quot;&gt;&lt;/a&gt;Angular
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Angular4-구글은-어떻게-성능-개선을-했나"><a href="#Angular4-구글은-어떻게-성능-개선을-했나" class="headerlink" title="Angular4 구글은 어떻게 성능 개선을 했나?"></a>Angular4 구글은 어떻게 성능 개선을 했나?</h3><img src="/blog/2017/04/21/Angular4/angular4-icon.png"><p>Angular 2.x 대비 Angular 4.x에서 바뀐점을 살펴보고,<br>구글은 어떻게 성능 개선을 했는지에 대해 방법론적으로 살펴본다.</p><p>이 발표자료는 구글에서 공유한 <a href="https://docs.google.com/document/d/195L4WaDSoI_kkW094LlShH6gT3B7K1GZpSBnnLkQR-g/preview" rel="external nofollow noopener noreferrer" target="_blank">ViewEngine Design</a> 문서와<br>Angular4 릴리즈 소식을 전하는 <a href="http://angularjs.blogspot.kr/2017/03/angular-400-now-available.html" rel="external nofollow noopener noreferrer" target="_blank">Blog</a> 내용을 참고하여 작성하였습니다.</p><iframe src="https://sculove.github.io/slides/angular4/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe><p>자료 : <a href="https://sculove.github.io/slides/angular4/">https://sculove.github.io/slides/angular4/</a></p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/04/21/Angular4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>KAIST 강의. 산업에 적용된 오픈소스</title>
      <link>http://sculove.github.io/blog/2017/03/24/kaist/</link>
      <guid>http://sculove.github.io/blog/2017/03/24/kaist/</guid>
      <pubDate>Fri, 24 Mar 2017 04:57:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;KAIST-강의-산업에-적용된-오픈소스&quot;&gt;&lt;a href=&quot;#KAIST-강의-산업에-적용된-오픈소스&quot; class=&quot;headerlink&quot; title=&quot;KAIST 강의. 산업에 적용된 오픈소스&quot;&gt;&lt;/a&gt;KAIST 강의. 산업에 적용된 오픈소스
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="KAIST-강의-산업에-적용된-오픈소스"><a href="#KAIST-강의-산업에-적용된-오픈소스" class="headerlink" title="KAIST 강의. 산업에 적용된 오픈소스"></a>KAIST 강의. 산업에 적용된 오픈소스</h3><img src="/blog/2017/03/24/kaist/open-source-software-1.jpg"><p>KAIST 학생 대상으로 <code>산업에 적용된 오픈소스</code>라는 주제로 발표한 내용입니다.<br>학생 입장에서 <code>직장인 개발자</code>의 삶(?)과 <code>오픈 소스</code>의 가치가 무엇인지 설명하였습니다.</p><h4 id="발표-자료"><a href="#발표-자료" class="headerlink" title="발표 자료"></a>발표 자료</h4><iframe src="http://sculove.github.io/slides/university/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe><p>자료 : <a href="http://sculove.github.io/slides/university/">http://sculove.github.io/slides/university/</a></p><h4 id="발표한-행사-정보"><a href="#발표한-행사-정보" class="headerlink" title="발표한 행사 정보"></a>발표한 행사 정보</h4><p>[2017.03.24] 카이스트 수업</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2017/03/24/kaist/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Sinon으로 JSONP 테스트하기</title>
      <link>http://sculove.github.io/blog/2016/12/30/test-jsonp-using-sinonjs/</link>
      <guid>http://sculove.github.io/blog/2016/12/30/test-jsonp-using-sinonjs/</guid>
      <pubDate>Thu, 29 Dec 2016 23:30:05 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;예전 &lt;a href=&quot;http://sculove.github.io/blog/2016/05/17/JavascriptTest/&quot;&gt;JavaScript&lt;/a&gt; 테스트 라는 글을 쓴적이 있는데, 그때 더 살펴봐야겠다라고 생각한 라이브러리가 Sinon.js
        
      
      </description>
      
      <content:encoded><![CDATA[<p>예전 <a href="http://sculove.github.io/blog/2016/05/17/JavascriptTest/">JavaScript</a> 테스트 라는 글을 쓴적이 있는데, 그때 더 살펴봐야겠다라고 생각한 라이브러리가 Sinon.js이다.</p><p>최근에는 Jasmine 테스트 프레임워크가 괜찮아 보여 등안시 하다가, 기회가 되서 Sinon.js를 쓰게 되었다.  </p><img src="/blog/2016/12/30/test-jsonp-using-sinonjs/sinonjs.jpeg"><p>Jasmine에서 Ajax를 mocking 하려면 <code>stubRequest</code>를 만들고 <code>andReturn</code>이라는 메소드를 이용하여 직관적으로 테스트 할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jasmine.Ajax.stubRequest(<span class="string">"/another/url"</span>).andReturn(&#123;</span><br><span class="line">  responseText: <span class="string">"immediate response"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>sinon도 있지 않을까 하는 마음으로 찾다가 결국 <code>yieldsTo</code> 라는 메소드를 찾았다.<br>원래는 jQuery ajax mocking 정도는 <a href="http://sinonjs.org/docs/#server" rel="external nofollow noopener noreferrer" target="_blank">useFakeXMLHttpRequest</a> 메소드를 이용하면 되지만,<br><a href="http://sinonjs.org/docs/#json-p" rel="external nofollow noopener noreferrer" target="_blank">JSONP인 경우</a>는 호출 방식이 다르기 때문에, useFakeXMLHttpRequest으로는 mocking이 어렵다.</p><h3 id="Sinon-js로-JSONP를-테스트-하려면…"><a href="#Sinon-js로-JSONP를-테스트-하려면…" class="headerlink" title="Sinon.js로 JSONP를 테스트 하려면…"></a>Sinon.js로 JSONP를 테스트 하려면…</h3><p>stub에게 callback을 호출하도록 시키는 <code>yieldsTo</code> 메소드를 이용하여, mocking 해야만 한다.<br>물론, <code>fakeServer</code> 를 이용하여 mocking 할수 있지만,<br><code>yieldsTo</code>가 훨<del>~</del>씬 간편하다.</p><p>코드는 다음과 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// beforeEach</span></span><br><span class="line"><span class="keyword">let</span> stub = sinon.stub(jQuery, <span class="string">"ajax"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Given</span></span><br><span class="line">stub.yieldsTo(<span class="string">"success"</span>, &#123; <span class="attr">param</span>: <span class="string">"데이터"</span>, <span class="attr">data</span>: <span class="string">"bla bla"</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// When</span></span><br><span class="line">jQuery.ajax(</span><br><span class="line">    url: <span class="string">"http://sculove.github.io"</span>,</span><br><span class="line">    success: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"callback"</span>) &#125;,</span><br><span class="line">    dataType: <span class="string">"jsonp"</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Then</span></span><br><span class="line">expect...</span><br><span class="line"></span><br><span class="line"><span class="comment">// afterEach</span></span><br><span class="line">stub.restore();</span><br></pre></td></tr></table></figure><p>주의할 것은 ajax를 실행하기 전에 이미 yieldsTo에 대한 정보를 미리 설정해놓아야 한다.</p><ul><li>Sinon.js API : <a href="http://sinonjs.org/docs/" rel="external nofollow noopener noreferrer" target="_blank">http://sinonjs.org/docs/</a></li><li>관련 이슈 : <a href="https://github.com/sinonjs/sinon/issues/41" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/sinonjs/sinon/issues/41</a></li></ul>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/12/30/test-jsonp-using-sinonjs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>addEventListener의 요상한 옵션들 중의 하나 Passive</title>
      <link>http://sculove.github.io/blog/2016/12/29/addEventListener-passive/</link>
      <guid>http://sculove.github.io/blog/2016/12/29/addEventListener-passive/</guid>
      <pubDate>Thu, 29 Dec 2016 06:23:24 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;iScroll contribution을 하다가 우연히 알게된 이슈가 있어 몇자 적어본다.&lt;/p&gt;
&lt;p&gt;Chrome 49부터 &lt;a href=&quot;https://github.com/WICG/EventListenerOptions/blob/gh-pages/
        
      
      </description>
      
      <content:encoded><![CDATA[<p>iScroll contribution을 하다가 우연히 알게된 이슈가 있어 몇자 적어본다.</p><p>Chrome 49부터 <a href="https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md" rel="external nofollow noopener noreferrer" target="_blank">EventListenerOptions</a> 옵션을 지원한다.</p><p>기존 addEventListener의 3번째 파라미터로 캡쳐링/버블링 여부를 제어할 수 있는 부분이 <code>EventListenerOptions</code>이라는 객체형태의 추가 옵션을 받을수 있게 되었다.</p><p>jQuery를 쓸 이유가 하나씩 줄고 있다. 허허허</p><h5 id="EventListenerOptions-사용-전"><a href="#EventListenerOptions-사용-전" class="headerlink" title="EventListenerOptions 사용 전"></a>EventListenerOptions 사용 전</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.addEventListener(&apos;touchstart&apos;, handler, false);</span><br></pre></td></tr></table></figure><h5 id="EventListenerOptions-사용-후"><a href="#EventListenerOptions-사용-후" class="headerlink" title="EventListenerOptions 사용 후"></a>EventListenerOptions 사용 후</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"touchstart"</span>, handler, &#123;</span><br><span class="line">  capture: <span class="literal">false</span>,</span><br><span class="line">  once: <span class="literal">false</span>,</span><br><span class="line">  passive: <span class="literal">false</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>현재 크롬에서 지원하는 EventListenerOptions 옵션은 다음과 같다.</p><ul><li>capture: 이벤트 캡쳐링 적용 여부. <a href="https://www.chromestatus.com/feature/5718574840676352" rel="external nofollow noopener noreferrer" target="_blank">크롬 49부터 지원</a></li><li>once: 이벤트를 한번만 호출하고 해제되는 옵션. <a href="https://developers.google.com/web/updates/2016/10/addeventlistener-once" rel="external nofollow noopener noreferrer" target="_blank">크롬 55부터 지원</a></li><li>passive: 스크롤 성능 향상을 위한 옵션으로 <code>true</code>일 경우, 스크롤을 위해 블록되는 것을 방지한다. 이 경우, <code>preventDefault</code>를 사용할 수 없다. <a href="https://developers.google.com/web/updates/2016/06/passive-event-listeners" rel="external nofollow noopener noreferrer" target="_blank">크롬 51부터 지원</a></li></ul><p>이 중, passive 속성은 성능향상을 위해, 브라우저의 기능을 프로그래밍으로 제어할수 있다.</p><h3 id="오"><a href="#오" class="headerlink" title="오~~"></a>오~~</h3><blockquote><p>passive 속성에 대한 링크<br><a href="https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md</a></p></blockquote><p>passive 속성이 <code>false</code>인 경우에 touchstart, touchmove와 같은 이벤트가 발생하면 preventDefault를 이용하여 실제 이벤트 자체를 막을 수 있기 때문에, 브라우저는 scroll을 계속 할지 안할지를 매번 감시해야만 한다.<br>하지만, passive 속성이 <code>true</code>일 경우에는 <code>preventDefault를 이용하여 scroll 이벤트를 막지 않겠다</code>고 브라우저에게 이야기하는 것과 같다. 따라서, 이 룰을 어기면 브라우저는 가차없이 다음과 같은 에러를 던진다.</p><p>다행이 passive 속성의 기본값은 <code>false</code> 이기 때문에, 기존 코드는 문제가 되지 않는다.</p><h2 id="하지만…"><a href="#하지만…" class="headerlink" title="하지만…"></a>하지만…</h2><p><code>Chrome 54+</code> 부터 EventListenerOptions의 passive 속성이 특별한 상황일 경우에는 기본값이 <code>true</code>로 설정된다.</p><blockquote><p>document또는 body에 이벤트 리스너를 추가할때, touchstart, touchmove와 같이 스크롤이 블록되는 이벤트인 경우, passive의 기본 속성값은 true가 된다.</p></blockquote><p>예를 들어 다음과 같은 코드는</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">"touchmove"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>아래와 같은 무시무시한 에러가 발생한다.</p><p>혹시 이런 코드가 있으면 아래 같이 수정하시면 된다. 짜잔~!</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(</span><br><span class="line">  <span class="string">"touchmove"</span>,</span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">  &#125;,</span><br><span class="line">  isPassive()</span><br><span class="line">    ? &#123;</span><br><span class="line">        capture: <span class="literal">false</span>,</span><br><span class="line">        passive: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    : <span class="literal">false</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>여기 사용한 isPassive 함수는 passive 속성 여부를 확인하는 유틸 함수이고, 상세 구현은 다음과 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPassive</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> supportsPassiveOption = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    addEventListener(</span><br><span class="line">      <span class="string">"test"</span>,</span><br><span class="line">      <span class="literal">null</span>,</span><br><span class="line">      <span class="built_in">Object</span>.defineProperty(&#123;&#125;, <span class="string">"passive"</span>, &#123;</span><br><span class="line">        <span class="keyword">get</span>: function() &#123;</span><br><span class="line">          supportsPassiveOption = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;&#125;</span><br><span class="line">  <span class="keyword">return</span> supportsPassiveOption;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://github.com/cubiq/iscroll/blob/master/demos/demoUtils.js#L2-L12" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/cubiq/iscroll/blob/master/demos/demoUtils.js#L2-L12</a></p><p>앞으로는 브라우저 내부를 점점 프로그램으로 제어할수 있는 API들이 쏟아질 것 같다.<br>웹개발을 하는 입장에서는 굉장히 좋은 방향성 같다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/12/29/addEventListener-passive/#disqus_thread</comments>
    </item>
    
    <item>
      <title>console.log를 지워야하는 이유</title>
      <link>http://sculove.github.io/blog/2016/12/02/you-should-remove-consolelog/</link>
      <guid>http://sculove.github.io/blog/2016/12/02/you-should-remove-consolelog/</guid>
      <pubDate>Fri, 02 Dec 2016 05:27:43 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;서비스 개발시에, 테스트용으로 console.log를 찍으시나요?&lt;br&gt;실수로 또는 의도적으로 실서비스에서도 이런 로그가 찍힐 수도 있는데요.&lt;/p&gt;
&lt;h3 id=&quot;테스트나-디버깅용으로-쓰는-이런-로그로-인해-실서비스에서는-메모리-릭이-발생할-수
        
      
      </description>
      
      <content:encoded><![CDATA[<p>서비스 개발시에, 테스트용으로 console.log를 찍으시나요?<br>실수로 또는 의도적으로 실서비스에서도 이런 로그가 찍힐 수도 있는데요.</p><h3 id="테스트나-디버깅용으로-쓰는-이런-로그로-인해-실서비스에서는-메모리-릭이-발생할-수-있습니다"><a href="#테스트나-디버깅용으로-쓰는-이런-로그로-인해-실서비스에서는-메모리-릭이-발생할-수-있습니다" class="headerlink" title="테스트나 디버깅용으로 쓰는 이런 로그로 인해, 실서비스에서는 메모리 릭이 발생할 수 있습니다."></a>테스트나 디버깅용으로 쓰는 이런 로그로 인해, 실서비스에서는 메모리 릭이 발생할 수 있습니다.</h3><p>저도 우연히 개발 중에 알게되었답니다…</p><p>아래는 Observable 코드를 1000개 만드는 코드입니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeObservable</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> Rx.Observable.generate(</span><br><span class="line">    performance.now(),</span><br><span class="line">    x =&gt; x &lt;= startTime + duration,</span><br><span class="line">    x =&gt; performance.now(),</span><br><span class="line">    x =&gt; (x - startTime) / duration,</span><br><span class="line">    Rx.Scheduler.animationFrame</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">onMemory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"create observable"</span>, i, makeObservable());</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>demo link : <a href="http://jsbin.com/hohoxifipu/1" rel="external nofollow noopener noreferrer" target="_blank">http://jsbin.com/hohoxifipu/1</a></p><p>makeObservable()을 통해 instance를 반환하고, onMemory에서 1000번 반복합니다.<br>코드 상으로는 instance 변수가 사용되지 않기 때문에, <code>메모리가 정상적으로 릴리즈 되어야합니다.</code></p><p>하지만, 결과는 다음과 같이 메모리 릭이 발생합니다.</p><img src="/blog/2016/12/02/you-should-remove-consolelog/before.png"><img src="/blog/2016/12/02/you-should-remove-consolelog/memoryleak.png"><p>보시는 바와 같이 System Object가 굉장히 많이 증가하는 것을 보실 수 있습니다.</p><h3 id="이유는-바로-console-log-때문입니다"><a href="#이유는-바로-console-log-때문입니다" class="headerlink" title="이유는 바로 console.log 때문입니다."></a>이유는 바로 console.log 때문입니다.</h3><p>저도 이슈 문의했다가 알게된 사항입니다.</p><p><a href="https://github.com/ReactiveX/rxjs/issues/2090#issuecomment-256844948" rel="external nofollow noopener noreferrer" target="_blank"><img src="/blog/2016/12/02/you-should-remove-consolelog/bingo.png"></a></p><blockquote><p>Chrome Devtool에서 정보를 표현하기 위해,<br>console.log를 사용할때 내부적으로 reference를 저장하게 된답니다.<br>그래서, 결국은 메모리가 해제되지 않고. 메모리 릭이 발생하게 됩니다.</p></blockquote><p>실제로 console.log만 지워보았습니다.</p><p>짜잔~!</p><img src="/blog/2016/12/02/you-should-remove-consolelog/after.png"><p>메모리가 정상적으로 릴리즈되는 것을 확인 할수 있습니다.</p><h2 id="우리-모두-서비스에서-찍는-console-log…-꼭-지웁시다"><a href="#우리-모두-서비스에서-찍는-console-log…-꼭-지웁시다" class="headerlink" title="우리 모두 서비스에서 찍는 console.log…. 꼭! 지웁시다~ ^^"></a>우리 모두 서비스에서 찍는 console.log…. 꼭! 지웁시다~ ^^</h2>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/12/02/you-should-remove-consolelog/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular1 Digest Loop 개선하기</title>
      <link>http://sculove.github.io/blog/2016/12/02/improve-angular1-digestloop/</link>
      <guid>http://sculove.github.io/blog/2016/12/02/improve-angular1-digestloop/</guid>
      <pubDate>Fri, 02 Dec 2016 04:55:20 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Angular1은 높은 생산성을 갖는 좋은 프레임워크이긴 하지만, 성능 부분은 아쉬운 점이 많이 있습니다.&lt;br&gt;그 중 하나로, 데이터 동기화를 처리하는 &lt;code&gt;Digest Loop&lt;/code&gt;에 대한 이야기를 많이 합니다.&lt;br&gt;아쉽지만, 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Angular1은 높은 생산성을 갖는 좋은 프레임워크이긴 하지만, 성능 부분은 아쉬운 점이 많이 있습니다.<br>그 중 하나로, 데이터 동기화를 처리하는 <code>Digest Loop</code>에 대한 이야기를 많이 합니다.<br>아쉽지만, 이 부분은 Angular1을 만들때 챙기지 못한 부분 중에 하나죠.</p><p>이 부분에 대한 튜닝 가이드는 지금까지 굉장히 정리가 잘된 자료 들이 많이 있습니다.</p><ul><li><a href="https://www.alexkras.com/11-tips-to-improve-angularjs-performance/" rel="external nofollow noopener noreferrer" target="_blank">https://www.alexkras.com/11-tips-to-improve-angularjs-performance/</a></li><li><a href="https://speakerdeck.com/avivby/angular-performance-101" rel="external nofollow noopener noreferrer" target="_blank">https://speakerdeck.com/avivby/angular-performance-101</a></li></ul><h3 id="하지만-정작-Digest-문제가-발생했을-때-어떻게-찾아야하는-지에-대한-이야기는-아쉽지만-아무도-이야기-해주지-않습니다"><a href="#하지만-정작-Digest-문제가-발생했을-때-어떻게-찾아야하는-지에-대한-이야기는-아쉽지만-아무도-이야기-해주지-않습니다" class="headerlink" title="하지만, 정작 Digest 문제가 발생했을 때, 어떻게 찾아야하는 지에 대한 이야기는 아쉽지만 아무도 이야기 해주지 않습니다."></a>하지만, 정작 Digest 문제가 발생했을 때, 어떻게 찾아야하는 지에 대한 이야기는 아쉽지만 아무도 이야기 해주지 않습니다.</h3><p>우선 FE좀 해본 개발자라면, 성능 문제가 발생했을 때,<br>크롬의 DevTool을 열고, Timeline을 열어서 문제의 원인을 찾으려고 합니다.</p><p>짜잔. 다음과 같습니다.</p><img src="/blog/2016/12/02/improve-angular1-digestloop/hell.png"><p>해당 서비스 개발자가 봐도 이 많은 호출 스택에서 뭐가 문제인지를 찾아내기는 쉽지가 않습니다.<br>더군다나 저같이 잠시 지원한 입장에서 Timeline만을 갖고 이 문제의 원인을 찾기는 정말 쉬운 문제가 아닙니다.<br>단지, “Digest Loop가 많이 도는 구나” 정도를 알수는 있겠죠.</p><h3 id="Digest-Loop"><a href="#Digest-Loop" class="headerlink" title="Digest Loop"></a>Digest Loop</h3><p>Angular의 Digest Loop는 Watcher 수와 Watcher Expression의 수행시간에 비례합니다.</p><blockquote><p>Digest Loop = Wacher 수 * Wacher Expression 호출 시간</p></blockquote><h4 id="따라서-Digest-Loop에-의해-성능-문제가-발생했을때-이를-해결하는-방법은-크게-3가지-입니다"><a href="#따라서-Digest-Loop에-의해-성능-문제가-발생했을때-이를-해결하는-방법은-크게-3가지-입니다" class="headerlink" title="따라서, Digest Loop에 의해 성능 문제가 발생했을때 이를 해결하는 방법은 크게 3가지 입니다."></a>따라서, Digest Loop에 의해 성능 문제가 발생했을때 이를 해결하는 방법은 크게 3가지 입니다.</h4><ol><li>Watcher 수를 줄이는 방법</li><li>Watcher Expression 호출 시간을 줄이는 방법</li><li>Digest Loop를 호출 수를 줄이는 방법</li></ol><p>물론, Angular1의 <a href="https://chrome.google.com/webstore/detail/angularjs-batarang/ighdmehidhipcmcojjgiloacoafjmpfk" rel="external nofollow noopener noreferrer" target="_blank">Batarang</a> 을 이용하여, Digest Loop가 어떻게 도는지 확인 할 수는 있습니다.<br>아래 보시는 것 처럼, <code>얼마나 많이 발생하고, 어떤 Watcher Expression이 많이 도는지는 확인 할수 있습니다.</code></p><img src="/blog/2016/12/02/improve-angular1-digestloop/batarang1.png"><img src="/blog/2016/12/02/improve-angular1-digestloop/batarang2.png"><h3 id="그런데-정작-이렇게-많이-발생하는-Digest-Loop가-어디서-발생하는지를-찾아내는-방법은-없습니다"><a href="#그런데-정작-이렇게-많이-발생하는-Digest-Loop가-어디서-발생하는지를-찾아내는-방법은-없습니다" class="headerlink" title="그런데, 정작, 이렇게 많이 발생하는 Digest Loop가 어디서 발생하는지를 찾아내는 방법은 없습니다."></a>그런데, 정작, 이렇게 많이 발생하는 Digest Loop가 어디서 발생하는지를 찾아내는 방법은 없습니다.</h3><h2 id="Digest-Loop를-유발하는-곳-손쉽게-찾는-방법"><a href="#Digest-Loop를-유발하는-곳-손쉽게-찾는-방법" class="headerlink" title="Digest Loop를 유발하는 곳 손쉽게 찾는 방법"></a>Digest Loop를 유발하는 곳 손쉽게 찾는 방법</h2><p>Angular는 기본적으로 <code>비동기 시점이 종료되는 시점</code>에 digest가 호출됩니다.<br>따라서, <code>Ajax call이 발생하는 부분, timeout/interval이 종료되는 부분, ng-click과 같이 사용자 이벤트</code>가 호출되는 부분에서 digest loop가 호출됩니다.</p><p>사용자 이벤트가 호출되는 부분은 사용자가 명시적으로 하는 행위이기 때문에, 발생시점과 발생하는 곳을 가급적 쉽게 찾을수 있습니다.<br>다만, Ajax call 이나, timeout/interval은 코드에 녹아 있기 때문에, 찾기가 쉽지 않습니다.</p><p>이를 쉽게 확인하는 방법은 사실 간단합니다.<br>바로, Angular 소스 코드에서 Digest Loop가 발생하는 시점에 <a href="https://developers.google.com/web/tools/chrome-devtools/console/console-reference" rel="external nofollow noopener noreferrer" target="_blank">크롬 로그</a>를 찍는 방법입니다.<br>단순 로그 출력이지만, 그 효과는 큽니다.</p><ol><li>크롬에서 console.trace 로그를 찍으면 다음과 같이 호출 스택을 확인할 수 있으며, <code>해당 소스로의 이동이 가능</code>합니다.  <img src="/blog/2016/12/02/improve-angular1-digestloop/trace.png"></li><li>크롬에서 function 을 로그로 찍으면 <code>해당 소스로의 이동이 가능</code>합니다.  <img src="/blog/2016/12/02/improve-angular1-digestloop/moveTosource.gif"></li><li>크롬에서 console.time/timeEnd를 사용하시면, Timeline 탭에서 로그를 확인 할수 있습니다.  <img src="/blog/2016/12/02/improve-angular1-digestloop/consoletime.png"></li><li>크롬에서 console.count를 사용할 경우, 몇번 호출되었는지 로그를 통해 알수 있습니다.<img src="/blog/2016/12/02/improve-angular1-digestloop/consolecount.png"></li></ol><h2 id="Angular-1-5-8-로그-추가-버전"><a href="#Angular-1-5-8-로그-추가-버전" class="headerlink" title="Angular 1.5.8 로그 추가 버전"></a>Angular 1.5.8 로그 추가 버전</h2><p>능력 부족과 시간 부족으로 툴은 못 만들었지만, Angular 1.5.8 소스에 로그를 찍어 봤습니다.<br><a href="angular.js.1.5.8.zip">angular.js.1.5.8.zip</a></p><p>개발시에 Angular.js 파일을 교체하시면 크롬 콘솔에서 로그를 바로 확인할 수 있습니다.</p><img src="/blog/2016/12/02/improve-angular1-digestloop/result.png"><p>그 외 angular 버전에 적용하시려면 다음 코드 조각을 참조하시기 바랍니다.</p><h4 id="ajax-httpProvider를-이용"><a href="#ajax-httpProvider를-이용" class="headerlink" title="ajax - $httpProvider를 이용"></a>ajax - $httpProvider를 이용</h4><p>Ajax의 경우 Angular 코드에 로그를 삽입하는게 아니라, HTTP interceptor를 등록해서 호출 여부를 확인할 수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$httpProvider.useApplyAsync(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// HTTP 인터셉터</span></span><br><span class="line">$httpProvider.interceptors.push(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    request: <span class="function"><span class="keyword">function</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.time(<span class="string">"[http] "</span>, request.url);</span><br><span class="line">      <span class="keyword">return</span> request;</span><br><span class="line">    &#125;,</span><br><span class="line">    response: <span class="function"><span class="keyword">function</span>(<span class="params">response</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.timeEnd(<span class="string">"[http] "</span> + response.config.url);</span><br><span class="line">      <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="timeout-angular-소스-수정"><a href="#timeout-angular-소스-수정" class="headerlink" title="timeout - angular 소스 수정"></a>timeout - angular 소스 수정</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span>(<span class="params">fn, delay, invokeApply</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//... 생략</span></span><br><span class="line">  timeoutId = $browser.defer(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// [Start] $timeout에 의해 rootScope.apply가 호출된 경우</span></span><br><span class="line">      !skipApply &amp;&amp; <span class="built_in">console</span>.warn(<span class="string">"from timeout"</span>, fn, delay);</span><br><span class="line">      <span class="comment">// [End] $timeout에 의해 rootScope.apply가 호출된 경우</span></span><br><span class="line">      deferred.resolve(fn.apply(<span class="literal">null</span>, args));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      deferred.reject(e);</span><br><span class="line">      $exceptionHandler(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      <span class="keyword">delete</span> deferreds[promise.$$timeoutId];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!skipApply) $rootScope.$apply();</span><br><span class="line">  &#125;, delay);</span><br><span class="line">  <span class="comment">//... 생략</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="interval-angular-소스-수정"><a href="#interval-angular-소스-수정" class="headerlink" title="interval - angular 소스 수정"></a>interval - angular 소스 수정</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function interval(fn, delay, count, invokeApply) &#123;</span><br><span class="line">  //...생략</span><br><span class="line">  function callback() &#123;</span><br><span class="line">    // [Start] $interval에 의해 rootScope.apply가 호출된 경우</span><br><span class="line">    !skipApply &amp;&amp; console.warn(&quot;from interval&quot;, fn, delay);</span><br><span class="line">    // [End] $interval에 의해 rootScope.apply가 호출된 경우</span><br><span class="line">    if (!hasParams) &#123;</span><br><span class="line">      fn(iteration);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      fn.apply(null, args);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="digest-함수-angular-소스-수정"><a href="#digest-함수-angular-소스-수정" class="headerlink" title="digest 함수 - angular 소스 수정"></a>digest 함수 - angular 소스 수정</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$digest: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// [Start] $digest가 호출된 경우</span></span><br><span class="line">  <span class="built_in">console</span>.trace(<span class="string">"digest trace"</span>);</span><br><span class="line">  <span class="built_in">console</span>.time(<span class="string">"digest time"</span>);</span><br><span class="line">  <span class="comment">// [End] $digest가 호출된 경우</span></span><br><span class="line">  beginPhase(<span class="string">'$digest'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//... 생략</span></span><br><span class="line">  <span class="keyword">do</span> &#123; <span class="comment">// "while dirty" loop</span></span><br><span class="line">    <span class="comment">//... 생략</span></span><br><span class="line">    <span class="keyword">do</span> &#123; <span class="comment">// "traverse the scopes" loop</span></span><br><span class="line">      <span class="comment">//... 생략</span></span><br><span class="line">    &#125; <span class="keyword">while</span> ((current = next));</span><br><span class="line">  &#125; <span class="keyword">while</span> (dirty || asyncQueue.length);</span><br><span class="line"></span><br><span class="line">  clearPhase();</span><br><span class="line">  <span class="comment">// [Start] $digest가 호출된 count 확인</span></span><br><span class="line">  <span class="built_in">console</span>.timeEnd(<span class="string">"digest time"</span>);</span><br><span class="line">  <span class="built_in">console</span>.count(<span class="string">"[Digest count]"</span>);</span><br><span class="line">  <span class="comment">// [End] $digest가 호출된 count 확인</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/12/02/improve-angular1-digestloop/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Rxjs-활용기2</title>
      <link>http://sculove.github.io/blog/2016/11/19/rxjs-apply2/</link>
      <guid>http://sculove.github.io/blog/2016/11/19/rxjs-apply2/</guid>
      <pubDate>Sat, 19 Nov 2016 12:23:23 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Deview2016 &lt;a href=&quot;https://deview.kr/2016/schedule#session/137&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Angular2 VS 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Deview2016 <a href="https://deview.kr/2016/schedule#session/137" rel="external nofollow noopener noreferrer" target="_blank">Angular2 VS React, React VS Angular2</a> 발표에서도<br>RxJS를 언급했지만, 지금까지도, <code>RxJS를 왜 Angular2가 도입했는가</code>에 대한 이유는 모르겠다.</p><p>이를 알아보기 위해,<br>Angular2 프로젝트를 하면서, RxJS를 가급적 많이 사용하고 있는데,<br>그 중 하나 느낀 점이 있어 몇자 끄적여 본다.</p><h3 id="왜-Angular2는-RxJS를-도입했는가"><a href="#왜-Angular2는-RxJS를-도입했는가" class="headerlink" title="왜 Angular2는 RxJS를 도입했는가?"></a>왜 Angular2는 RxJS를 도입했는가?</h3><p>일반적으로 Angular2를 사용하게 되면, 화면에 표현되는 요소는 Component로 만들고,<br>실제 데이터를 가져오는 작업은 Service에서 담당한다.<br>이 둘의 관계를 RxJS의 Observable 객체를 통해 subscribe로 연결된다.<br>좀 간단히 보면, 다음 그림과 같다.</p><img src="/blog/2016/11/19/rxjs-apply2/component_service.png"><p>Component와 Service 간의 구조에서 RxJS는 둘 사이를 이어주는 다리가 되고,<br>단방향의 데이터를 가져오는데 결합도가 약하게 연결된다.</p><p>이 말을 좀 풀어서 쓰면,<br>Component에서는 Service를 DI(Dependency Injection)로 주입받고,<br>주입된 상태에서 데이터를 가져오는 것은 Observable 객체로 연결이 된다는 말이다.<br>이렇게 되면 Component 입장에서는 주입된 Service의 메소드(foo)만 알면 된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;&#125;)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AppComponent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="comment">// DI로 service 주입</span></span><br><span class="line">  construnctor(service: Service) &#123;</span><br><span class="line">    <span class="keyword">this</span>.service</span><br><span class="line">      .foo()</span><br><span class="line">      <span class="comment">// operator 적용</span></span><br><span class="line">      <span class="comment">// filter(...)</span></span><br><span class="line">      <span class="comment">// map(...)</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      .subscribe(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 데이터를 받음.</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Injectable()</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Service</span> </span>&#123;</span><br><span class="line">  foo(): Observable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>또한, Service에서는 Component와의 연결을 Observable로 사용하기 위해, 메소드의 반환값을 Observable로 사용한다.<br>반환값이 Observable이기 때문에, RxJS의 operator를 적용하면, Service가 주는 데이터를 변경하거나, 무시하거나, 기타 등등의 작업들을 Component가 할 수 있다.</p><blockquote><p>즉, Angular2에서 RxJS를 사용하면 Component가 갑이되고, Service가 을이 되는 것이다.</p></blockquote><p>예전에는 Service가 주는 데이터만 가지고 처리했다면, 이제는 Component가 데이터의 처리를 결정할수 있게 된 것이다.<br>흔히 이를 <code>Push방식</code>의 장점이라고 이야기 한다.</p><p>그럼 RxJS를 사용하면, 단순히 갑과 을의 관계가 바꿔서 좋다는 말인가? 좋긴하다.<br>하지만, 그렇다고 이게 RxJS를 사용하는 이유라고 보기에는 납득이 안된다.<br>더 해봐야겠다.</p><h2 id="RxJS와-Typescript-의-캐미"><a href="#RxJS와-Typescript-의-캐미" class="headerlink" title="RxJS와 Typescript 의 캐미"></a>RxJS와 Typescript 의 캐미</h2><p>Angular2프로젝트를 하면서 확실하게 안 사실이 있다.<br>바로 RxJS와 Typescript의 캐미(chemi)이다.</p><p>프로젝트를 하다보면 알겠지만, 앞에서 보여준 그림처럼 Component와 Service간의 관계가 1:1인 상황은 많지 않다.<br>하나의 Component에서 여러개의 Service를 사용하기도 하고, 하나의 Service와 여러개의 Component가 연결되어 있기도 하다.<br>또한, Service에서 다른 Service와 연결되어 있기도 한다.</p><img src="/blog/2016/11/19/rxjs-apply2/complex.png"><p>Component와 Service간에는 항상 데이터들이 흐르게 되는데. 이때 전달되는 데이터를 따라가기는 쉽지 않다.<br>물론, 오늘 개발한 코드라면 아주 쉽게 따라 갈수 있겠지만,<br>개발한 코드가 몇 달 전이거나, 내가 아닌 다른 이가 개발한 코드라면, 데이터 흐름을 따라가는 것은 쉬운일이 아니다.</p><p>하지만, 우리는 개발자이니깐 이런 것쯤은 충분히 이겨낼수 있다고 생각한다.<br>왜? 우린 프로니깐 ㅋㅋ</p><p>그런데 문제는 RxJS로 연결 될 경우, 이 Operator에 의해 중간 중간 전달되는 데이터가 변형이 된다는 것이다.<br>바로, 이런식으로…</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.service</span><br><span class="line">  .foo()</span><br><span class="line">  .map(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> somthingFn(x);</span><br><span class="line">  &#125;)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">x</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 데이터를 받음.</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>만약, Javascript의 역량을 최대한으로 끌어올려서 데이터를 간결하게(?) 변형(?) 시킨다면,<br>무슨 데이터가 왔는지 또는 넘겨진 데이터의 속성이 무었인지 확인하기가 어렵다.</p><p>하지만. RxJS와 Typescript가 만나면 상황은 좀 달라진다.</p><figure class="highlight ts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.service</span><br><span class="line">  .foo()</span><br><span class="line">  .map(<span class="function">(<span class="params">x: Student</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> somthingFn(x);</span><br><span class="line">  &#125;)</span><br><span class="line">  .subscribe(<span class="function">(<span class="params">x: SmartStudent</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 데이터를 받음.</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>Student 데이터를 받아서, SmartStudent 데이터로 변경했다는 것을 알 수 있다.<br>한 눈에 데이터가 어떻게 변했는지바로 확인 가능하다.<br>만약, vscode와 같은 훌륭한 IDE툴이 있다면.데이터의 속성이 또 어떤 것인지 바로 파악할수 있다.</p><blockquote><p>그래서 만약, RxJS를 사용한다면, 꼭! Typescript와 함께하는 걸 추천한다.</p></blockquote><p>Angular2가 RxJS를 왜 도입했는지에 대해서는 아직도 잘 모르겠다.<br>하지만, Typescript와 RxJS의 캐미가 정말 짱 좋다는 사실은 확인했다.</p><p>분명, RxJS와 Angular2의 캐미도 확인할 수 있으니라 본다.ㅋㅋ</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/11/19/rxjs-apply2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>아이의 시선</title>
      <link>http://sculove.github.io/blog/2016/11/19/childview/</link>
      <guid>http://sculove.github.io/blog/2016/11/19/childview/</guid>
      <pubDate>Sat, 19 Nov 2016 11:36:59 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;집에서 아이와 같은 입장에서.&lt;br&gt;같은 수준으로 많이 놀아주려고 노력하는 아빠라고 지금까지 생각해 왔는데,&lt;br&gt;실제로 내가 내 아이를 얼마나 이해하고 있는지 의심이 간다.&lt;/p&gt;
&lt;p&gt;집에서 요즘은 종종 그림 게임을 한다.&lt;br&gt;엄마가 스무고
        
      
      </description>
      
      <content:encoded><![CDATA[<p>집에서 아이와 같은 입장에서.<br>같은 수준으로 많이 놀아주려고 노력하는 아빠라고 지금까지 생각해 왔는데,<br>실제로 내가 내 아이를 얼마나 이해하고 있는지 의심이 간다.</p><p>집에서 요즘은 종종 그림 게임을 한다.<br>엄마가 스무고개 식의 문제를 내면,<br>나랑 아들이 그림을 그려서 정답을 맞추는 게임이다.</p><p>아이와하는 게임에서 감칠맛 나게 져주는게 목적이기 때문에,<br>최대한 성의는 있데, 답을 못 맞추어야한다.<br>그런데 이 게임은 실제로 내가 답 맞추기가 어렵기 때문에, 리얼리티가 더 살아서 그런지.<br>아이가 더 좋아한다.</p><p>오늘 문제 중 기억에 남는 것은 이 문제이다.</p><h3 id="“아이가-가장-좋아하는-것은-”"><a href="#“아이가-가장-좋아하는-것은-”" class="headerlink" title="“아이가 가장 좋아하는 것은?”"></a>“아이가 가장 좋아하는 것은?”</h3><p>나의 답은 당연. <code>터닝메카드</code><br>이번에는 앞에서 아이가 많이 맞추었기 때문에 긴장감을 더하기 위해서 정답을 그렸다.<br>그림은 가급적 조잡하게 해서 아이의 자존심을 살려주고, 답은 내가 맞추는 식으로 계획했다.</p><img src="/blog/2016/11/19/childview/father.jpg"><p>헉….<br>그런데 아이의 답이 압권이다.</p><img src="/blog/2016/11/19/childview/sun.jpg"><p>바로 <code>엄마</code>를 그런 것이었다.</p><p>아빠가 좋다고 할때는 언제고 엄마를 그렸냐? 라는 작은 배신감과 함께.<br>내가 내 아들이 좋아하는 걸 착각하고 있었구나 라는 상실감이 함께 엄습해 왔다.</p><p>오히려 터닝메카드를 그린 내 손이 더 부끄러웠다.<br>대다수 부모들이 그렇지만, 내가 내 아이가 뭘 좋아하는지. 어떤 생각을 하고 있는지는<br>내가 잘 알고 있다고 생각했는데. 착각 중에 착각을 하고 있었나보다.</p><p>그동안은 돌이켜 생각해보면, ‘우리 아이는 이럴꺼야’라는 내 생각만으로 아이들을 다루어 왔던 것 같기도하다.<br>앞으로는 내 생각보다 아이의 생각을 먼저 물어보도록 노력해야겠다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/11/19/childview/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular2 정식이후, 지금까지 정리</title>
      <link>http://sculove.github.io/blog/2016/11/14/after-angular-release/</link>
      <guid>http://sculove.github.io/blog/2016/11/14/after-angular-release/</guid>
      <pubDate>Mon, 14 Nov 2016 11:30:21 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;오늘은 Angular2 정식릴리즈 이후, 지금까지 어떻게 변해 왔고, 앞으로 어떻게 변할지에 대해 간단히 살펴보자.&lt;/p&gt;
&lt;h2 id=&quot;Release&quot;&gt;&lt;a href=&quot;#Release&quot; class=&quot;headerlink&quot; title=&quot;Releas
        
      
      </description>
      
      <content:encoded><![CDATA[<p>오늘은 Angular2 정식릴리즈 이후, 지금까지 어떻게 변해 왔고, 앞으로 어떻게 변할지에 대해 간단히 살펴보자.</p><h2 id="Release"><a href="#Release" class="headerlink" title="Release"></a>Release</h2><p>Angular2는 2016년 9월 14일 이후, 지금까지 꾸준한 업데이트로 빠르게 변해가고 있다. 총 4번의 patch가 이루어졌으며, 1번의 minor 버전이 업데이트 되었다. 현재는 2번째 minor 업데이트가 진행 중에 있다.</p><ul><li>2.0.0 릴리즈 (2016.09.14)</li><li>2.0.1 릴리즈 (2016.09.23)</li><li>2.0.2 릴리즈 (2016.10.05)</li><li>2.1.0 릴리즈 (2016.10.12)</li><li>2.1.1 릴리즈, 2.2.0-beta.0 (2016.10.20)</li><li>2.1.2 릴리즈, 2.2.0-beta.1 (2016.10.27)</li><li>2.2.0-rc0 (2016.11.02)</li></ul><p>이렇게 Angular2가 빠르게 발전해 나가고 있는 이유 중에 하나는 중소기업에 버금가는 막대한 인력이 이 프로젝트를 진행하고 있기 때문이다.</p><p>Angular의 창시자 Miško Hevery 외에 6명의 리더가 존재하고, 25명의 구글러가 개발자로 있다. 더불어, 30명의 커뮤니티 인력이 주요 개발자로 포진해 있다. 그 외에도 300여명의 Contributer가 github 상에 존재한다.<br><a href="https://angular.io/about/" rel="external nofollow noopener noreferrer" target="_blank">https://angular.io/about/</a></p><img src="/blog/2016/11/14/after-angular-release/angular.png"><p>이를 경제적인 가치(?)로 환산한다면, 어마어마한 금액이 될 것으로 보인다.<br>돈도 될 것 같지 않은 FE 프레임워크에 왜 구글은 이렇게 막대한 자원을 투입하고 있을까? 구글입장에서는 푼돈인 건가? 아니면, 무슨 심오한 뜻이 있지 않을까?</p><p>Android OS와 같은 플랫폼 전쟁을 FE에서도 하려는 것인가?<br>우매한 나로서는 당췌 모르겠다. ㅠㅠ</p><p>하지만, 푼돈이 아니라면…아마 구글이 Angular2에 기대하는 바는 굉장히 클 것으로 보인다.<br>실제 그 꿈은 실로 원대하다.</p><h2 id="Release-정책"><a href="#Release-정책" class="headerlink" title="Release 정책"></a>Release 정책</h2><p>Angular는 정식 버전을 공개하면서, 프레임워크 운영 정책에 대한 이야기도 함께 공개를 했다.<br><a href="http://angularjs.blogspot.kr/2016/10/versioning-and-releasing-angular.html?view=classic" rel="external nofollow noopener noreferrer" target="_blank">http://angularjs.blogspot.kr/2016/10/versioning-and-releasing-angular.html?view=classic</a></p><p>우선, Angular2의 버전 규칙을 기본적으로 Semantic Versioning(<code>MAJOR.MINOR.PATCH</code>)을 사용하기로 하였다. 더불어, 6개월 단위로 Major 업그레이드를 한다고 공개했다.<br>이 말은, 6개월 마다 Angular3, Angular4, Angular5를 내놓겠다는 이야기이다.</p><p>아 갑자기 머리가 아프다.</p><h4 id="Angular1에서-Angular2로-왔더니-다시-3-4-5-…을-내-놓겠다고"><a href="#Angular1에서-Angular2로-왔더니-다시-3-4-5-…을-내-놓겠다고" class="headerlink" title="Angular1에서 Angular2로 왔더니 다시, 3,4,5,…을 내 놓겠다고?"></a>Angular1에서 Angular2로 왔더니 다시, 3,4,5,…을 내 놓겠다고?</h4><p>하지만, 그렇게 걱정하지 않아도 된다. React는 0.14.0에서 15.0.0으로 바꾸지 않았던가? Angular2도 3,4,5의 연장선에 있기 때문에 새로운 것이 아니다.</p><img src="/blog/2016/11/14/after-angular-release/angular-version.png"><p>또한, 릴리즈도 정말 쉬지 않고 계속한다. 매주 patch 릴리즈를 하고, 3개월 동안 3번의 minor 릴리즈를 하고, 이후 2달 간은 1개의 major 릴리즈를 한다.</p><img src="/blog/2016/11/14/after-angular-release/angular-release.png"><h2 id="앞으로의-방향성"><a href="#앞으로의-방향성" class="headerlink" title="앞으로의 방향성"></a>앞으로의 방향성</h2><p>앞으로 Angular는 다음 작업들에 집중한다고 공개했다.<br><a href="http://angularjs.blogspot.kr/2016/09/angular2-final.html?view=classic" rel="external nofollow noopener noreferrer" target="_blank">http://angularjs.blogspot.kr/2016/09/angular2-final.html?view=classic</a></p><ul><li>안전성 향상, 가이드와 예제 보강,</li><li>Angular : Animation 작업 진행,</li><li>WebWorker Experimental API를 Stable화 하는 작업</li><li>Angular Material2, Angular Universal에 대한 개발 진행</li><li>성능 향상, 모듈 경량화<blockquote><p>최근 Angular3에 대한 기사에서는 강력한 IDE 지원과 25% 감소된 템플릿 코드를 생산한다고 이야기 하고 있다.<br><a href="http://www.infoworld.com/article/3139891/javascript/angular-3-is-hot-on-the-heels-of-angular-2.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.infoworld.com/article/3139891/javascript/angular-3-is-hot-on-the-heels-of-angular-2.html</a></p></blockquote></li></ul><h4 id="그래서…"><a href="#그래서…" class="headerlink" title="그래서…"></a>그래서…</h4><p>현재 구글의 행보로 앞으로를 추측해 본다면, Angular2의 갈길은 아직 멀어 보인다. 또한, 그 앞날을 예측하기는 더더구나 어려워 보인다.</p><p>하지만, Angular1과 같이 자사 서비스에 쓰지 않는 프레임워크를 만들고 있는 것 같지는 않다. 이번에는 꼭! 구글에서 쓰는 프레임워크를 만들려는 확고한 의지가 보인다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/11/14/after-angular-release/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Rxjs 활용기1</title>
      <link>http://sculove.github.io/blog/2016/11/04/rxjs-apply1/</link>
      <guid>http://sculove.github.io/blog/2016/11/04/rxjs-apply1/</guid>
      <pubDate>Fri, 04 Nov 2016 02:14:26 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;RxJS를 협업 아닌 협업에서 조금씩 쓰고 있다.&lt;br&gt;오버엔지니어링이라는 생각을 떨쳐버릴 수 없지만, 또 한편으로는 꽤 괜찮다라는 느낌 또한 든다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;현실적인 활용도와 이상적인 개념 사이에서 줄다리기를 하고 있
        
      
      </description>
      
      <content:encoded><![CDATA[<p>RxJS를 협업 아닌 협업에서 조금씩 쓰고 있다.<br>오버엔지니어링이라는 생각을 떨쳐버릴 수 없지만, 또 한편으로는 꽤 괜찮다라는 느낌 또한 든다.</p><blockquote><p>현실적인 활용도와 이상적인 개념 사이에서 줄다리기를 하고 있는 느낌이다.</p></blockquote><p>지금은 RxJS의 활용도를 직접 검증도 해보고 싶은 마음도 있고,<br>간만에 느끼는 개발의 재미도 맛볼 수 있는 영역이라 그 끈을 놓지 않고 있다.</p><h2 id="distinctUntilChanged-너는-누구냐"><a href="#distinctUntilChanged-너는-누구냐" class="headerlink" title="distinctUntilChanged 너는 누구냐?"></a>distinctUntilChanged 너는 누구냐?</h2><p>RxJS의 operator중에 흔하게 쓰이는 <code>distinctUntilChanged</code> 메소드에 대한 약간의 소감을 적어보려고 한다.</p><img src="/blog/2016/11/04/rxjs-apply1/distinctUntilChanged.png"><p><a href="http://rxmarbles.com/#distinctUntilChanged" rel="external nofollow noopener noreferrer" target="_blank">http://rxmarbles.com/#distinctUntilChanged</a></p><p>우선 이 함수는 우리가 프로그래밍을 할때 항상 고민하는 일.<br>중복호출? 중복 전달 등에 대한 문제를 아주 손쉽게 해결해 준다.</p><p>distinctUntilChanged 함수는 기본적으로 distinctUntilChanged()를 호출해서 사용 할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rx.Observable.of(<span class="number">10</span>, <span class="number">30</span>, <span class="number">30</span>, <span class="number">30</span>)</span><br><span class="line">  .distinctUntilChanged()</span><br><span class="line">  .subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p>결과는 예상했던 것처럼, <code>10, 30</code> 만 나온다. 좋다. 쉽다!</p><h2 id="Rxjs-버전마다-달라요"><a href="#Rxjs-버전마다-달라요" class="headerlink" title="Rxjs 버전마다 달라요~"></a>Rxjs 버전마다 달라요~</h2><p>하지만, 다음과 같은 코드인 경우, rxjs의 버전에 따라 다르게 동작한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rx.Observable.of(&#123; <span class="attr">value</span>: <span class="number">10</span> &#125;, &#123; <span class="attr">value</span>: <span class="number">30</span> &#125;, &#123; <span class="attr">value</span>: <span class="number">30</span> &#125;, &#123; <span class="attr">value</span>: <span class="number">30</span> &#125;)</span><br><span class="line">  .distinctUntilChanged()</span><br><span class="line">  .subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p>위의 코드는 rxjs4에서는 정상 동작하지만, rxjs5에서는 primitive 타입이 아닌 경우에는 정상적으로 동작하지 않는다. 된장!</p><h2 id="이렇게-되는-이유는-rxjs의-기본-compare-함수가-rxjs4와-rxjs5가-다르기-때문이다"><a href="#이렇게-되는-이유는-rxjs의-기본-compare-함수가-rxjs4와-rxjs5가-다르기-때문이다" class="headerlink" title="이렇게 되는 이유는 rxjs의 기본 compare 함수가 rxjs4와 rxjs5가 다르기 때문이다."></a>이렇게 되는 이유는 rxjs의 기본 compare 함수가 rxjs4와 rxjs5가 다르기 때문이다.</h2><p>rxjs4의 기본 compare함수는 다음과 같다.</p><blockquote><p><a href="https://github.com/Reactive-Extensions/RxJS/blob/master/dist/rx.all.js#L554-L562" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Reactive-Extensions/RxJS/blob/master/dist/rx.all.js#L554-L562</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baseIsEqual</span>(<span class="params">value, other, ...</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (value === other) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (value == <span class="literal">null</span> || other == <span class="literal">null</span> || (!isObject(value) &amp;&amp; !isObjectLike(other))) &#123;</span><br><span class="line">    <span class="keyword">return</span> value !== value &amp;&amp; other !== other;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> baseIsEqualDeep(value, other, baseIsEqual, ...);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적으로 값이나 reference 값을 비교하고, 만약, reference 값이 같다면, 깊은 탐색을 한다.</p><p>반면, rxjs5의 기본 compare 함수는 다음과 같다.</p><blockquote><p><a href="https://github.com/ReactiveX/rxjs/blob/master/src/operator/distinctUntilChanged.ts#L53-L55" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ReactiveX/rxjs/blob/master/src/operator/distinctUntilChanged.ts#L53-L55</a></p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">private compare(x: any, <span class="attr">y</span>: any): boolean &#123;</span><br><span class="line">    <span class="keyword">return</span> x === y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>값이나 reference 값을 비교하는 간단한 함수이다.</p><p>이렇게 한 이유는 rxjs5가 추구하는 <code>Better performance</code>를 위한 조치로 보인다. 하지만…. 사용자는 헷갈린다.</p><p>그래서 rxjs5에서는 primitive 타입이 아닌 경우에는 immutable한 객체를 데이타로 활용 해야 효과적이다.</p><blockquote><p>즉, 객체의 reference가 변경되면, 값이 변경되었고, 그렇지 않으면 변경되지 않았다는 대전제가 수반되어야한다.</p></blockquote><p>객체를 매번 immutable하게 만들려고 하면 결국에는 복사라는 <code>불필요한 과정</code>을 거쳐야만 한다. 비교하고자 하는 객체가 크면 클수록 그 비용은 더 크다.<br>모델 자체가 간단할 때는 크게 문제가 되지 않는다. 하지만, 좀 큰 모델 객체가 변경되었을 때는 어떻게 하는게 좋을까?<br>물론, <a href="https://facebook.github.io/immutable-js/" rel="external nofollow noopener noreferrer" target="_blank">immutable.js</a> 같은 라이브러리를 사용해서 그 비용을 줄있 수는 있다.<br>하지만, 역시 비용은 비용이다.</p><h2 id="distinctUntilChanged를-잘-사용해보자"><a href="#distinctUntilChanged를-잘-사용해보자" class="headerlink" title="distinctUntilChanged를 잘 사용해보자."></a>distinctUntilChanged를 잘 사용해보자.</h2><p>rxjs5의 distinctUntilChanged는 compare함수와 keySelector 함수를 파라미터로 받아 들어서 보다 효과적으로 처리할 수 있다. 물론, rxjs4도 가능하다. 다만, 파라미터의 순서가 다르다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rxjs4</span></span><br><span class="line">distinctUntilChanged(keySelector: <span class="function"><span class="keyword">function</span>, <span class="title">comparer</span>: <span class="title">function</span>);</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">// <span class="title">rxjs5</span></span></span><br><span class="line"><span class="function"><span class="title">distinctUntilChanged</span>(<span class="params">compare?: (x: K, y: K</span>) =&gt; <span class="title">boolean</span>, <span class="title">keySelector</span>?: (<span class="params">x: T</span>) =&gt; <span class="title">K</span>)</span></span><br></pre></td></tr></table></figure><p>compare 함수는 <code>이전 키와 이후 키를 비교 하는 함수</code>이고,<br>keySelector 함수는 <code>비교할 키가 무엇인지를 명시하는 함수</code>이다.<br>rxjs5에서는 다음과 같이 작성하면 이러한 문제를 손쉽게 해결 할 수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Rx.Observable.of(&#123; <span class="attr">value</span>: <span class="number">10</span> &#125;, &#123; <span class="attr">value</span>: <span class="number">30</span> &#125;, &#123; <span class="attr">value</span>: <span class="number">30</span> &#125;, &#123; <span class="attr">value</span>: <span class="number">30</span> &#125;)</span><br><span class="line">  .distinctUntilChanged(<span class="function">(<span class="params">p, n</span>) =&gt;</span> p === n, x =&gt; x.value)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p>결과는 예상했던 것처럼, <code>{value:10}, {value:30}</code> 만 나온다. 역시나, 좋다.</p><h3 id="keySelector를-이용한-꽁수"><a href="#keySelector를-이용한-꽁수" class="headerlink" title="keySelector를 이용한 꽁수"></a>keySelector를 이용한 꽁수</h3><p>위와 같이 키(value)가 명확하다면, 문제가 되지 않지만, 만약, 키로 정할 값이 명확하지 않고, 모델의 구조가 복잡하다면, keySelector 함수를 구현하기가 어렵다.</p><p>이런 경우는 개발 꽁수 이지만, 키를 자체적으로 만들어서 사용하는 방법이 있다.</p><p>예를 들어, 여러 셀들을 포함하는 spreadsheet 모델이 다음과 같고, rows안의 특정 cell의 값(value)이나, cell의 개수만 변경되는 경우라면, 사용자 고유키를 만들수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spreadsheet = &#123;</span><br><span class="line">  rows: [</span><br><span class="line">    &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">0</span>, <span class="attr">value</span>: <span class="string">"A"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">"B"</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="string">"C"</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>다음과 같이 row의 length와 cell의 값(value)으로 임의의 고유키를 만들수 있다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x.rows.length + <span class="string">"_"</span> + x.rows.reduce( <span class="function">(<span class="params">acc, v</span>) =&gt;</span> &#123;</span><br><span class="line">        acc.push(v.value);</span><br><span class="line">        <span class="keyword">return</span> acc;</span><br><span class="line">    &#125;, []).join(<span class="string">"_"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>immutable을 사용하는 것도 좋은 방법이지만, 이런 개발 꽁수를 이용하면, <code>복사라는 비용없이</code> 객체의 변경여부를 확인할 수 있다.</p><p>실제 생성된 코드는 다음과 같다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">Rx.Observable.of(</span><br><span class="line">  &#123;</span><br><span class="line">    rows: [</span><br><span class="line">      &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">0</span>, <span class="attr">value</span>: <span class="string">"A"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">"B"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="string">"C"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    rows: [</span><br><span class="line">      &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">0</span>, <span class="attr">value</span>: <span class="string">"A"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">"B"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="string">"C"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    rows: [</span><br><span class="line">      &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">0</span>, <span class="attr">value</span>: <span class="string">"A"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">1</span>, <span class="attr">value</span>: <span class="string">"B_changed"</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">row</span>: <span class="number">0</span>, <span class="attr">col</span>: <span class="number">2</span>, <span class="attr">value</span>: <span class="string">"C"</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line">  .distinctUntilChanged(<span class="literal">null</span>, x =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      x.rows.length +</span><br><span class="line">      <span class="string">"_"</span> +</span><br><span class="line">      x.rows</span><br><span class="line">        .reduce(<span class="function">(<span class="params">acc, v</span>) =&gt;</span> &#123;</span><br><span class="line">          acc.push(v.value);</span><br><span class="line">          <span class="keyword">return</span> acc;</span><br><span class="line">        &#125;, [])</span><br><span class="line">        .join(<span class="string">"_"</span>)</span><br><span class="line">    );</span><br><span class="line">  &#125;)</span><br><span class="line">  .subscribe(<span class="function"><span class="params">x</span> =&gt;</span> <span class="built_in">console</span>.log(x));</span><br></pre></td></tr></table></figure><p><a href="https://jsbin.com/soluwozoji/edit?js,console" rel="external nofollow noopener noreferrer" target="_blank">https://jsbin.com/soluwozoji/edit?js,console</a></p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/11/04/rxjs-apply1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Chrome Devtools를 이용한 Web Application Memory 분석법</title>
      <link>http://sculove.github.io/blog/2016/10/06/memory/</link>
      <guid>http://sculove.github.io/blog/2016/10/06/memory/</guid>
      <pubDate>Wed, 05 Oct 2016 17:27:48 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;Chrome-Devtools를-이용한-Web-Application-Memory-분석법&quot;&gt;&lt;a href=&quot;#Chrome-Devtools를-이용한-Web-Application-Memory-분석법&quot; class=&quot;headerlink&quot; title
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Chrome-Devtools를-이용한-Web-Application-Memory-분석법"><a href="#Chrome-Devtools를-이용한-Web-Application-Memory-분석법" class="headerlink" title="Chrome Devtools를 이용한 Web Application Memory 분석법"></a>Chrome Devtools를 이용한 Web Application Memory 분석법</h3><img src="/blog/2016/10/06/memory/dontcontrol.png"><p>SPA 개발을 하다보면 겪게 되는 메모리 문제.</p><p>이 문제를 해결하기 위해서 주의해야 할 개발 패턴을 알아보고,<br>Google Chrome Devtool을 이용하여 어떻게 메모리를 Profile 하는지 정리한 자료</p><iframe src="https://sculove.github.io/slides/memory/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe><p>자료 : <a href="https://sculove.github.io/slides/memory/">https://sculove.github.io/slides/memory/</a></p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/10/06/memory/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Jasmine을 이용한 Javascript Test</title>
      <link>http://sculove.github.io/blog/2016/10/06/JavascriptTestUsingJasmine/</link>
      <guid>http://sculove.github.io/blog/2016/10/06/JavascriptTestUsingJasmine/</guid>
      <pubDate>Wed, 05 Oct 2016 17:09:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;Jasmine을-이용한-Javascript-Test&quot;&gt;&lt;a href=&quot;#Jasmine을-이용한-Javascript-Test&quot; class=&quot;headerlink&quot; title=&quot;Jasmine을 이용한 Javascript Test&quot;&gt;&lt;/a&gt;Ja
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Jasmine을-이용한-Javascript-Test"><a href="#Jasmine을-이용한-Javascript-Test" class="headerlink" title="Jasmine을 이용한 Javascript Test"></a>Jasmine을 이용한 Javascript Test</h3><img src="/blog/2016/10/06/JavascriptTestUsingJasmine/jasmine.png"><p><a href="https://sculove.github.io/blog/2016/05/17/JavascriptTest/">JavaScript Test</a> 문서를 작성 후, 실제 테스트를 어떻게 진행해야 하는지에 대해 정리한 문서.</p><h4 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h4><ul><li>테스트는 왜 필요한가?</li><li>테스트를 위한 개발 프로세스</li><li>자주 사용하는 테스트 유형<ul><li>비동기 테스트</li><li>setTimeout 테스트</li><li>Ajax 테스트 (jasmine-ajax)</li><li>DOM 테스트 (jasmine-dom)</li><li>Global 객체 테스트</li></ul></li><li>테스트에 대한 흔한 질문</li></ul><iframe src="https://sculove.github.io/slides/testing/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe><p>자료 : <a href="https://sculove.github.io/slides/testing/">https://sculove.github.io/slides/testing/</a></p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/10/06/JavascriptTestUsingJasmine/#disqus_thread</comments>
    </item>
    
    <item>
      <title>RxJS는 쓸 만한가?</title>
      <link>http://sculove.github.io/blog/2016/08/22/rxjsisusable/</link>
      <guid>http://sculove.github.io/blog/2016/08/22/rxjsisusable/</guid>
      <pubDate>Mon, 22 Aug 2016 14:52:56 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;요즘 개인적으로 관심 있는 주제가 Reactive Programming 이다. 이 Reactive Programming의 구현체(?)에 해당하는 것 중 하나가 바로 RxJS 이다. RxJS는 Angular2에서 사용되고 있다. 조만간 React도
        
      
      </description>
      
      <content:encoded><![CDATA[<p>요즘 개인적으로 관심 있는 주제가 Reactive Programming 이다. 이 Reactive Programming의 구현체(?)에 해당하는 것 중 하나가 바로 RxJS 이다. RxJS는 Angular2에서 사용되고 있다. 조만간 React도 RxJS를 채택할 것이라는 소문(?)도 들린다. 뿐만 아니라, Rx의 Observable은 이미 ES7의 정식 스펙으로 <a href="https://github.com/tc39/proposal-observable" rel="external nofollow noopener noreferrer" target="_blank">제안</a>이 되어 있기도 하다.<br>Front-End 뿐만 아니라, Android에서는 Rx가 필수 유틸이 될 정도로 자리를 잡고 있고, <a href="http://www.slideshare.net/jongwookkim/ndc14-rx-functional-reactive-programming" rel="external nofollow noopener noreferrer" target="_blank">게임 개발</a>에서도 사용하고 있는 것으로 보인다.</p><h3 id="학습의-진입장벽"><a href="#학습의-진입장벽" class="headerlink" title="학습의 진입장벽"></a>학습의 진입장벽</h3><p>개인적으로 Reactive Programming에 대한 학습 진입장벽이 꽤 큰 영역인것 같다.</p><blockquote><p>왜? 바로 명령형, 절차적 프로그래밍 학습에 대한 관성이 우리에게 체화되었기에 그런 것으로 보인다.</p></blockquote><p>학교나 회사에서 우리가 배우고 사용했던 프로그래밍 방식의 대부분은 <code>명령형, 절차적 프로그래밍</code>이었다. 하지만 이 Reactive Programming의 방식은 <code>데이터의 흐름을 나타내는 것</code>에 그 본질이 있다.<br>따라서, 행위에 대해 <code>명령</code>을 하는 것이 아니라, 데이터의 흐름을 <code>선언</code> 하는 것이고, 절차적으로 프로그래밍 하는 것이 아니라, 비동기, 병렬 상황에 대해 개발하는 방식이다.<br>그나마 난 JavaScript 개발자이기에 비동기 상황에 대해서는 익숙하지만, 그래도, 익숙하지 않는 방식이다.<br>한마디로, <code>개념의 전환</code>이 쉽지 않은 것 같다. ㅠㅠ</p><h3 id="RxJS-정말-필요한가"><a href="#RxJS-정말-필요한가" class="headerlink" title="RxJS 정말 필요한가?"></a>RxJS 정말 필요한가?</h3><p>그렇다면, Reactive Programming의 구현체(?)인 RxJS가 정말 FrontEnd 영역에서 필요할까?</p><img src="/blog/2016/08/22/rxjsisusable/rxjs.png"><blockquote><h3 id="의문이다"><a href="#의문이다" class="headerlink" title="의문이다."></a>의문이다.</h3><p>뭔가 의미론적으로는 굉장한 좋은 녀석 같은데, 정말 좋은지 모르겠다.</p></blockquote><p>그래서 아직은 익숙하지 않는 RxJS를 이용하여, 비교적 이벤트나 비동기 상황을 제어할 필요가 있는 캐로셀(flicking) 컴포넌트를 만들어 봤다.</p><h4 id="RxJS-5-0을-사용하여-캐로셀을-만든-예제"><a href="#RxJS-5-0을-사용하여-캐로셀을-만든-예제" class="headerlink" title="RxJS 5.0을 사용하여 캐로셀을 만든 예제"></a>RxJS 5.0을 사용하여 캐로셀을 만든 예제</h4><iframe height="420" scrolling="no" src="//codepen.io/sculove/embed/PzgYxb/?height=420&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/sculove/pen/PzgYxb/" rel="external nofollow noopener noreferrer" target="_blank">flicking (rxjs)</a> by son chan uk (<a href="http://codepen.io/sculove" rel="external nofollow noopener noreferrer" target="_blank">@sculove</a>) on <a href="http://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.</iframe><h4 id="Browser-API를-사용하여-캐로셀을-만든-예제"><a href="#Browser-API를-사용하여-캐로셀을-만든-예제" class="headerlink" title="Browser API를 사용하여 캐로셀을 만든 예제"></a>Browser API를 사용하여 캐로셀을 만든 예제</h4><iframe height="420" scrolling="no" src="//codepen.io/sculove/embed/qNGdWo/?height=420&theme-id=0&default-tab=js,result&embed-version=2" frameborder="no" allowtransparency="true" allowfullscreen="true" style="width: 100%;">See the Pen <a href="http://codepen.io/sculove/pen/qNGdWo/" rel="external nofollow noopener noreferrer" target="_blank">flicking (none rxjs)</a> by son chan uk (<a href="http://codepen.io/sculove" rel="external nofollow noopener noreferrer" target="_blank">@sculove</a>) on <a href="http://codepen.io" rel="external nofollow noopener noreferrer" target="_blank">CodePen</a>.</iframe><h3 id="캐로셀-flicking-의-동작-방식"><a href="#캐로셀-flicking-의-동작-방식" class="headerlink" title="캐로셀(flicking)의 동작 방식"></a>캐로셀(flicking)의 동작 방식</h3><p>비교에 앞서 캐로셀(flicking) 기능 구현을 위해 필요한 핵심 로직만 좀 살펴보자.</p><ol><li>touchstart(mousedown) 발생 시</li></ol><ul><li>동작하고 있다는 표시(playing)을 한다. 그리고, 현재 선택 한 좌표(start)를 저장한다.</li></ul><ol start="2"><li>touchmove(mousemove) 발생 시</li></ol><ul><li>playing 시에만 이벤트가 발생하고, touchstart(mousedown)에서 발생한 좌표를 기준으로 이동한 좌표(distance)를 구한다.</li><li>이동한 좌표 만큼 패널을 움직인다.</li></ul><ol start="3"><li>touchend(mouseup) 발생 시</li></ol><ul><li>touchstart(mousedown)에서 발생한 좌표를 기준으로 이동한 좌표(distance)를 구한다. 이동한 좌표에 따라 애니메이션으로 판을 움직일지를 결정한다.</li><li>애니메이션으로 움직일 필요가 있을 경우, 애니메이션으로 판을 움직이고, playing 여부를 false로 지정한다.</li><li>판이 다음이나, 전 판으로 이동시, 순환을 위해 판의 좌표를 변경한다.</li></ul><p>위에서 언급한 것처럼 간단한 기능이지만, 이벤트 흐름이 이렇게 동작할 거라고 이해를 해야만 개발을 할 수 있다. 또한 애니메이션 구현도 해야만 한다.</p><h3 id="중요한-로직-비교"><a href="#중요한-로직-비교" class="headerlink" title="중요한 로직 비교"></a>중요한 로직 비교</h3><h4 id="touchstart-touchmove-touchend-이벤트-처리"><a href="#touchstart-touchmove-touchend-이벤트-처리" class="headerlink" title="touchstart - touchmove - touchend 이벤트 처리"></a>touchstart - touchmove - touchend 이벤트 처리</h4><h5 id="RxJS"><a href="#RxJS" class="headerlink" title="RxJS"></a>RxJS</h5><p>touchstart이벤트 발생시, do로 작업을 하고, move 이벤트 발생시에는 start좌표와의 차이(distance)의 데이터로 변환하고, 이 데이터의 변경이 있을 경우, _renderMove 함수로 실제 패널을 움직인다. 이 작업은 touchend 이벤트가 끝나는 순간까지 stream을 발생 하고, 이를 계속 반복한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// change$</span></span><br><span class="line">Rx.Observable.fromEvent(el, EVENTS.start)</span><br><span class="line">  .map(getPos)</span><br><span class="line">  .do(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.playing = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">this</span>.startSubject.next(v);</span><br><span class="line">  &#125;)</span><br><span class="line">  .flatMap(<span class="function"><span class="params">v</span> =&gt;</span></span><br><span class="line">    Rx.Observable.combineLatest(</span><br><span class="line">      <span class="keyword">this</span>.startSubject,</span><br><span class="line">      Rx.Observable.fromEvent(el, EVENTS.move).map(getPos),</span><br><span class="line">      (s, m) =&gt; m - s</span><br><span class="line">    )</span><br><span class="line">  )</span><br><span class="line">  .distinctUntilChanged()</span><br><span class="line">  .do(<span class="function"><span class="params">v</span> =&gt;</span> <span class="keyword">this</span>._renderMove(v))</span><br><span class="line">  .takeUntil(<span class="keyword">this</span>.end$)</span><br><span class="line">  .repeat()</span><br><span class="line">  .subscribe();</span><br></pre></td></tr></table></figure><h5 id="Browser-API"><a href="#Browser-API" class="headerlink" title="Browser API"></a>Browser API</h5><p>반면, RxJS를 사용하지 않은 코드는 데이터의 흐름을 코드만 보고 파악하기가 어렵다. 더불어, 별도의 변수(start, distance, …) 값들을 유지하고, onEnd 이벤트 핸들러에서 변수를 초기화 해주는 작업도 해줘야한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.start = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">this</span>.distance = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">this</span>.onStart = el.addEventListener(EVENTS.start, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">this</span>.playing = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">this</span>.start = getPos(e);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.onMove = el.addEventListener(EVENTS.move, e =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.start === <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">  <span class="keyword">let</span> distance = getPos(e) - <span class="keyword">this</span>.start;</span><br><span class="line">  <span class="keyword">this</span>.distance !== distance &amp;&amp; <span class="keyword">this</span>._renderMove(distance);</span><br><span class="line">  <span class="keyword">this</span>.distance = distance;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.onEnd = el.addEventListener(EVENTS.end, e =&gt; &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  <span class="keyword">this</span>.start = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">this</span>.distance = <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="Animation-처리"><a href="#Animation-처리" class="headerlink" title="Animation 처리"></a>Animation 처리</h4><h5 id="RxJS-1"><a href="#RxJS-1" class="headerlink" title="RxJS"></a>RxJS</h5><p>touchend(mouseup) 이벤트가 발생할 때에 end 좌표와 start시의 좌표. 그리고 이동할 거리 등을 기준으로 <code>from, to, duration 값</code>을 계산한다.<br>계산된 정보는 _crateAnimation$에 전달 되어, 실제 애니메이션이 동작한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">_createAnimation$(<span class="keyword">from</span>, to, duration) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  Rx.Observable.generate(</span><br><span class="line">    performance.now(),</span><br><span class="line">    x =&gt; x &lt;= startTime + duration,</span><br><span class="line">    x =&gt; performance.now(),</span><br><span class="line">    x =&gt; (x-startTime)/duration,</span><br><span class="line">    Rx.Scheduler.animationFrame</span><br><span class="line">  )</span><br><span class="line">  .map(<span class="function"><span class="params">p</span> =&gt;</span> <span class="keyword">from</span> + (p * (next ? -distance: distance)))</span><br><span class="line">  .concat(Rx.Observable.of(to))</span><br><span class="line">  .distinctUntilChanged()</span><br><span class="line">  .do(<span class="function"><span class="params">v</span> =&gt;</span> <span class="keyword">this</span>._renderMove(v))</span><br><span class="line">  .last()</span><br><span class="line">  .do(<span class="function"><span class="params">v</span> =&gt;</span> &#123;</span><br><span class="line">    v !==<span class="number">0</span> &amp;&amp; <span class="keyword">this</span>._renderRearrange(next);</span><br><span class="line">    <span class="keyword">this</span>.playing = <span class="literal">false</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>Observable.generater를 이용하여 애니메이션 좌표가 발생하고, 이 좌표에 따라, _renderMove에 의해 실제 패널이 이동된다. 이 패널의 이동이 완료되면, 패널 이동 여부에 따라 _renderRearrange에 의해 패널의 위치가 재정의 된다. 지금 느낄지 모르겠지만, 꽤나 선언적이다.</p><h5 id="Browser-API-1"><a href="#Browser-API-1" class="headerlink" title="Browser API"></a>Browser API</h5><p>RxJS와 마찬가지로 touchend(mouseup) 이벤트가 발생할 때에 end 좌표와 start시의 좌표. 그리고 이동할 거리 등을 기준으로 <code>from, to, duration 값</code>을 계산한다.<br>계산된 정보는 _runAnimation에 전달 되어, 실제 애니메이션이 동작한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">_runAnimation(<span class="keyword">from</span>, to, duration) &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">let</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">let</span> startTime = performance.now();</span><br><span class="line">  <span class="keyword">let</span> p = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">let</span> pos;</span><br><span class="line">  <span class="keyword">let</span> beforePos = <span class="number">-1</span>;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span> <span class="title">animate</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> x = performance.now();</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= startTime + duration) &#123;</span><br><span class="line">      self._renderMove(to);</span><br><span class="line">      to !==<span class="number">0</span> &amp;&amp; self._renderRearrange(next);</span><br><span class="line">      self.playing = <span class="literal">false</span>;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = (x-startTime)/duration;</span><br><span class="line">    pos = <span class="keyword">from</span> + (p * (next ? -distance: distance));</span><br><span class="line">    (beforePos !== pos) &amp;&amp; self._renderMove(pos);</span><br><span class="line">    beforePos = pos;</span><br><span class="line">    <span class="built_in">window</span>.requestAnimationFrame(animate);</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RxJS를 사용하지 않는 다음 코드는 앞의 이벤트 보다는 흐름을 알지 못해도 이해하기 쉬운 반면, 값의 변경 여부 확인이나 중간값 계산을 위한 의미론 적으로 불필요한 변수들(beforePos, p, self,..)을 사용하게 된다.</p><h3 id="Front-End에서-RxJS는-필요한가"><a href="#Front-End에서-RxJS는-필요한가" class="headerlink" title="Front-End에서 RxJS는 필요한가?"></a>Front-End에서 RxJS는 필요한가?</h3><p>우선 <code>코드량은 전체적으로 별차이가 없다.</code> 크롬 Timeline을 통해 애니메이션 프레임을 확인해 본 바로는 <code>속도도 별 차이가 없다.</code> 차이가 있다면, RxJS의 호출 스택이 좀 길다는 것 정도이다.<br>물론, PC에서 확인해서 그런지는 모르겠지만, 이건 RxJS를 사용하지 말아야하는 이유가 되지는 못할 것 같다.</p><p>단지 차이가 있다면 보다 선언적으로 프로그래밍이 된 정도? 일까?<br>RxJS의 이해도가 있는 사람은 <code>코드를 통해 의미를 찾을수 있다</code>는 장점이 있는 것 같다. 또한, 기본적으로 제공하는 좋은 operator가 있어서 좀 <code>지저분한 변수들이 없어지는 장점</code>도 있다. 하지만, <code>디버깅면에서는 좀 단점</code>인것 같다. <code>do</code> operator를 통해 확인하는 방법이 최선인것 같다.</p><p>지금 상황에서 RxJS 를 쓸거냐고 누군가가 물어본다면…<br>내 대답은 <code>실시간 채팅</code>이나 <code>실시간 SNS</code> 정도면 모를까. 지금의 웹서비스에 적합할 지는 모르겠다.</p><p>솔직히 지금은 내가 내공이 약해서 잘 모르겠다.<br>지금 짠 코드도 진짜 RxJS를 잘 활용한 것인지도 모르겠다.<br>암튼 더 관심을 가지고 봐야할 주제인 것 같긴하다 ^^;;</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/08/22/rxjsisusable/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular2가 기대되는 이유. Angular2 Rc5 변경 사항</title>
      <link>http://sculove.github.io/blog/2016/08/16/angular-rc5/</link>
      <guid>http://sculove.github.io/blog/2016/08/16/angular-rc5/</guid>
      <pubDate>Tue, 16 Aug 2016 14:09:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;Angular2-rc5-Component에서-ngModule-단위로&quot;&gt;&lt;a href=&quot;#Angular2-rc5-Component에서-ngModule-단위로&quot; class=&quot;headerlink&quot; title=&quot;Angular2 rc5: Comp
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Angular2-rc5-Component에서-ngModule-단위로"><a href="#Angular2-rc5-Component에서-ngModule-단위로" class="headerlink" title="Angular2 rc5: Component에서 ngModule 단위로"></a>Angular2 rc5: Component에서 ngModule 단위로</h3><p>2016년 8월 9일 <a href="https://github.com/angular/angular/tree/2.0.0-rc.5/" rel="external nofollow noopener noreferrer" target="_blank">Angular2 rc5</a>가 발표되었다. Angular2 rc5에서는 전체적으로 구조 자체를 바꾸었다. 기존 Angular1이 module 방식을 채택했던 것에 비해 Angular2는 React와 같이 Component 단위로 구성되었다. 하지만, rc5에서는 다시 예전의 모습으로 돌아왔다.</p><img src="/blog/2016/08/16/angular-rc5/module_component.jpg"><p><code>그렇다면, Angular2는 Component 방식에서 Angular1에서 쓰던 module 방식으로 왜 돌아 왔을까?</code></p><blockquote><p>어떤 기능(feature)을 구현하기에 Component는 너무 작은 단위이다.</p></blockquote><p>하나의 기능(feature)를 개발하기 위해서는 UI를 구성하는 View가 있을 수 있고, 기능을 담당하는 service가 있을 수 있다. 더불어, feature내에서 사용하는 pipe나 directive도 존재할 수 있다.<br>ngModule은 이런 Component, Direcitve, Pipe, serice를 하나로 묶어서 관리 할수 있는 단위이다.<br>각각의 요소들이 ngModule 단위로 묶이다 보니 ngModule 단위의 <code>배포나 관리</code> 또한 편해졌다.<br>더불어, Router에서 ngModule 단위로 <code>Lazy Loading</code>도 가능해 졌다.</p><blockquote><p>ngModule 내에서의 Dependency는 공유된다.</p></blockquote><p>이젠 이전 버전에 무의식적으로 넣었던 <code>module.id</code>도 더 이상 코드에 기술 할 필요가 없고, Component별로 명시하던 <code>directives, pipes, 등</code>도 더 이상 기술 할 필요가 없다.<br>모두 ngModule에 명시하면 된다. 이 방식의 장점은 ngModule에서 dependency를 관리하고, 실제 사용하는 dependency를 한 눈에 다~ 볼 수 있다. 뿐만 아니라, 코드도 더 간결해진다.<br>이렇게 할수 있는 이유는 바로 ngModule이 JavaScript의 module과 같이 module 단위로 scope를 갖기 때문에, ngModule에 명시된 Component들은 ngModule에 명시된 dependencie 객체들(directive, pipe, service, component)을 자유롭게 사용할 수 있다.<br>참고로, Component의 directives, pipes들은 <a href="https://docs.google.com/document/d/1isijHlib4fnukj-UxX5X1eWdUar6UkiGKPDFlOuNy1U/pub#h.5fritim1x5kz" rel="external nofollow noopener noreferrer" target="_blank">depreacted</a> 되었다.</p><p>하지만, 불편한 것도 있다. ngModule에서 쓰는 모든 자원을 declarations이나 providers로 수동으로 명시 해줘야하는 번거로움(?)이 있다. 또한, React와 다르게 Component 기반이 아닌 ngModule 단위의 접근으로 바뀌다 보니, 가벼운 느낌보다도 뭔가 무거워진 느낌도 든다.</p><p>rc5에 대한 자세한 사항은 다음 링크를 확인해보기 바란다.</p><ul><li><a href="https://angular.io/docs/ts/latest/guide/ngmodule.html" rel="external nofollow noopener noreferrer" target="_blank">https://angular.io/docs/ts/latest/guide/ngmodule.html</a></li><li><a href="https://angularjs.blogspot.kr/2016/08/angular-2-rc5-ngmodules-lazy-loading.html" rel="external nofollow noopener noreferrer" target="_blank">https://angularjs.blogspot.kr/2016/08/angular-2-rc5-ngmodules-lazy-loading.html</a></li></ul><h3 id="Angular2는-왜-자꾸-인터페이스를-바꾸는가"><a href="#Angular2는-왜-자꾸-인터페이스를-바꾸는가" class="headerlink" title="Angular2는 왜 자꾸 인터페이스를 바꾸는가?"></a>Angular2는 왜 자꾸 인터페이스를 바꾸는가?</h3><p>기존 rc4에서는 router와 form에 대한 인터페이스를 바꾸더니, 이번에는 Component 기반의 구조에서 ngModule 기반으로 구조 자체를 변경하였다.<br>일반적인 프로세스 단계로 봤을 때, <a href="https://en.wikipedia.org/wiki/Software_release_life_cycle#Release_candidate" rel="external nofollow noopener noreferrer" target="_blank">rc(Release Candidate)</a> 버전은 인터페이스 변경보다는 버그 개선에 포커스가 맞춰져 있지만, Angular2는 rc가 발표될 때마다 대다수 인터페이스를 변경하고 있다.</p><blockquote><p>지금 서비스에 Angular2를 도입하려는 사람들에게는 지극히 비상식적인 일인 것 같지만, 다른 한편으로는 고무적인 일 인것 같다. 물론 개인적인 생각이다.</p></blockquote><p>모든 S/W가 마찬가지겠지만, 특히 프레임워크가 한 번 릴리즈 된 이후, 인터페이스를 변경하는 것은 정말 어려운 일이다. 따라서, 정말 잘 결정해야만 한다. 그러기 위해서는 사용자의 피드백을 중심으로 논의가 이루어져야 하며, 그 논의의 결과가 프레임워크에 반영되어야 할 것이다.<br>Angular2는 이런면에서 사용자의 피드백을 열심히 받고 있는 것 같다. 다양한 의견들에 대한 논의가 이루어지고 있고 이로 인해 Angular2가 변해가고 있다.</p><blockquote><p>ngModule에 대한 어느 사용자의 커멘트 <a href="https://github.com/angular/angular/issues/10552#issuecomment-238819504" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/angular/angular/issues/10552#issuecomment-238819504</a></p></blockquote><p>지금까지의 Angular2의 행보로 본다면, Angular1과 React에서 많은 교훈 점을 찾고자 노력하고 있는 모습이 역력하다.</p><p>React의 단방향 설계와 성능적인 장점 요소를 가져오면서도,<br>Angular1이 가지고 있었던 프레임워크의 역할과 개발생산성의 장점을 모두 잡으려고 하는 노력이 보인다. 더불어, ember 프레임워크의 장점 중의 하나인 ember-cli도 angular-cli를 통해 하나 하나 흡수해 나가고 있다.</p><p>앞으로 정식 릴리즈가 될 때까지 얼마나 많은 rc가 배포 될지는 모르지만…<br>고민한 만큼 뭔가 대단한 녀석이 나올 것만 같다.</p><img src="/blog/2016/08/16/angular-rc5/angularman.png">]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/08/16/angular-rc5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular2가 기대되는 이유. Angular-Cli</title>
      <link>http://sculove.github.io/blog/2016/08/05/angular-cli/</link>
      <guid>http://sculove.github.io/blog/2016/08/05/angular-cli/</guid>
      <pubDate>Fri, 05 Aug 2016 02:29:43 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;React로 프로젝트를 진행하신 분들의 경험을 듣는 기회가 있었다.&lt;br&gt;많은 이야기가 있었지만, 그 중 공통적으로 React가 아쉽다고 이야기한 부분 중 하나로, 초기 개발환경에 대한 부분이 지원되었으면 좋겠다는 이야기가 있었다.&lt;/p&gt;
&lt;bl
        
      
      </description>
      
      <content:encoded><![CDATA[<p>React로 프로젝트를 진행하신 분들의 경험을 듣는 기회가 있었다.<br>많은 이야기가 있었지만, 그 중 공통적으로 React가 아쉽다고 이야기한 부분 중 하나로, 초기 개발환경에 대한 부분이 지원되었으면 좋겠다는 이야기가 있었다.</p><blockquote><p>feature 단위로 폴더를 구성할 지, type 단위로 폴더를 구성할 지,<br>Webpack을 쓸지 grunt,gulp를 쓸 지,</p></blockquote><p>소소하지만, 개발시 논란의 여지가 되는 부분들.<br>개발자라면 익히 경험했을 것이다.</p><p>feature 단위인 경우는 작업 분할이 쉬운 반면, type 단위의 경우는 각 타입별 확인이 편하며, 공통 기능들을 관리할 수 있는 장점이 있다. 이런 타입의 특.장점을 살려 차선책으로 2가지 타입을 병행해서 사용하는 경우도 존재한다.</p><p>구성원들의 상황에 따라 “이거 정해지는 대로 쓰자” 부터 “향후 유지보수에 막대한 영향력을 미치기 때문에 정말 중요하게 결정해야 한다” 고 주장하는 이도 있다. 이런 주장이 둘 다 틀린 주장은 아니다.<br>하지만, 개인적으로 이런 환경에 대한 것은 <code>정답이 없는것 같다. 단지 Best Practice가 있을 뿐이다</code></p><p>React에서는 이런 Best Practice를 직접 찾아서 적용하고 검토해봐야 하는 상황에 직면하는 경우가 많은 반면, 다행히 Angular2는 이런 부분에 대한 고민이 공식적(official)으로 정리가 되어 있다.</p><h3 id="Angular2-Style-Guide"><a href="#Angular2-Style-Guide" class="headerlink" title="Angular2 Style Guide"></a>Angular2 Style Guide</h3><p><a href="https://angular.io/docs/ts/latest/guide/style-guide.html" rel="external nofollow noopener noreferrer" target="_blank">https://angular.io/docs/ts/latest/guide/style-guide.html</a></p><p><a href="https://angular.io/docs/ts/latest/guide/style-guide.html#!#application-structure" rel="external nofollow noopener noreferrer" target="_blank">LIFT (Locate, Identify, Flat, Try to DRY) 원리</a>에 따라 폴더구조를 구성하고 있다.<br>우선, 기본적인 모양은 feature 단위로 구성하고, 그 feature 내부에서 공통적으로 활용하는 부분은 shared를 나눠서 관리하고 있다.</p><img src="/blog/2016/08/05/angular-cli/ngfolder.png"><p>처음에는<br>“음… 이렇게 그냥 잘 정했구나” 정도로 생각했는데….</p><p>개인적으로 놀란 것은…<br>바로, Angular-cli도 이 구조로 구성을 한다는 것이다.</p><p>내가 주목했던 부분은 바로</p><blockquote><h4 id="일관성"><a href="#일관성" class="headerlink" title="일관성"></a>일관성</h4><p>그리고</p><h4 id="자주-접하게-되는-고민의-솔루션"><a href="#자주-접하게-되는-고민의-솔루션" class="headerlink" title="자주 접하게 되는 고민의 솔루션"></a>자주 접하게 되는 고민의 솔루션</h4></blockquote><p>이 Angular2에 녹아 있다는 것이다.</p><p>우리가 프레임워크를 쓰는 이유 중의 하나는 <code>자주 접하는 문제에 대한 솔루션</code>을 프레임워크를 통해 손쉽게 해결하고, <code>일관된 코드</code>를 유지하고, <code>재사용성</code>을 높임으로써 보다 <code>높은 생산성을 유지</code>하기 위해서 이다.<br>이런 의미에서 Angular2는 프레임워크가 추구해야할 근본 취지를 잘 지키고 있는 것으로 보인다.</p><h3 id="Angular-cli"><a href="#Angular-cli" class="headerlink" title="Angular-cli"></a>Angular-cli</h3><p>React에서는 최근 <a href="https://facebook.github.io/react/blog/2016/07/22/create-apps-with-no-configuration.html" rel="external nofollow noopener noreferrer" target="_blank">create-react-app</a>이 등장했다. 아직은 미약하지만 고무적인 일이다.<br>하지만, Angular2 개발자들에게는 이미 준비 되어 있다.<br>바로 위에서 잠깐 언급했던 <a href="https://cli.angular.io/" rel="external nofollow noopener noreferrer" target="_blank">Angular-cli</a> 이다.</p><p>Angular-cli는 지금도 개발이 되고 있지만, 기본적으로 Angular2에서 가이드하는 코딩 스타일을 준수하고 있다.<br>아쉽게도 세세한 부분에 대해서는 가이드와 일치 하지 않는 부분이 존재하지만, 그 부분은 차차 개선되리라 믿는다.</p><p>잘은 모르지만, 아마도, 지금 Angular-cli 가 ember-cli를 기준으로 만들어지고 있기 때문에, 약간 엇박자가 나오고 있는 부분이 있는 것 같다.</p><p>아래는 실제로 개인적으로 겪었던 일이다.</p><p>angular-cli에 의해 생성한 프로젝트는 기본적으로 <code>tslint.json</code> 을 생성한다. 만약, <code>tslint.json</code> 파일의 규칙을 사용자가 바꾼 후, angular-cli를 통해 컴포넌트나 서비스를 만들게 되면. <code>tslint.json</code>에 변경한 규칙이 적용되지 않는다.<br>이 부분에 대해서는 개발하고 있는 <a href="https://github.com/angular/angular-cli/issues/1546" rel="external nofollow noopener noreferrer" target="_blank">github에 요청</a>해 봤으나, 특별한 답을 얻지 못했다.<br>angular-cli로 생성한 프로젝트에서 제공하는 <code>npm run format</code> 명령 또한 마찬가지다. <code>tslint.json</code>을 기반으로 formating이 적용되지 않는다.</p><p>그래서 알아낸 사실은…<br>angular-cli는 <code>.clang-format</code>에 의해 code style을 관리하고, 이를 기준으로 명령이 수행된다.<br>따라서, 만약 <code>tslint.json의 규칙을 바꾼다면, .clang-format도 함께 바꿔줘야한다.</code><br>바로 요렇게 .clang-format에 추가한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JavaScriptQuotes: Double</span><br><span class="line">IndentWidth: 4</span><br><span class="line">TabWidth: 4</span><br><span class="line">UseTab: ForIndentation</span><br></pre></td></tr></table></figure><p>위 코드는 더블 쿼테이션과 space대신 탭을 쓴 예이다.</p><blockquote><p>참고로 clang-format 관련 사이트<br><a href="https://clangformat.com/" rel="external nofollow noopener noreferrer" target="_blank">https://clangformat.com/</a><br><a href="http://clang.llvm.org/docs/ClangFormatStyleOptions.html" rel="external nofollow noopener noreferrer" target="_blank">http://clang.llvm.org/docs/ClangFormatStyleOptions.html</a></p></blockquote><p>아마 내부적으로 ember-cli의 dependency를 제거하기 위한 노력이 진행되고 있는 것으로 보인다.<br>그런 취지에서 나온게 바로 angular-cli webpack 버전인 것 같다.</p><p>아래 같이 설치하면 webpack 버전 angular-cli를 받을 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g angular-cli@webpack</span><br></pre></td></tr></table></figure><p>친절하게도 기존 개발자를 위해 migration 가이드도 있다.<br><a href="https://github.com/angular/angular-cli/blob/master/WEBPACK_UPDATE.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/angular/angular-cli/blob/master/WEBPACK_UPDATE.md</a></p><p>정말 반가운 소식이다. 나도 개인적으로 webpack이 더 좋다. 친숙하기도 하고 ㅋㅋ</p><p>올해 내로 꼭! 더 좋은 모습이 나오길 기대해 본다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/08/05/angular-cli/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Babel 너 믿을수 있니?</title>
      <link>http://sculove.github.io/blog/2016/07/26/babel-can-you-believe/</link>
      <guid>http://sculove.github.io/blog/2016/07/26/babel-can-you-believe/</guid>
      <pubDate>Tue, 26 Jul 2016 03:10:25 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;누군가나 내 코드를 임의로 바꾼다는 것은 개발자에게는 결코 유쾌한 일이 아닙니다. 더군다나, 사람이 아닌, 기계가 자동적으로 바꾼다는 것은 더욱더 신뢰할 수 없는 일이죠.&lt;/p&gt;
&lt;p&gt;하지만, 요즘은 많이 바뀐 것 같습니다. 바로 React라는 
        
      
      </description>
      
      <content:encoded><![CDATA[<p>누군가나 내 코드를 임의로 바꾼다는 것은 개발자에게는 결코 유쾌한 일이 아닙니다. 더군다나, 사람이 아닌, 기계가 자동적으로 바꾼다는 것은 더욱더 신뢰할 수 없는 일이죠.</p><p>하지만, 요즘은 많이 바뀐 것 같습니다. 바로 React라는 인기 라이브러리(통상 React 군을 지칭해서 프레임워크라고 부르기도 합니다)가 등장하면서 부터 사람들의 인식을 많이 바꾼 것 같습니다. 이제는 JSX나 ES6을 적용하기 위해서 코드를 변경하는 것은 그리 두렵거나 우려스러운 일이 아닌거죠.</p><p>그래도. 우리가 누군가요? 개발자입니다. 의심이 안들수가 없습니다.<br>그래서 ES6의 코드를 Babel이 실제로 어떻게 변경하는지 확인해 봤습니다.<br>확인한 측면은 크게, 코드량. 그리고 코드의 품질면에서 확인했습니다.</p><h3 id="ES6-변환-코드-Babel-6-10-4기준"><a href="#ES6-변환-코드-Babel-6-10-4기준" class="headerlink" title="ES6 변환 코드 [Babel 6.10.4기준]"></a>ES6 변환 코드 [Babel 6.10.4기준]</h3><img src="/blog/2016/07/26/babel-can-you-believe/babel.png"><p><a href="http://www.2ality.com/2015/12/babel6-loose-mode.html#two_modes" rel="external nofollow noopener noreferrer" target="_blank">Babel은 ES6에 가급적이면 근접하게 코드를 변환하는 <code>Normal Mode</code>와 가급적 간단한 ES5코드로 변경하는 <code>Loose Mode</code>가 있다.</a></p><blockquote><p>Loose Mode에 의해 변환된 코드는 빠르고, 하위 브라우저에 안정적인 반면, native ES6 코드로 변경시에는 변경 이슈가 발생할 수 있는 단점이 있다.</p></blockquote><p>다음은 2가지 모드에서 변환된 코드를 기준으로 사이즈를 비교한 표이다.<br>비교한 사이즈는 JavaScript를 minified한 결과를 바탕으로 추출된 값.</p><ul><li>minified tool - <a href="http://www.danstools.com/javascript-minify/" rel="external nofollow noopener noreferrer" target="_blank">http://www.danstools.com/javascript-minify/</a></li></ul><table><thead><tr><th>구분</th><th>상세 스펙</th><th>ES6</th><th>Babel Normal mode</th><th>Babel Loose mode</th><th>코드 비교 내역</th></tr></thead><tbody><tr><td>코드 변환</td><td>class</td><td>81 Bytes</td><td><code>846 Bytes</code></td><td><code>316 Bytes</code></td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#1-class">변환 전후 상세 코드</a></td></tr><tr><td>코드 변환</td><td>extends</td><td>38 Bytes</td><td><code>524 Bytes</code></td><td><code>524 Bytes</code></td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#2-extends">변환 전후 상세 코드</a></td></tr><tr><td>코드 변환</td><td>arrow function</td><td>19 Bytes</td><td>41 Bytes</td><td>41 Bytes</td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#3-arrow-function">변환 전후 상세 코드</a></td></tr><tr><td>코드 변환</td><td>default parameter</td><td>28 Bytes</td><td>92 Bytes</td><td>92 Bytes</td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#4-default-parameter">변환 전후 상세 코드</a></td></tr><tr><td>코드 변환</td><td>spread operator</td><td>26 Bytes</td><td><code>220 Bytes</code></td><td><code>32 Bytes</code></td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#5-spread-operator">변환 전후 상세 코드</a></td></tr><tr><td>코드 변환</td><td>let, const</td><td>14 Bytes</td><td>12 Bytes</td><td>12 Bytes</td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#6-let-const">변환 전후 상세 코드</a></td></tr><tr><td>코드 변환</td><td>enhanced Object Literals</td><td>27 Bytes</td><td><code>214 Bytes</code></td><td><code>38 Bytes</code></td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#7-enhanced-object-literals">변환 전후 상세 코드</a></td></tr><tr><td>코드 변환</td><td>template Strings</td><td>64 Bytes</td><td>68 Bytes</td><td>68 Bytes</td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#8-template-strings">변환 전후 상세 코드</a></td></tr><tr><td>코드 변환</td><td>destructring</td><td>57 Bytes</td><td>142 Bytes</td><td>142 Bytes</td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#9-destructring">변환 전후 상세 코드</a></td></tr><tr><td>코드 변환 + Polyfill</td><td>generators</td><td>156 Bytes</td><td><code>850 Bytes</code></td><td><code>691 Bytes</code></td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#1-generators">변환 전후 상세 코드</a></td></tr><tr><td>코드 변환 + Polyfill</td><td>iterator</td><td>164 Bytes</td><td><code>652 Bytes</code></td><td><code>497 Bytes</code></td><td><a href="https://sculove.github.io/blog/2016/07/26/babel-codes/#2-iterator">변환 전후 상세 코드</a></td></tr><tr><td>Polyfill</td><td>Map/Set/WeakMap/WeakSet, Promise, Reflect, Symbol</td><td>N/A</td><td>N/A</td><td>N/A</td><td>N/A</td></tr></tbody></table><h3 id="ES6-변환-내역-분석"><a href="#ES6-변환-내역-분석" class="headerlink" title="ES6 변환 내역 분석"></a>ES6 변환 내역 분석</h3><ul><li><p>Normal mode 보다는 Loose mode의 변환 코드의 양이 더 적다.</p></li><li><p>Loose mode가 빠르고, 안정적이다. 다만, native ES6으로 변경시에는 변경 이슈가 존재 할수 있기 때문에 코드에 대한 검수가 꼭 필요하다.</p></li><li><p>class, extends의 경우 약간 용량이 큰 것은 사실이지만, 실제 개발자가 구현한다고 하면, Babel의 코드량이 더 작음.</p><blockquote><p>class, extends 크기 비교</p></blockquote><ul><li>Babel Normal mode (class + extends 함수 크기) : 1,000 Bytes</li><li>Babel Loose mode (class + extends 함수 크기) : 648 Bytes</li><li><a href="https://github.com/ded/klass" rel="external nofollow noopener noreferrer" target="_blank">Klass</a> : 1,450 Bytes</li><li><a href="https://github.com/tnhu/jsface" rel="external nofollow noopener noreferrer" target="_blank">jsFace</a> : 4,349 Bytes</li></ul></li><li><p>generators, iterator 의 경우 변환되는 코드의 양이 많다.</p></li><li><p>Babel polyfill의 지원 범위가 ES5~ES7+, Web standards, 등까지 넓기 때문에, Babel polyfill의 사이즈는 꽤 큰 편이다. Polyfill과 함께 사용해야하는 스펙 (generator, iterator, Map/Set/WeakMap/WeakSet, Promise, Reflect, Symbol, …)의 경우에는 <a href="https://github.com/zloirock/core-js#custom-build-from-the-command-line" rel="external nofollow noopener noreferrer" target="_blank">Custom build</a>를 사용하여 선별 적용한다.</p></li><li><p>파일별로 스펙에 따른 함수가 추가되기 때문에, <a href="http://babeljs.io/docs/plugins/external-helpers/" rel="external nofollow noopener noreferrer" target="_blank">Babel External helpers</a>을 이용하여 코드량을 줄일 수 있다.</p></li></ul><h2 id="코드-품질에-대해"><a href="#코드-품질에-대해" class="headerlink" title="코드 품질에 대해"></a>코드 품질에 대해</h2><p>이 코드가 나쁜 코드다. 좋은 코드다라는 것은 명확히 있지만, 실제 코드의 단위 조각들만을 보고 코드의 품질을 논하기는 사실상 어렵다고 생각합니다.</p><p>하지만, 좋은 코드가 <code>읽기 쉬운 코드</code>, <code>버그가 없는 안정적인 코드</code>, <code>실행 속도가 빠른 코드</code> 라고 한다면, 저의 개인적인 사견으로 본다면, Babel의 Loose mode 코드는 좋은 코드입니다.</p><p>Babel의 “Loose” 모드일 경우, 개인적으로 읽기 쉬운 코드였으며, 하위브라우저에서 최적의 성능을 낼수 있도록 ES5 기반하에 작성되어 있었습니다.</p><blockquote><h4 id="한마디로-정리한다면…-안타깝지만-Babel-은-저-보다-코드를-더-잘짰습니다-ㅠㅠ"><a href="#한마디로-정리한다면…-안타깝지만-Babel-은-저-보다-코드를-더-잘짰습니다-ㅠㅠ" class="headerlink" title="한마디로 정리한다면… 안타깝지만, Babel 은 저 보다 코드를 더 잘짰습니다. ㅠㅠ"></a>한마디로 정리한다면… 안타깝지만, Babel 은 저 보다 코드를 더 잘짰습니다. ㅠㅠ</h4></blockquote><p>상세한 내역은 <a href="https://sculove.github.io/blog/2016/07/26/babel-codes/">코드 변환 전후</a>의 내역을 확인하기 바랍니다.</p><blockquote><h3 id="ES6-도입을-검토하시는-개발자분들이-있다면-Babel에-의한-코드-변화를-의심하는-것보다-다른-부분을-검토대상으로-고려하는-게-더-좋을-것-같네요"><a href="#ES6-도입을-검토하시는-개발자분들이-있다면-Babel에-의한-코드-변화를-의심하는-것보다-다른-부분을-검토대상으로-고려하는-게-더-좋을-것-같네요" class="headerlink" title="ES6 도입을 검토하시는 개발자분들이 있다면, Babel에 의한 코드 변화를 의심하는 것보다, 다른 부분을 검토대상으로 고려하는 게 더 좋을 것 같네요."></a>ES6 도입을 검토하시는 개발자분들이 있다면, Babel에 의한 코드 변화를 의심하는 것보다, 다른 부분을 검토대상으로 고려하는 게 더 좋을 것 같네요.</h3></blockquote>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/07/26/babel-can-you-believe/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Babel 변환코드</title>
      <link>http://sculove.github.io/blog/2016/07/26/babel-codes/</link>
      <guid>http://sculove.github.io/blog/2016/07/26/babel-codes/</guid>
      <pubDate>Tue, 26 Jul 2016 02:10:25 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;코드-변환-형태&quot;&gt;&lt;a href=&quot;#코드-변환-형태&quot; class=&quot;headerlink&quot; title=&quot;코드 변환 형태&quot;&gt;&lt;/a&gt;코드 변환 형태&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;1-class&quot;&gt;&lt;a href=&quot;#1-class&quot; class=&quot;h
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="코드-변환-형태"><a href="#코드-변환-형태" class="headerlink" title="코드 변환 형태"></a>코드 변환 형태</h2><hr><h3 id="1-class"><a href="#1-class" class="headerlink" title="1. class"></a>1. <a href="https://babeljs.io/docs/learn-es2015/#classes" rel="external nofollow noopener noreferrer" target="_blank">class</a></h3><h4 id="es6"><a href="#es6" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(x, y) &#123;</span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    method() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"return value"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="es5-Normal-mode"><a href="#es5-Normal-mode" class="headerlink" title="es5 (Normal mode)"></a>es5 (Normal mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _createClass = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; <span class="function"><span class="keyword">function</span> <span class="title">defineProperties</span>(<span class="params">target, props</span>) </span>&#123; <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123; <span class="keyword">var</span> descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || <span class="literal">false</span>; descriptor.configurable = <span class="literal">true</span>; <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> descriptor) descriptor.writable = <span class="literal">true</span>; <span class="built_in">Object</span>.defineProperty(target, descriptor.key, descriptor); &#125; &#125; <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">Constructor, protoProps, staticProps</span>) </span>&#123; <span class="keyword">if</span> (protoProps) defineProperties(Constructor.prototype, protoProps); <span class="keyword">if</span> (staticProps) defineProperties(Constructor, staticProps); <span class="keyword">return</span> Constructor; &#125;; &#125;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123; <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>); &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Point = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">_classCallCheck(<span class="keyword">this</span>, Point);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.x = x;</span><br><span class="line"><span class="keyword">this</span>.y = y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">_createClass(Point, [&#123;</span><br><span class="line">key: <span class="string">"method"</span>,</span><br><span class="line">value: <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"return value"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Point;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h4 id="es5-Loose-mode"><a href="#es5-Loose-mode" class="headerlink" title="es5 (Loose mode)"></a>es5 (Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123; <span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>); &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Point = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Point</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">        _classCallCheck(<span class="keyword">this</span>, Point);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.x = x;</span><br><span class="line">        <span class="keyword">this</span>.y = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Point.prototype.method = <span class="function"><span class="keyword">function</span> <span class="title">method</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"return value"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Point;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure><h3 id="2-extends"><a href="#2-extends" class="headerlink" title="2. extends"></a>2. extends</h3><h4 id="es6-1"><a href="#es6-1" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfiniteGrid</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="es5-Normal-Loose-mode"><a href="#es5-Normal-Loose-mode" class="headerlink" title="es5 (Normal, Loose mode)"></a>es5 (Normal, Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123; <span class="keyword">if</span> (<span class="keyword">typeof</span> superClass !== <span class="string">"function"</span> &amp;&amp; superClass !== <span class="literal">null</span>) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Super expression must either be null or a function, not "</span> + <span class="keyword">typeof</span> superClass); &#125; subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123; <span class="attr">constructor</span>: &#123; <span class="attr">value</span>: subClass, <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="attr">writable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span> &#125; &#125;); <span class="keyword">if</span> (superClass) <span class="built_in">Object</span>.setPrototypeOf ? <span class="built_in">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> InfiniteGrid = <span class="function"><span class="keyword">function</span> (<span class="params">_Component</span>) </span>&#123;</span><br><span class="line"> _inherits(InfiniteGrid, _Component);</span><br></pre></td></tr></table></figure><h3 id="3-arrow-function"><a href="#3-arrow-function" class="headerlink" title="3. arrow function"></a>3. arrow function</h3><h4 id="es6-2"><a href="#es6-2" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(v,i) =&gt; &#123;</span><br><span class="line">   <span class="keyword">this</span>.a = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="es5-Normal-Loose-mode-1"><a href="#es5-Normal-Loose-mode-1" class="headerlink" title="es5 (Normal, Loose mode)"></a>es5 (Normal, Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">v,i</span>) </span>&#123;</span><br><span class="line">   _this.a = <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>arrow function 내부에서 this가 없을 경우, _this 또는 self등을 선언하지 않는다.</p></blockquote><h3 id="4-default-parameter"><a href="#4-default-parameter" class="headerlink" title="4. default parameter"></a>4. <a href="https://babeljs.io/docs/learn-es2015/#default--rest--spread" rel="external nofollow noopener noreferrer" target="_blank">default parameter</a></h3><h4 id="es6-3"><a href="#es6-3" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">itmes = this.items</span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><h4 id="es5-Normal-Loose-mode-2"><a href="#es5-Normal-Loose-mode-2" class="headerlink" title="es5 (Normal, Loose mode)"></a>es5 (Normal, Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> items = <span class="built_in">arguments</span>.length &lt;= <span class="number">0</span> || <span class="built_in">arguments</span>[<span class="number">0</span>] === <span class="literal">undefined</span> ? <span class="keyword">this</span>.items : <span class="built_in">arguments</span>[<span class="number">0</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-spread-operator"><a href="#5-spread-operator" class="headerlink" title="5. spread operator"></a>5. <a href="https://babeljs.io/docs/learn-es2015/#default--rest--spread" rel="external nofollow noopener noreferrer" target="_blank">spread operator</a></h3><h4 id="es6-4"><a href="#es6-4" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._appendCols = [...arr];</span><br></pre></td></tr></table></figure><h4 id="es5-Normal-mode-1"><a href="#es5-Normal-mode-1" class="headerlink" title="es5 (Normal mode)"></a>es5 (Normal mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_toConsumableArray</span>(<span class="params">arr</span>) </span>&#123; <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(arr)) &#123; <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, arr2 = <span class="built_in">Array</span>(arr.length); i &lt; arr.length; i++) &#123; arr2[i] = arr[i]; &#125; <span class="keyword">return</span> arr2; &#125; <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="built_in">Array</span>.from(arr); &#125; &#125;</span><br><span class="line"><span class="keyword">this</span>._appendCols = [].concat(_toConsumableArray(arr))</span><br></pre></td></tr></table></figure><h4 id="es5-Loose-mode-1"><a href="#es5-Loose-mode-1" class="headerlink" title="es5 (Loose mode)"></a>es5 (Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>._appendCols = [].concat(arr);</span><br></pre></td></tr></table></figure><h3 id="6-let-const"><a href="#6-let-const" class="headerlink" title="6. let, const"></a>6. <a href="https://babeljs.io/docs/learn-es2015/#let--const" rel="external nofollow noopener noreferrer" target="_blank">let, const</a></h3><h4 id="es6-5"><a href="#es6-5" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a;</span><br><span class="line"><span class="keyword">let</span> b;</span><br></pre></td></tr></table></figure><h4 id="es5-Normal-Loose-mode-3"><a href="#es5-Normal-Loose-mode-3" class="headerlink" title="es5 (Normal, Loose mode)"></a>es5 (Normal, Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="keyword">var</span> b;</span><br></pre></td></tr></table></figure><blockquote><p>let,const의 경우, var로 변경되며, babel transform시 let과 const의 유효성 검사를 한다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Module build failed: TypeError: /Users/naver/workspace/infiniteGrid/src/es6/infiniteGrid.js: Duplicate declaration &quot;x&quot;</span><br><span class="line">  777 |     x = &quot;bar&quot;;</span><br><span class="line">  778 |     // error, already declared in block</span><br><span class="line">&gt; 779 |     let x = &quot;inner&quot;;</span><br><span class="line">      |         ^</span><br><span class="line">  780 |   &#125;</span><br><span class="line">  781 | &#125;</span><br></pre></td></tr></table></figure><h3 id="7-enhanced-Object-Literals"><a href="#7-enhanced-Object-Literals" class="headerlink" title="7. enhanced Object Literals"></a>7. <a href="https://babeljs.io/docs/learn-es2015/#enhanced-object-literals" rel="external nofollow noopener noreferrer" target="_blank">enhanced Object Literals</a></h3><h4 id="es6-6"><a href="#es6-6" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"key"</span>;</span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    [a] : <span class="number">30</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="es5-Normal-mode-2"><a href="#es5-Normal-mode-2" class="headerlink" title="es5 (Normal mode)"></a>es5 (Normal mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_defineProperty</span>(<span class="params">obj, key, value</span>) </span>&#123; <span class="keyword">if</span> (key <span class="keyword">in</span> obj) &#123; <span class="built_in">Object</span>.defineProperty(obj, key, &#123; <span class="attr">value</span>: value, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span> &#125;); &#125; <span class="keyword">else</span> &#123; obj[key] = value; &#125; <span class="keyword">return</span> obj; &#125;</span><br><span class="line"><span class="keyword">var</span> b = _defineProperty(&#123;&#125;, a, <span class="number">30</span>);</span><br></pre></td></tr></table></figure><h4 id="es5-Loose-mode-2"><a href="#es5-Loose-mode-2" class="headerlink" title="es5 (Loose mode)"></a>es5 (Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"key"</span>;</span><br><span class="line"><span class="keyword">var</span> b = (_b = &#123;&#125;, _b[a] = <span class="number">30</span>, _b);</span><br></pre></td></tr></table></figure><h3 id="8-template-Strings"><a href="#8-template-Strings" class="headerlink" title="8. template Strings"></a>8. <a href="https://babeljs.io/docs/learn-es2015/#template-strings" rel="external nofollow noopener noreferrer" target="_blank">template Strings</a></h3><h4 id="es6-7"><a href="#es6-7" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">`Hello <span class="subst">$&#123;name&#125;</span>, how are you <span class="subst">$&#123;time&#125;</span>?`</span></span><br></pre></td></tr></table></figure><h4 id="es5-Normal-Loose-mode-4"><a href="#es5-Normal-Loose-mode-4" class="headerlink" title="es5 (Normal, Loose mode)"></a>es5 (Normal, Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">"Bob"</span>, time = <span class="string">"today"</span>;</span><br><span class="line"><span class="string">"Hello "</span> + name + <span class="string">", how are you "</span> + time + <span class="string">"?"</span>;</span><br></pre></td></tr></table></figure><h3 id="9-destructring"><a href="#9-destructring" class="headerlink" title="9. destructring"></a>9. <a href="https://babeljs.io/docs/learn-es2015/#destructuring" rel="external nofollow noopener noreferrer" target="_blank">destructring</a></h3><h4 id="es6-8"><a href="#es6-8" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> [a, ,b] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> &#123; <span class="attr">op</span>: a, <span class="attr">lhs</span>: &#123; <span class="attr">op</span>: b &#125;, <span class="attr">rhs</span>: c &#125;</span><br><span class="line">       = getASTNode()</span><br></pre></td></tr></table></figure><h4 id="es5-Normal-Loose-mode-5"><a href="#es5-Normal-Loose-mode-5" class="headerlink" title="es5 (Normal, Loose mode)"></a>es5 (Normal, Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ref = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> a = _ref[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> b = _ref[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">var</span> _getASTNode = getASTNode();</span><br><span class="line"><span class="keyword">var</span> a = _getASTNode.op;</span><br><span class="line"><span class="keyword">var</span> b = _getASTNode.lhs.op;</span><br><span class="line"><span class="keyword">var</span> c = _getASTNode.rhs;</span><br></pre></td></tr></table></figure><h2 id="코드-변환-Polyfill-Libraray가-필요한-형태"><a href="#코드-변환-Polyfill-Libraray가-필요한-형태" class="headerlink" title="코드 변환 + Polyfill Libraray가 필요한 형태"></a>코드 변환 + Polyfill Libraray가 필요한 형태</h2><hr><h3 id="1-generators"><a href="#1-generators" class="headerlink" title="1. generators"></a>1. <a href="https://babeljs.io/docs/learn-es2015/#generators" rel="external nofollow noopener noreferrer" target="_blank">generators</a></h3><h4 id="es6-9"><a href="#es6-9" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]: <span class="function"><span class="keyword">function</span>*(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">      <span class="keyword">var</span> temp = pre;</span><br><span class="line">      pre = cur;</span><br><span class="line">      cur += temp;</span><br><span class="line">      <span class="keyword">yield</span> cur;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">of</span> fibonacci) &#123;</span><br><span class="line">  <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="es5-Normal-mode-3"><a href="#es5-Normal-mode-3" class="headerlink" title="es5 (Normal mode)"></a>es5 (Normal mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = _defineProperty(&#123;&#125;, <span class="built_in">Symbol</span>.iterator, regeneratorRuntime.mark(<span class="function"><span class="keyword">function</span> <span class="title">_callee</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre, cur, temp;</span><br><span class="line">    <span class="keyword">return</span> regeneratorRuntime.wrap(<span class="function"><span class="keyword">function</span> <span class="title">_callee$</span>(<span class="params">_context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (_context.prev = _context.next) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    temp = pre;</span><br><span class="line"></span><br><span class="line">                    pre = cur;</span><br><span class="line">                    cur += temp;</span><br><span class="line">                    _context.next = <span class="number">6</span>;</span><br><span class="line">                    <span class="keyword">return</span> cur;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    _context.next = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"end"</span>:</span><br><span class="line">                    <span class="keyword">return</span> _context.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, _callee, <span class="keyword">this</span>);</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _iteratorNormalCompletion = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> _didIteratorError = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> _iteratorError = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> _iterator = fibonacci[<span class="built_in">Symbol</span>.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> n = _step.value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">1000</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if el is jQuery instance, el should change to HTMLElement.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    _didIteratorError = <span class="literal">true</span>;</span><br><span class="line">    _iteratorError = err;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_iteratorNormalCompletion &amp;&amp; _iterator.return) &#123;</span><br><span class="line">            _iterator.return();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_didIteratorError) &#123;</span><br><span class="line">            <span class="keyword">throw</span> _iteratorError;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="es6-Loose-mode"><a href="#es6-Loose-mode" class="headerlink" title="es6 (Loose mode)"></a>es6 (Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = (_fibonacci = &#123;&#125;, _fibonacci[<span class="built_in">Symbol</span>.iterator] = regeneratorRuntime.mark(<span class="function"><span class="keyword">function</span> <span class="title">_callee</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre, cur, temp;</span><br><span class="line">    <span class="keyword">return</span> regeneratorRuntime.wrap(<span class="function"><span class="keyword">function</span> <span class="title">_callee$</span>(<span class="params">_context</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">switch</span> (_context.prev = _context.next) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                    pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                    temp = pre;</span><br><span class="line"></span><br><span class="line">                    pre = cur;</span><br><span class="line">                    cur += temp;</span><br><span class="line">                    _context.next = <span class="number">6</span>;</span><br><span class="line">                    <span class="keyword">return</span> cur;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">                    _context.next = <span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"end"</span>:</span><br><span class="line">                    <span class="keyword">return</span> _context.stop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, _callee, <span class="keyword">this</span>);</span><br><span class="line">&#125;), _fibonacci);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> _iterator = fibonacci, _isArray = <span class="built_in">Array</span>.isArray(_iterator), _i = <span class="number">0</span>, _iterator = _isArray ? _iterator : _iterator[<span class="built_in">Symbol</span>.iterator]();;) &#123;</span><br><span class="line">    <span class="keyword">var</span> _ref;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_isArray) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_i &gt;= _iterator.length) <span class="keyword">break</span>;</span><br><span class="line">        _ref = _iterator[_i++];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _i = _iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (_i.done) <span class="keyword">break</span>;</span><br><span class="line">        _ref = _i.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> n = _ref;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1000</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-iterator"><a href="#2-iterator" class="headerlink" title="2. iterator"></a>2. <a href="https://babeljs.io/docs/learn-es2015/#iterators--forof" rel="external nofollow noopener noreferrer" target="_blank">iterator</a></h3><h4 id="es6-10"><a href="#es6-10" class="headerlink" title="es6"></a>es6</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fibonacci = &#123;</span><br><span class="line">  [<span class="built_in">Symbol</span>.iterator]() &#123;</span><br><span class="line">    <span class="keyword">let</span> pre = <span class="number">0</span>, cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      next() &#123;</span><br><span class="line">        [pre, cur] = [cur, pre + cur];</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: cur &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> n <span class="keyword">of</span> fibonacci) &#123;</span><br><span class="line">  <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">  <span class="keyword">if</span> (n &gt; <span class="number">1000</span>)</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="es5-Normal-mode-4"><a href="#es5-Normal-mode-4" class="headerlink" title="es5 (Normal mode)"></a>es5 (Normal mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = _defineProperty(&#123;&#125;, <span class="built_in">Symbol</span>.iterator, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="number">0</span>,</span><br><span class="line">        cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next: <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _ref = [cur, pre + cur];</span><br><span class="line">            pre = _ref[<span class="number">0</span>];</span><br><span class="line">            cur = _ref[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: cur &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _iteratorNormalCompletion = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> _didIteratorError = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> _iteratorError = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> _iterator = fibonacci[<span class="built_in">Symbol</span>.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = <span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> n = _step.value;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">        <span class="keyword">if</span> (n &gt; <span class="number">1000</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if el is jQuery instance, el should change to HTMLElement.</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    _didIteratorError = <span class="literal">true</span>;</span><br><span class="line">    _iteratorError = err;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!_iteratorNormalCompletion &amp;&amp; _iterator.return) &#123;</span><br><span class="line">            _iterator.return();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_didIteratorError) &#123;</span><br><span class="line">            <span class="keyword">throw</span> _iteratorError;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="es5-Loose-mode-3"><a href="#es5-Loose-mode-3" class="headerlink" title="es5 (Loose mode)"></a>es5 (Loose mode)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = (_fibonacci = &#123;&#125;, _fibonacci[<span class="built_in">Symbol</span>.iterator] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> pre = <span class="number">0</span>,</span><br><span class="line">        cur = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        next: <span class="function"><span class="keyword">function</span> <span class="title">next</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> _ref = [cur, pre + cur];</span><br><span class="line">            pre = _ref[<span class="number">0</span>];</span><br><span class="line">            cur = _ref[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: cur &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;, _fibonacci);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> _iterator = fibonacci, _isArray = <span class="built_in">Array</span>.isArray(_iterator), _i = <span class="number">0</span>, _iterator = _isArray ? _iterator : _iterator[<span class="built_in">Symbol</span>.iterator]();;) &#123;</span><br><span class="line">    <span class="keyword">var</span> _ref2;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_isArray) &#123;</span><br><span class="line">        <span class="keyword">if</span> (_i &gt;= _iterator.length) <span class="keyword">break</span>;</span><br><span class="line">        _ref2 = _iterator[_i++];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _i = _iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (_i.done) <span class="keyword">break</span>;</span><br><span class="line">        _ref2 = _i.value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> n = _ref2;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// truncate the sequence at 1000</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1000</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Polyfill-Library만-필요한-형태"><a href="#Polyfill-Library만-필요한-형태" class="headerlink" title="Polyfill Library만 필요한 형태"></a>Polyfill Library만 필요한 형태</h2><hr><p>Map, Set, WeakMap, WeakSet, Promise, Reflect, Symbol</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = timeout(<span class="number">1000</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> timeout(<span class="number">2000</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"hmm"</span>);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.all([timeout(<span class="number">100</span>), timeout(<span class="number">200</span>)]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/07/26/babel-codes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>React보다 Angular2에 더 주목해야하는 이유</title>
      <link>http://sculove.github.io/blog/2016/07/11/reasons-angular2-than-react/</link>
      <guid>http://sculove.github.io/blog/2016/07/11/reasons-angular2-than-react/</guid>
      <pubDate>Mon, 11 Jul 2016 04:23:37 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Angular 1.x은 높은 생산성으로 많은 개발자들의 마음을 뺏아 갔습니다. 반면, &lt;code&gt;Two-way binding과 client rendering 구조로 성능에 문제가 있다&lt;/code&gt;라는 지탄을 받았습니다.&lt;br&gt;이런 Front-En
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Angular 1.x은 높은 생산성으로 많은 개발자들의 마음을 뺏아 갔습니다. 반면, <code>Two-way binding과 client rendering 구조로 성능에 문제가 있다</code>라는 지탄을 받았습니다.<br>이런 Front-End 프레임워크에 대한 관심은 Facebook의 React로 이어졌습니다.<br>React는 <code>Virtual DOM과 JSX의 server rendering을 이용하여 성능이 좋다</code>라는 이야기와 함께 개발자들에게 뜨거운 관심을 받았습니다. 2016년 개발자들 사이에서 가장 뜨거운 감자였으며, 지금도 많은 개발자들이 관심을 갖고, 도입을 고려하는 있는 프레임워크(?)입니다.</p><p>하지만, 저의 개인적인 견해는</p><blockquote><h3 id="우리는-React보다-Angular2에-더-주목해야한다"><a href="#우리는-React보다-Angular2에-더-주목해야한다" class="headerlink" title="우리는 React보다 Angular2에 더 주목해야한다"></a>우리는 React보다 Angular2에 더 주목해야한다</h3></blockquote><p>고 생각합니다.</p><p>React는 라이브러리이고, Angular2는 프레임워크이기 때문에 <a href="https://medium.freecodecamp.com/angular-2-versus-react-there-will-be-blood-66595faafd51#.6xe92bylv" rel="external nofollow noopener noreferrer" target="_blank">비교</a>하는 것 자체가 말이 안된다고 이야기하는 이도 있지만, 지극히 제 관점에서 React와 Angular2 생태계 내에서 비교를 간단히 해보겠습니다.</p><img src="/blog/2016/07/11/reasons-angular2-than-react/react_angular.jpeg"><h3 id="Performance"><a href="#Performance" class="headerlink" title="Performance"></a>Performance</h3><h4 id="구조적인-개선"><a href="#구조적인-개선" class="headerlink" title="구조적인 개선"></a>구조적인 개선</h4><p>저희가 만드는 서비스에서 <code>느리다</code>라고 말하는 부분이 실제로는 어떤 부분일까요?</p><ul><li>Client Rendering으로 인해 하얀화면이 보이는 것? (<a href="http://netil.github.io/slides/angularjs/#/17" rel="external nofollow noopener noreferrer" target="_blank">FOUC</a>:Flash of unstyled content)</li><li>데이터 변경시, 여러 뷰들이 실시간으로 일괄 변경되는 부분?</li><li>애니메이션 동작시 매끄럽지 않은 부분?</li><li>…</li></ul><h5 id="Server-Rendering-지원"><a href="#Server-Rendering-지원" class="headerlink" title="Server Rendering 지원"></a>Server Rendering 지원</h5><p>처음에 이야기한 <strong>Client Rendering</strong> 부분은 Angular 1.x 가 구조적으로 극복하기 힘든부분입니다. 하지만 Angular2에서는 <a href="https://github.com/angular/universal" rel="external nofollow noopener noreferrer" target="_blank">angular-universal</a> 을 통해 React와 같이 <code>Server Rendering을 지원합니다.</code></p><h5 id="단방향-데이터-흐름의-구조"><a href="#단방향-데이터-흐름의-구조" class="headerlink" title="단방향 데이터 흐름의 구조"></a>단방향 데이터 흐름의 구조</h5><p>다음으로 <strong>데이터 변경시 여러 뷰들이 실시간으로 변경되는 부분</strong> 입니다.<br>Angular 1.x에서는 Two-way binding을 이용하여, 데이터 변경만으로 뷰들을 일괄 변경할 수 있는 기능을 제공했지만, 이와 같이 데이터 흐름이 <code>양방향</code>으로 이루어 지다 보니, cascade 효과가 발생하여, 불필요한 digest가 발생합니다. 이로 인해 구조적으로 성능문제에 직면하게 될 확률이 높아 집니다.<br>반면, React에서는 <code>단방향 데이터 흐름</code>을 통해 데이터가 상위에서 하위로 전달하는 방식을 사용합니다. 따라서, Angular1과 같이 성능적인 문제에 직면하게 될 확률이 낮습니다.<br>Angular2도 React와 같이 컴포넌트 단위의 <code>단방향 데이터 흐름의 구조를 취하고 있습니다.</code></p><p>마지막으로, <strong>애니메이션 동작시 매끄럽지 않는 부분</strong>은 사실 React나 Angular 1/2로 해결하기에는 어려움이 있습니다. 오히려 Native를 이용한 개발이 더 효과적이기 때문에 이부분에 대한 설명은 생략하도록 하겠습니다.</p><h3 id="데이터-변경-확인-방법"><a href="#데이터-변경-확인-방법" class="headerlink" title="데이터 변경 확인 방법"></a>데이터 변경 확인 방법</h3><p>React, Angular 1/2 모두 <code>DOM을 기준</code>으로 작업하는 기존 방식(JQuery)과 다르게, <code>데이터 기준</code>으로 개발을 해야만 합니다. 이때 가장 중요한 것이 <code>실제 데이터가 변경되는 시점을 찾는 방법</code>입니다.</p><p>React에서는 데이터 변경여부를 <a href="https://github.com/studye/react/wiki/%5BChapter-7-Performance-Tunning%5D#react%EC%9D%98-%EC%84%B1%EB%8A%A5%EC%9D%84-%EA%B2%B0%EC%A0%95-%EC%A7%93%EB%8A%94-%EC%9A%94%EC%86%8C" rel="external nofollow noopener noreferrer" target="_blank">Immutable 객체를 이용하거나, Virtual DOM을 이용</a>하여 비교를 합니다. 실제 브라우저 DOM을 기준으로 비교하지 않기때문에, 그만큼 성능이 빠릅니다. 하지만, Angular1에서는 이러한 기능이 없었기 때문에, <code>digest loop</code>를 통해 변경여부를 확인합니다. 더군다나, 양방향 데이터 흐름 덕(?)에 <a href="https://sculove.github.io/slides/seeAngularJSthroughCases/#/3/3">digest lopp 1번 호출시, 최소 2번 최대 9번까지 확인하게 됩니다.</a><br>하지만, Angular2에서는 이런 문제를 <code>ChangeDitector Tree, Immutable, Observable</code>을 이용하여 React와 같이 <code>메모리 영역에서 변경여부를 확인합니다.</code></p><blockquote><h4 id="즉-Angular2는-Angular1과-같은-단점을-보강했고-React와-같은-구조를-가지고-있기-때문에-성능상-크게-차이는-없다라고-이야기할-수-있을-것-같네요"><a href="#즉-Angular2는-Angular1과-같은-단점을-보강했고-React와-같은-구조를-가지고-있기-때문에-성능상-크게-차이는-없다라고-이야기할-수-있을-것-같네요" class="headerlink" title="즉, Angular2는 Angular1과 같은 단점을 보강했고, React와 같은 구조를 가지고 있기 때문에, 성능상 크게 차이는 없다라고 이야기할 수 있을 것 같네요."></a>즉, Angular2는 Angular1과 같은 단점을 보강했고, React와 같은 구조를 가지고 있기 때문에, 성능상 크게 차이는 없다라고 이야기할 수 있을 것 같네요.</h4></blockquote><hr><p>자 여기까지는 <code>Angular2도 React 만큼 괜찮다</code> 라는 일종의 변론이었고, 이제 본격적으로 React보다 Angular2에 더 주목해야하는 이유에 대해 이야기해 보겠습니다.</p><h2 id="React보다-Angular2에-더-주목해야하는-이유"><a href="#React보다-Angular2에-더-주목해야하는-이유" class="headerlink" title="React보다 Angular2에 더 주목해야하는 이유"></a>React보다 Angular2에 더 주목해야하는 이유</h2><h3 id="1-템플릿-마크업-과-코드의-분리"><a href="#1-템플릿-마크업-과-코드의-분리" class="headerlink" title="1. 템플릿(마크업)과 코드의 분리"></a>1. 템플릿(마크업)과 코드의 분리</h3><p>React는 개발시 코드 안에 JSX가 포함되어 있습니다. 마크업부터 처음부터 다 개발하는 FE개발자라면 오히려 굉장한 장점일 수 있습니다. 하지만, <code>마크업 개발자와 FE 개발자가 협업해야하는 상황</code>이라면 꽤나 불편한 환경일 수 있습니다. (물론, React에서는 복잡한 작업을 통해 JSX와 코드를 분리할 수 있습니다. 하지만,… 근본적으로 떼어내기는 쉬운일이 아닙니다.)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line"><span class="keyword">var</span> list = <span class="keyword">this</span>.props.pagelist.map(<span class="function">(<span class="params">v, i</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">&#123;i&#125;</span>&gt;</span><span class="tag">&lt;<span class="name">Link</span> <span class="attr">to</span>=<span class="string">&#123;v.url&#125;</span>&gt;</span>&#123;v.text&#125;<span class="tag">&lt;/<span class="name">Link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line">&lt;div className=<span class="string">"main-container"</span>&gt;</span><br><span class="line">&lt;h1&gt;&#123;<span class="keyword">this</span>.props.title&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;p&gt;&#123;this.state.message&#125;&lt;/</span>p&gt;</span><br><span class="line">&lt;nav className=<span class="string">"navbar navbar-default"</span> role=<span class="string">"navigation"</span>&gt;</span><br><span class="line">&lt;div className=<span class="string">"col-sm-7 col-sm-offset-2"</span>&gt;</span><br><span class="line">&#123;list&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>nav&gt;</span><br><span class="line">&#123;<span class="keyword">this</span>.props.children&#125;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>하지만, Angular2에서는 다음과 같이 템플릿 자체를 별도의 파일로 관리 할 수 있습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">templateUrl: &apos;app.component.html&apos;,</span><br><span class="line">    // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-HTML-표준과-Web-Component"><a href="#2-HTML-표준과-Web-Component" class="headerlink" title="2. HTML 표준과 Web Component"></a>2. HTML 표준과 Web Component</h3><p>React는 JSX라는 새로운 언어로 뷰를 만듭니다. 이 JSX 는 우리가 생각하는 마크업(HTML)과 비슷하지만, 다른 언어입니다.<br>예를 들어 JSX 는 <code>꼭! 상위 루트가 있어야 합니다.</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rooot</span>&gt;</span>...<span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>아래 같이 작성할 경우에는 에러가 발생합니다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root1</span>&gt;</span>...<span class="tag">&lt;/<span class="name">root1</span>&gt;</span> <span class="tag">&lt;<span class="name">root2</span>&gt;</span>...<span class="tag">&lt;/<span class="name">root2</span>&gt;</span></span><br></pre></td></tr></table></figure><p>더군다나, html의 class 속성도 중복되기 때문에 <code>className</code>으로 변경해서 사용해야합니다.</p><p>하지만, <code>HTML 표준 마크업을 템플릿으로 사용하는 Angular2</code>는 JSX의 제약이 전혀 없습니다. 더군다나 Web Component 를 지원하고 있기 때문에, Shadow DOM과 같이 뷰 단위로 css를 지정할수도 있습니다.</p><h3 id="3-TypeScript"><a href="#3-TypeScript" class="headerlink" title="3. TypeScript"></a>3. TypeScript</h3><h4 id="타입이-존재하지만-존재하지-않는-언어"><a href="#타입이-존재하지만-존재하지-않는-언어" class="headerlink" title="타입이 존재하지만. 존재하지 않는 언어"></a>타입이 존재하지만. 존재하지 않는 언어</h4><p>TypeScript를 지원하기 때문에 Angular2가 진입장벽이라고 이야기하시는 분이 많습니다. 사실, 저 또한 그랬습니다. 하지만, 좀 써보니 그렇지 않은 것 같습니다.<br>예를 들어, React에서는 Component의 prop에 타입을 지정합니다. 다음과 같습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Main.propTypes = &#123;</span><br><span class="line">  title: PropTypes.string.isRequired,</span><br><span class="line">  pagelist: PropTypes.array</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>자유도가 높은 JavaScript에서 왜 이런 작업을 하는 것일까요? 당연히 필요하기 때문입니다. <code>Front-End 비중이 높아지면 질수록, 타입체크는 꼭 필요한 기능</code> 중 하나인거죠.<br>하지만, TypeScript는 다음과 같이 코드에서 부터 타입을 명시할수 있습니다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> title: string;</span><br><span class="line"><span class="keyword">var</span> pagelist: string[];</span><br></pre></td></tr></table></figure><p><code>가장 좋은 점은 타입을 지정하는 것이 꼭! 필수는 아니다는 것입니다.</code> 그래서 TypeScript로 개발을 하더라도 그냥 JavaScript와 같이 쓸수 있습니다.</p><h4 id="미래를-준비하는-언어"><a href="#미래를-준비하는-언어" class="headerlink" title="미래를 준비하는 언어"></a>미래를 준비하는 언어</h4><p>React를 쓰려면 JSX를 변경하기 위해 transpile 과정을 꼭! 해야만 합니다. 그래서 일반적으로는 ES6 까지 함께 적용하여 개발을 합니다.<br>Angular2가 사용하는 TypeScript 또한 꼭! transplie 과정을 거칩니다. 어차피 개발환경에서 하는 일은 동일합니다.<br>하지만, TypeScript는 아래와 같이 ES5,6 기본 스펙을 포함하고 있고, 더불어 annotations과 type을 가지고 있습니다. ES2017에서 decorator, async와 같은 스펙이 이미 논의되고 있습니다. 이 부분이 TypeScript를 사용하게 되면 미리 사용할 수 있는 장점이 있습니다. 즉, 최신의 ECMAScript 를 사용할 수 있다는 것입니다.</p><img src="/blog/2016/07/11/reasons-angular2-than-react/typescript.png"><h3 id="4-프레임워크-내에서의-설계"><a href="#4-프레임워크-내에서의-설계" class="headerlink" title="4. 프레임워크 내에서의 설계"></a>4. 프레임워크 내에서의 설계</h3><p>Angular1은 controller, service, directive등과 DI(Dependency Injection) 방식을 제공하여 많은 면에서 정해진 룰(?)에 의해 개발을 할 수 있는 장점이 있습니다. 반면, React는 Flux나 Redux와 같은 데이타 플로우 설계에 대한 많은 선택지가 있습니다.<br>많은 선택지가 있다는 것은 선택을 해야하는 자유도가 높아 유연성이 좋다는 의미이기도 하지만, 다른 한편으로는 <a href="http://huns.me/development/1953" rel="external nofollow noopener noreferrer" target="_blank">올바른 선택을 하기 위해서는 많은 경험과 높은 이해도가 필요하다</a>는 이야기 입니다.</p><p>Angular2는 Angular1과 React의 중간점에 있다고 생각됩니다. React와 다르게 프레임워크이기 때문에, 어느 정도 정해진 플로우를 사용하면서, Flux, Redux, RxJS와 같은 것을 유연하게 적용할수도 있습니다.</p><h3 id="5-브라우저-벤더-“구글”"><a href="#5-브라우저-벤더-“구글”" class="headerlink" title="5. 브라우저 벤더 “구글”"></a>5. 브라우저 벤더 “구글”</h3><p>Angular2는 구글 주도하에 개발되고 있는 Front-End 프레임워크입니다. 브라우저를 만드는 구글이기 때문에, Angular2에도 브라우저의 표준을 따르려고 하는 모습이 보입니다. 기본적으로 사용하는 템플릿도 HTML표준이고, 컴포넌트들의 모습도 Web Component를 지향하고 있으며, 심지어 애니메이션 처리하는 부분도 Web Animation API를 지향하고 있습니다.<br>물론, Facebook의 React도 그 행보가 유사하지만, 구글과 같이 민첩하고 직접적으로 표준을 지켜나가는 모습은 아닙니다.</p><img src="/blog/2016/07/11/reasons-angular2-than-react/google.png"><blockquote><p>간단한 페이지들은 오히려 프레임워크를 도입하지 않는 것이 더 효과적입니다. 하지만, 만약 프레임워크를 도입한다면, React뿐만 아니라, Angular2도 함께 고려해보는 것도 좋을것 같습니다.<br>참고로 Angular2는 2016말 정식릴리즈를 준비중이며, 현재는 RC.4까지 진행되었습니다.</p></blockquote>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/07/11/reasons-angular2-than-react/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Reactive Programming</title>
      <link>http://sculove.github.io/blog/2016/06/22/Reactive-Programming/</link>
      <guid>http://sculove.github.io/blog/2016/06/22/Reactive-Programming/</guid>
      <pubDate>Wed, 22 Jun 2016 01:47:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Reactive-Programming&quot;&gt;&lt;a href=&quot;#Reactive-Programming&quot; class=&quot;headerlink&quot; title=&quot;Reactive Programming&quot;&gt;&lt;/a&gt;Reactive Programming&lt;/h2&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="Reactive-Programming"><a href="#Reactive-Programming" class="headerlink" title="Reactive Programming"></a>Reactive Programming</h2><p>이 글은 기존에 잘 정리된 문서를 보고 학습한 결과를 바탕으로 제 기준으로 다시 간단히 정리한 문서입니다.</p><h2 id="Reactive-Programming-이란"><a href="#Reactive-Programming-이란" class="headerlink" title="Reactive Programming 이란?"></a>Reactive Programming 이란?</h2><img src="/blog/2016/06/22/Reactive-Programming/stream.png"><h3 id="참조-문서"><a href="#참조-문서" class="headerlink" title="참조 문서"></a>참조 문서</h3><p><a href="https://gist.github.com/staltz/868e7e9bc2a7b8c1f754" rel="external nofollow noopener noreferrer" target="_blank">https://gist.github.com/staltz/868e7e9bc2a7b8c1f754</a></p><ul><li>Reactive Programming에 대한 설명과 예제를 다룬 글</li><li>이에 대한 egghead.io 강의 <a href="https://egghead.io/courses/introduction-to-reactive-programming" rel="external nofollow noopener noreferrer" target="_blank">https://egghead.io/courses/introduction-to-reactive-programming</a></li><li>Reactive Programming 개발 방법 익히기에 대해 정리한 어느 분의 문서<br><a href="http://mobicon.tistory.com/467" rel="external nofollow noopener noreferrer" target="_blank">http://mobicon.tistory.com/467</a></li></ul><h3 id="Reactive-Programming-1"><a href="#Reactive-Programming-1" class="headerlink" title="Reactive Programming"></a>Reactive Programming</h3><blockquote><p>Reactive programming is programming with asynchronous data streams.<br>You can listen to that stream and react accordingly.</p></blockquote><ul><li>Reactive Programing은 기본적으로 모든 것을 스트림(stream)으로 본다. 이벤트, ajax call, 등 모든 데이터의 흐름을 시간순서에 의해 전달되어지는 스트림으로 처리한다. 즉, 스트림이란, 시간순서에 의해 전달되어진 값들의 collection 정도로 이해해 보자.</li><li>각각의 스트림은 새로 만들어(branch)져서 새로운 스트림이 될 수도 있고, 여러개의 스트림이 합쳐(merge) 질수 도 있다.</li><li>스트림은 map, filter과 같은 함수형 메소드를 이용하여, immutable하게 처리할 수 있다.</li><li>스트림을 listening 함으로써 데이터의 결과값을 얻는다. 이를 subscribe라고 표현한다.</li></ul><img src="/blog/2016/06/22/Reactive-Programming/rxjs_stream.png"><h3 id="Observable과-Observer"><a href="#Observable과-Observer" class="headerlink" title="Observable과 Observer"></a>Observable과 Observer</h3><blockquote><p>An observer subscribes to an Observable. An Observable emits items or sends notifications to its observers by calling the observers’ methods.<br><a href="http://reactivex.io/documentation/observable.html" rel="external nofollow noopener noreferrer" target="_blank">http://reactivex.io/documentation/observable.html</a></p></blockquote><ul><li>Observable은 observer의 메소드를 호출하면서 item이나 정보등을 호출(emit)하는 역할을 한다. Observer는 <code>onNext, onError, onCompleted</code>의 메소드가 구현되어 있다.</li><li>Observer는 observable을 subscribe한다. Observer는 Subscriber, watcher, reactor로 불려진다.</li></ul><h3 id="그럼-왜-Reactive-Programming-인가"><a href="#그럼-왜-Reactive-Programming-인가" class="headerlink" title="그럼 왜 Reactive Programming 인가?"></a>그럼 왜 Reactive Programming 인가?</h3><blockquote><p>Apps nowadays have an abundancy of real-time events of every kind that enable a highly interactive experience to the user. We need tools for properly dealing with that, and Reactive Programming is an answer.</p></blockquote><ul><li><p>함수형으로 만들기 때문에, 하나의 함수는 그 역할 자체에 집중할수 있다.</p></li><li><p>Promise의 장점을 극대화할 수 있다.<br>Reactive Programming에서 갑자기 Promise를 이야기하는 이유는, RxJS의 Observable이 Promise와 개념적으로 유사하다. 차이가 있다면, <code>Promise는 단 하나의 value를 다룰 수 있지만, Observable은 다수의 value를 다룰 수 있다.</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myObservable.subscribe(successFn, errorFn);</span><br><span class="line">myPromise.then(successFn, errorFn);</span><br></pre></td></tr></table></figure><blockquote><p>The Promise is an Observable<br>The Observable is not a Promise<br>ES7 스펙에 Observable이 제안되어 있지만 현재는 표준이 아니다. 하지만, Promise는 Promises/A+ 표준이다.</p></blockquote><p>처음 Promise를 접할 때에는 좀 낯설었지만, 실제 구현상의 편리함이나, 로직의 심플함, 비동기 처리를 동기식으로 개발할 수 있는 장점 덕분에, 좀더 알아먹기 쉬운 코딩을 할수 있다. 익숙해지면, Observable은 Promise보다 더 강력하다.</p></li><li><p>Observable은 A steam에 의해 B stream이 영향을 받는 경우, A만 바꿔도 B가 자동으로 바꿀 수 있도록 구성할 수 있어서, 데이터의 동기화를 간편하게 할 수 있다. 이러한 이유는 A와 B stream 사이의 관계를 <code>선언적</code>으로 선언했기 때문에 가능하다. <a href="https://jsbin.com/yikabo/3/edit?html,js,output" rel="external nofollow noopener noreferrer" target="_blank">[예제]</a></p></li></ul><h3 id="RxJS-참조-문서"><a href="#RxJS-참조-문서" class="headerlink" title="RxJS 참조 문서"></a>RxJS 참조 문서</h3><h4 id="ReactiveX-공식"><a href="#ReactiveX-공식" class="headerlink" title="ReactiveX 공식"></a>ReactiveX 공식</h4><p><a href="http://reactivex.io/" rel="external nofollow noopener noreferrer" target="_blank">http://reactivex.io/</a></p><h4 id="stream-생성-static-메소드"><a href="#stream-생성-static-메소드" class="headerlink" title="stream 생성 static 메소드"></a>stream 생성 static 메소드</h4><p><a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/which-static.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/which-static.md</a></p><h4 id="stream-operator"><a href="#stream-operator" class="headerlink" title="stream operator"></a>stream operator</h4><p><a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/which-instance.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/gettingstarted/which-instance.md</a></p><h4 id="observable-api"><a href="#observable-api" class="headerlink" title="observable api"></a>observable api</h4><p><a href="https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Reactive-Extensions/RxJS/blob/master/doc/api/core/observable.md</a></p><h4 id="operator-다이얼그램"><a href="#operator-다이얼그램" class="headerlink" title="operator 다이얼그램"></a>operator 다이얼그램</h4><p><a href="http://rxmarbles.com/" rel="external nofollow noopener noreferrer" target="_blank">http://rxmarbles.com/</a></p><h3 id="실습한-예제"><a href="#실습한-예제" class="headerlink" title="실습한 예제"></a>실습한 예제</h3><p>실습하면서 공부한 예제<br><a href="http://jsbin.com/pekemu/edit?js,console,output" rel="external nofollow noopener noreferrer" target="_blank">http://jsbin.com/pekemu/edit?js,console,output</a></p><h3 id="생각해볼-문제"><a href="#생각해볼-문제" class="headerlink" title="생각해볼 문제"></a>생각해볼 문제</h3><ul><li>map, filter와 같은 함수를 계속 쓰면, 객체를 계속 만드는 거 아닌가?<blockquote><p>RxJS는 <code>객체를 재활용함</code>. 문제없음. 음하하하</p><iframe src="https://www.slideshare.net/slideshow/embed_code/key/3sawQBCeBad7VI" width="100%" height="485px" frameborder="0" allowfullscreen></iframe><p>RxJS and Reactive Programming - Modern Web UI - May 2015 from Ben Lesh</p></blockquote></li><li>RxJS와 Reactive Programing은 같은 건가?<blockquote><p>아니, RxJS는 Reactive Programming에서 시간을 제어할 수 있는 Schedule 기능, 등이 포함되어 있는 라이브러리이다.</p></blockquote></li></ul>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/06/22/Reactive-Programming/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angular2의 이상한 기호들</title>
      <link>http://sculove.github.io/blog/2016/06/13/angular2-strange-char/</link>
      <guid>http://sculove.github.io/blog/2016/06/13/angular2-strange-char/</guid>
      <pubDate>Mon, 13 Jun 2016 07:02:17 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;Angular2가-낯선-이유&quot;&gt;&lt;a href=&quot;#Angular2가-낯선-이유&quot; class=&quot;headerlink&quot; title=&quot;Angular2가 낯선 이유&quot;&gt;&lt;/a&gt;Angular2가 낯선 이유&lt;/h3&gt;&lt;p&gt;TypeScript를 기본으로 개
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Angular2가-낯선-이유"><a href="#Angular2가-낯선-이유" class="headerlink" title="Angular2가 낯선 이유"></a>Angular2가 낯선 이유</h3><p>TypeScript를 기본으로 개발하는 Angular2가 생소하게 느껴지는 것은 당연한 일 일지도 모른다. 하지만, 그것보다 Angular2가 더 낯설게 느껴지는 이유는 Angular2에서만 사용하는 이상한 기호들(<code>[], (), [()], *, #</code>) 때문이다.</p><h3 id="Binding"><a href="#Binding" class="headerlink" title="Binding"></a>Binding</h3><p>angular1의 장점이 Two-way binding이자, 단점 또한 Two-way binding이다. Two-way binding으로 사용성은 증가했지만, 이로 인해, 성능의 단점이 생기게 된 것이다.<br>Angular2에서는 이러한 단점을 줄이고자, 이상한 기호들(<code>[],(),[()]</code>)을 이용하여 다양한 binding을 제공한다.</p><img src="/blog/2016/06/13/angular2-strange-char/binding.png"><h4 id="One-way-binding"><a href="#One-way-binding" class="headerlink" title="One-way binding"></a>One-way binding</h4><ul><li>model에서 view로의 One-way binding은 <code>{ {} }, [], bind-target</code>을 사용한다.</li><li>view에서 model로의 One-way binding은 <code>(), on-target</code>을 사용한다. 주로 이벤트가 그 대상이다.</li></ul><h4 id="Two-way-binding"><a href="#Two-way-binding" class="headerlink" title="Two-way binding"></a>Two-way binding</h4><ul><li>model과 view의 Two-way binding은 <code>[()], bindon-target</code>을 사용한다.</li></ul><p>참고URL : <a href="https://angular.io/docs/ts/latest/guide/template-syntax.html#!#binding-syntax" rel="external nofollow noopener noreferrer" target="_blank">https://angular.io/docs/ts/latest/guide/template-syntax.html#!#binding-syntax</a></p><h3 id="star"><a href="#star" class="headerlink" title="* (star)"></a>* (star)</h3><p>Angular 예제에서 처음 접하게되는 <code>*ngFor</code>의 예는 그냥 쓰이기에는 쉬운 것 같지만, 왜 <code>*</code>를 붙이지라고 생각해보면 꽤 이상하다는 것을 느낄 수 있다.<br>angular에서는 데이터를 순환하여 화면에 표현하고자 한다면 다음과 같이 작성한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span>&gt;</span>&#123;&#123;hero.fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>*</code>는 사용하기 쉽게 쓰기 위한, sugar code이다. ngFor, ngIf, ngSwitch와 같이 DOM 변경이 필요한 디렉티브인 경우에는 <code>template</code> 디렉티브를 사용 한다. 즉 위의 코드는 다음과 같이 사용한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template 디렉티브 property 로 값을 전달 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">template</span>=<span class="string">"ngFor:let hero of heroes"</span>&gt;</span>&#123;&#123;hero.fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- template 디렉티브에 직접 값을 전달 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> [<span class="attr">ngFor</span>]=<span class="string">"let hero of heroes"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;hero.fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>하지만, <code>*</code>를 사용하면 다음과 같이 간단히 사용할 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> *<span class="attr">ngFor</span>=<span class="string">"let hero of heroes"</span>&gt;</span>&#123;&#123;hero.fullName&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>참고URL : <a href="https://angular.io/docs/ts/latest/guide/template-syntax.html#!#star-template" rel="external nofollow noopener noreferrer" target="_blank">https://angular.io/docs/ts/latest/guide/template-syntax.html#!#star-template</a></p><h3 id="sharp"><a href="#sharp" class="headerlink" title="# (sharp)"></a># (sharp)</h3><p>Angular2에서 보는 다음 코드역시 낯설다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">box</span> (<span class="attr">keyup</span>)=<span class="string">"0"</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>우선 여기서 #은 CSS Selector에 익숙한 사용자라면, 아이디를 지정하는 것인가? 라고 생각할 수 있겠지만, 실제 이 <code>#</code>의 의미는 다르다.</p><p><code>#box</code>는 <code>템플릿 내에서 사용하는 input 엘리먼트 인스턴스 자신을 가리키는 변수이다</code>. 즉, <code>Template reference variables</code> 이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;box.value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>따라서, 위와 같이 사용하면, input 엘리먼트. 즉, <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLInputElement" rel="external nofollow noopener noreferrer" target="_blank">HTMLInputElement</a>의 value를 가리킨다.</p><p>다만, 여기서 주의할 것은 Template reference variables는 바인드가 되어 있지 않으면, 사용할 수 없다.<br>따라서, 위의 코드 처럼 keyup 이벤트에 가장 간단한 표현인 <code>&quot;0&quot;</code>을 의도적으로 바인딩 시킨다.</p><p>실제 템플릿 코드는 다음과 같이 사용할 수 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> #<span class="attr">box</span> (<span class="attr">keyup</span>)=<span class="string">"0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;box.value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/06/13/angular2-strange-char/#disqus_thread</comments>
    </item>
    
    <item>
      <title>JavaScript Test</title>
      <link>http://sculove.github.io/blog/2016/05/17/JavascriptTest/</link>
      <guid>http://sculove.github.io/blog/2016/05/17/JavascriptTest/</guid>
      <pubDate>Tue, 17 May 2016 05:22:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;JavaScript-테스트&quot;&gt;&lt;a href=&quot;#JavaScript-테스트&quot; class=&quot;headerlink&quot; title=&quot;JavaScript 테스트&quot;&gt;&lt;/a&gt;JavaScript 테스트&lt;/h2&gt;&lt;p&gt;JavaScript는 사용자 행위를 직접
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="JavaScript-테스트"><a href="#JavaScript-테스트" class="headerlink" title="JavaScript 테스트"></a>JavaScript 테스트</h2><p>JavaScript는 사용자 행위를 직접적으로 담당하는 부분이기 때문에, 예외 사항도 많고, 고민해야할 부분도 많다. 뿐만아니라, 사용자의 행위에 따른 대응(?)이 거의 대부분 비동기의 이벤트로 처리하기 때문에, 실제로 무결점의 프로그램을 개발하기는 쉬운 문제가 아니다.</p><p>이 글은 이러한 JavaScript를 효과적으로 테스트하고 유지보수하기 위해, 테스트 환경을 구축하는 간단한 메모이다.</p><h3 id="테스트-프레임웍-Mocha-chai"><a href="#테스트-프레임웍-Mocha-chai" class="headerlink" title="테스트 프레임웍 (Mocha + chai)"></a>테스트 프레임웍 (Mocha + chai)</h3><p>JavaScript 테스트 프레임웍은 대표적으로 QUnit, Mocha, Jasmine과 같은 프레임웍이 존재한다. 각자 장단점이 있지만, 이 글에서는 가장 확장성이 용이한, mocha에 대해 이야기한다.<br><a href="http://mochajs.org/" rel="external nofollow noopener noreferrer" target="_blank">mocha</a>는 node와 브라우저 모두에 적용할 수 있고, TDD, BDD, QUnit, export 스타일 모두 적용할 수 있는 프레임웍이다. assertion문 또한, 취향(?)에 따라 선택하여 적용할 수 있다.<br>많은 assertion문이 있지만, expect, should, assert를 모두 지원하는 <a href="http://chaijs.com/" rel="external nofollow noopener noreferrer" target="_blank">chai</a>와 함께 mocha를 사용해 보자.</p><img src="/blog/2016/05/17/JavascriptTest/mocha-chaijs.png"><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mocha chai --save-dev</span><br></pre></td></tr></table></figure><h4 id="환경-설정"><a href="#환경-설정" class="headerlink" title="환경 설정"></a>환경 설정</h4><h5 id="mocha"><a href="#mocha" class="headerlink" title="mocha"></a>mocha</h5><p>mocha는 mocha.opt 파일을 통해 옵션을 설정할 수 있으며, mocha cli를 이용하여 테스트를 진행 할 수 있다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/mocha</span><br></pre></td></tr></table></figure><h5 id="chai"><a href="#chai" class="headerlink" title="chai"></a>chai</h5><p>chai는 chai.expect, chai.should, chai.assert와 같이 사용해야함으로 귀찮다. 전역에 expect, should, assert를 저장하여, 테스트 코드에서는 expect, should, assert를 사용할 수 있도록 하자.<br>isomorphic 환경을 위해, require 지원여부에 따라 처리하는 파일을 테스트 파일 전에 포함시킨다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> expect;</span><br><span class="line"><span class="keyword">var</span> assert;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">require</span> === <span class="string">"function"</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> chai = <span class="built_in">require</span>(<span class="string">"chai"</span>);</span><br><span class="line">  expect = chai.expect;</span><br><span class="line">  assert = chai.assert;</span><br><span class="line">  chai.should();</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  expect = chai.expect;</span><br><span class="line">  chai.should();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/chaijs/chai-http" rel="external nofollow noopener noreferrer" target="_blank">chai-http</a>를 이용하면 request에 대한 테스트도 할 수 있다.</p></blockquote><h3 id="테스트-러너-karma"><a href="#테스트-러너-karma" class="headerlink" title="테스트 러너 (karma)"></a>테스트 러너 (karma)</h3><p>JavaScript는 브라우저 환경에 따라, 테스트 결과가 달라지기 때문에, 실제 브라우저에서 테스트를 꼭! 해야만한다. 테스트 러너는 여러 환경에서 동일 테스트를 호출 할 수 있다.</p><img src="/blog/2016/05/17/JavascriptTest/karma.png"><p>대표적인 툴로 <a href="https://karma-runner.github.io/" rel="external nofollow noopener noreferrer" target="_blank">Karma</a>가 있다.</p><h4 id="mocha와-연동"><a href="#mocha와-연동" class="headerlink" title="mocha와 연동"></a>mocha와 연동</h4><p>mocha와 연동하기 위해서는 <a href="https://github.com/karma-runner/karma-mocha" rel="external nofollow noopener noreferrer" target="_blank">karma-mocha</a>를 설치하고, mocha 스타일의 로깅을 보고자 한다면, <a href="https://github.com/litixsoft/karma-mocha-reporter" rel="external nofollow noopener noreferrer" target="_blank">karma-mocha-repoter</a>를 설치한다.</p><h4 id="커버리지-연동"><a href="#커버리지-연동" class="headerlink" title="커버리지 연동"></a>커버리지 연동</h4><p>커버리지 툴인 istanbul을 연동하기 위해서는 <a href="https://github.com/karma-runner/karma-coverage" rel="external nofollow noopener noreferrer" target="_blank">karma-coverage</a>를 설치한다.</p><h4 id="브라우저"><a href="#브라우저" class="headerlink" title="브라우저"></a>브라우저</h4><p>실제 Karma를 이용하여 테스트를 해보니, 꼭 브라우저만 테스트 할 수 있는게 아니라, 여러가지 타스크를 한꺼번에 실행하는 용도로 사용 할 수도 있을 것 같다.<br><a href="https://karma-runner.github.io/0.13/config/browsers.html" rel="external nofollow noopener noreferrer" target="_blank">https://karma-runner.github.io/0.13/config/browsers.html</a></p><p><a href="https://github.com/karma-runner/karma-script-launcher" rel="external nofollow noopener noreferrer" target="_blank">karma-script-launcher</a>를 이용하면 다음과 같이 브라우저를 script로 실행할수 있다. 첫번째 파라미터로 url이 전달된다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// in the karma.conf.js</span></span><br><span class="line">browsers: [<span class="string">'/usr/local/bin/custom-browser.sh'</span>],</span><br></pre></td></tr></table></figure><h3 id="ES6-지원"><a href="#ES6-지원" class="headerlink" title="ES6 지원"></a>ES6 지원</h3><p>소스와 테스트 파일을 ES6로 작성한 경우에는 테스트가 실행 되기 전에 사전에 컴파일을 할수 있다.</p><img src="/blog/2016/05/17/JavascriptTest/es6-logo.png"><h4 id="mocha-1"><a href="#mocha-1" class="headerlink" title="mocha"></a>mocha</h4><ul><li><code>--compilers</code> 옵션을 이용하여 babel-register,등과 같은 모듈을 이용하여 테스트전에 컴파일 할 수 있다. 하지만, 테스트 환경(node, browser)이 es6을 지원하면 그럴 필요도 없다.</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./node_modules/.bin/mocha --compilers js:babel-register</span><br></pre></td></tr></table></figure><ul><li><code>--harmony</code> 옵션을 사용하여 테스트 코드에 대해 ES6을 사용할 수 있다.</li></ul><h4 id="karma"><a href="#karma" class="headerlink" title="karma"></a>karma</h4><ul><li>karma의 preprocessors를 이용</li><li><a href="https://github.com/babel/karma-babel-preprocessor" rel="external nofollow noopener noreferrer" target="_blank">karma-babel-preprocessor</a>를 함께 사용하여, 테스트 전 코드(테스트 코드와, 실제소소)를 변환</li><li>babel 변경시, es6을 umd방식으로 변경해야 정상동작함. (브라우저에서는 commonjs를 지원하지 않음)<br><a href="http://stackoverflow.com/questions/33915575/babel-karma-babel-processor-not-converting-es6-es5-for-karma-tests" rel="external nofollow noopener noreferrer" target="_blank">http://stackoverflow.com/questions/33915575/babel-karma-babel-processor-not-converting-es6-es5-for-karma-tests</a></li></ul><h3 id="Mock-up"><a href="#Mock-up" class="headerlink" title="Mock-up"></a>Mock-up</h3><p>JavaScript는 비동기 상황을 테스트해야하기 때문에, 실제로 테스트 코드를 짜는 것은 굉장히 까다로운 작업이 될수 있다. 이러한 것을 해결하기 위한 하나의 방법으로 stub, mock object를 만드는 방법이 있다.</p><blockquote><h4 id="Mock-VS-Stub"><a href="#Mock-VS-Stub" class="headerlink" title="Mock VS Stub"></a>Mock VS Stub</h4></blockquote><ol><li>어떻게 테스트 결과를 검증하는가? (상태 검증 VS 행위 검증)</li><li>테스팅하고 디자인하는 철학적인 차이<br><a href="http://martinfowler.com/articles/mocksArentStubs.html" rel="external nofollow noopener noreferrer" target="_blank">http://martinfowler.com/articles/mocksArentStubs.html</a></li></ol><h4 id="Sinon-JS"><a href="#Sinon-JS" class="headerlink" title="Sinon.JS"></a>Sinon.JS</h4><p><a href="http://sinonjs.org/" rel="external nofollow noopener noreferrer" target="_blank">sinon</a>은 spy, stub, mock, fakeTimer, fackHttpRequest, fackServer, 등을 지원하는 단위테스트 프레임웍이다.</p><ul><li>함수 호출 여부(행위)를 검증하고자 한다면, stub를 이용한다. (이벤트의 핸들러 테스트)</li><li><a href="http://sinonjs.org/docs/#clock" rel="external nofollow noopener noreferrer" target="_blank">timer</a>, <a href="http://sinonjs.org/docs/#server" rel="external nofollow noopener noreferrer" target="_blank">XMLHTTPRequest</a>의 fake 테스트가 가능</li></ul><p>개인적으로… 써보니 제약은 있지만, 꽤 좋은 라이브러리다.이건 별도로 더 확인해 봐야 겠다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/05/17/JavascriptTest/#disqus_thread</comments>
    </item>
    
    <item>
      <title>진화의 시작</title>
      <link>http://sculove.github.io/blog/2016/04/19/2016-fetrend/</link>
      <guid>http://sculove.github.io/blog/2016/04/19/2016-fetrend/</guid>
      <pubDate>Tue, 19 Apr 2016 13:32:31 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;진화의-시작-2016년-Front-End-기술동향&quot;&gt;&lt;a href=&quot;#진화의-시작-2016년-Front-End-기술동향&quot; class=&quot;headerlink&quot; title=&quot;진화의 시작 - 2016년 Front End 기술동향&quot;&gt;&lt;/a&gt;진화의
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="진화의-시작-2016년-Front-End-기술동향"><a href="#진화의-시작-2016년-Front-End-기술동향" class="headerlink" title="진화의 시작 - 2016년 Front End 기술동향"></a>진화의 시작 - 2016년 Front End 기술동향</h3><p>2016년 FrontEnd 기술동향을 살펴보는 발표자료.</p><img src="/blog/2016/04/19/2016-fetrend/newjavascript.jpg"><iframe src="https://sculove.github.io/slides/2016_FETrend/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe><p>자료: <a href="https://sculove.github.io/slides/2016_FETrend/">https://sculove.github.io/slides/2016_FETrend/</a></p><h4 id="발표한-행사-정보"><a href="#발표한-행사-정보" class="headerlink" title="발표한 행사 정보"></a>발표한 행사 정보</h4><p>[2016.04.19] 웹월드 모바일 컨퍼런스 2016에 발표한 자료 <a href="http://www.bizdeli.com/webworldmobile/index.asp" rel="external nofollow noopener noreferrer" target="_blank">http://www.bizdeli.com/webworldmobile/index.asp</a></p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/04/19/2016-fetrend/#disqus_thread</comments>
    </item>
    
    <item>
      <title>아버지 교육 4주차</title>
      <link>http://sculove.github.io/blog/2016/04/14/father4/</link>
      <guid>http://sculove.github.io/blog/2016/04/14/father4/</guid>
      <pubDate>Thu, 14 Apr 2016 13:52:04 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/blog/2016/04/14/father4/father4.jpg&quot;&gt;

&lt;p&gt;배려와 협동이라는 주제로 이야기를 나눴다.&lt;br&gt;우선 이 배려와 협동이라는 게 타인을 전제로 깔기 때문에 &lt;code&gt;추상적 사고&lt;/code&gt;가 바탕이 되어야
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2016/04/14/father4/father4.jpg"><p>배려와 협동이라는 주제로 이야기를 나눴다.<br>우선 이 배려와 협동이라는 게 타인을 전제로 깔기 때문에 <code>추상적 사고</code>가 바탕이 되어야 가능하단다.</p><p>즉, 사고의 힘을 키워주어야 한단다.</p><h3 id="귀납적-교육"><a href="#귀납적-교육" class="headerlink" title="귀납적 교육"></a>귀납적 교육</h3><p>학교의 교육은 <code>연역법</code>식 교육. 결론을 미리 이야기하고, 설명하는 방식으로, 빠르게 지식을 습득할 수는 있지만, 생각하는 힘을 기르지는 못한다.<br>따라서 <code>귀납적</code>식 교육을 해야한다. 과정을 통해 결과를 찾아가는 교육이 필요하다.</p><p>이에 대한 내용은 <code>거꾸로 교실</code> 이라는 게 있단다. 찾아보니, 의외로 많은 내용이 있었다. 실제 내용은 좀 다른 것이지만, 이것도 따로 좀 봐봐야겠다.</p><div class="video-container"><iframe src="//www.youtube.com/embed/a5Q8Ruv4xVc" frameborder="0" allowfullscreen></iframe></div><h3 id="취미-게임"><a href="#취미-게임" class="headerlink" title="취미. 게임"></a>취미. 게임</h3><p>아이에게 취미를 갖게 해주라는 이야기도 하셨다. 개인적으로 취미가 없다 보니. 물론, 주식과 같은 게 있지만, 마냥 즐길 수 있는 취미가 없는 내 입장에서는 아이가 즐거워 하는 일이 있다면 도시락 싸들고 가면서 시켜주고 싶다.<br>결론은, 이말년의 <code>즐기는자 모드</code>를 만들어 주라는 이야기.</p><img src="/blog/2016/04/14/father4/enjoy.png"><h3 id="놀이-경쟁"><a href="#놀이-경쟁" class="headerlink" title="놀이, 경쟁?"></a>놀이, 경쟁?</h3><p>공부를 <code>놀이</code>같이 하라는 것이다.<br>실제로 해 봤는데, 숫자 공부를 “둥글게 둥글게” 놀이로 하는 거였다.<br>우선 한 사람당, 1,2,3,4와 같은 숫자로 지정하고, 둥글게 둥들게 돌면서, 숫자 15를 만들어라. 라는 식으로, 협동해서 문제를 해결하는 식의 놀이였다.<br>만약, 한 명이 남게 되면, 다시 한 명도 안남기고 숫자의 합을 맞추면서 조를 다시 짜바라는 식으로, 배려와 협동을 느낄수 있도록 하는 놀이를 하는 방식이었다.</p><p>이런 교육은 <code>경쟁</code>보다는 협력과 배려를 키울수 있는 좋은 방식인 것 같다.</p><h3 id="교육-끝"><a href="#교육-끝" class="headerlink" title="교육 끝."></a>교육 끝.</h3><p>4 주간의 교육이 끝났는데, 가장 놀라운 것은 정말로 좋은 아버지들이 많구나 였다.<br>개인적으로 난 좋은 아빠야 라는 생각이 부끄러운 4주였다.</p><p>그리고 가장 중요한 것!<br>아버지가 가정에서 해야할 일이 중요한 일이 많구나. 부터. 아버지로서 공부해야하고, 노력해야하는 부분이 정말로 많다는 것을 느꼈다.<br>다음에도 이런 교육이 있으면 꼭!꼭!꼭! 참여해야 겠다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/04/14/father4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>아버지 교육 3주차</title>
      <link>http://sculove.github.io/blog/2016/04/07/father3/</link>
      <guid>http://sculove.github.io/blog/2016/04/07/father3/</guid>
      <pubDate>Thu, 07 Apr 2016 13:52:04 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;책임이라는 주제로 이야기를 나눴다.&lt;/p&gt;
&lt;h3 id=&quot;책임&quot;&gt;&lt;a href=&quot;#책임&quot; class=&quot;headerlink&quot; title=&quot;책임.&quot;&gt;&lt;/a&gt;책임.&lt;/h3&gt;&lt;p&gt;책임 져야하는 범위. 생각이 아닌 타인에게 보여준 행동,말은 책임을 져야한
        
      
      </description>
      
      <content:encoded><![CDATA[<p>책임이라는 주제로 이야기를 나눴다.</p><h3 id="책임"><a href="#책임" class="headerlink" title="책임."></a>책임.</h3><p>책임 져야하는 범위. 생각이 아닌 타인에게 보여준 행동,말은 책임을 져야한다고 이야기했다. 즉, 책임이라는 것을 논할때의 기본적인 바탕은 <code>타인</code>이라는 존재를 인식하는 단계부터 이다.<br>따라서, 아이에게 책임이라는 것을 심어주기 위해서는 타인을 인지할수 있는 <code>추상적인 사고</code>를 할 수 있을 정도로 성숙해야 한다.</p><blockquote><p>유태인은 자식에게 “무조건 해보라”고 이야기한단다. 다만, 너가 한 행동에 대해서는 책임을 져야한다고 이야기한다.<br>반면, 우리 나라 부모들은 자식에게 “하지마라” 부터 이야기 한다. 이렇게 되면 애들은 부모에게 부정적인 인식을 먼저 가진 뿐 자신의 행동에 책임을 질줄 모르게 된다.</p></blockquote><h3 id="사육-양육-교육"><a href="#사육-양육-교육" class="headerlink" title="사육, 양육, 교육"></a>사육, 양육, 교육</h3><p>강사님이 이야기한 것 중에, 책임과 관련해서, 사육,양육,교육을 구분하는 이야기를 들었는데 정말 인상 깊었다.</p><p>만약, 아이가 학교에서 유리창을 깨뜨려 3만원을 변상을 해야하는 상황이 되었을때, 부모의 태도에 따라, 사육, 양육, 교육이 무엇인지 구분할 수 있다.</p><h4 id="사육"><a href="#사육" class="headerlink" title="사육"></a>사육</h4><p>아이에게는 “어디 다친데는 없니?”라고 물어보고, 선생님께 직접 찾아가 어떻게 아이가 유리를 깨게 되었는지 듣고, 직접 3만원을 변상하는 부모.</p><h4 id="양육"><a href="#양육" class="headerlink" title="양육"></a>양육</h4><p>아이에게 “어디 다친데는 없니?” 라고 물어본 후, 어떻게 해서 이런일이 있었는지, 아이가 잘못한 일인지를 확인한 후, 3만원을 아이에게 전달한다. 그리고, 선생님께 “잘못했다”고 꼭! 이야기 하라고 전하는 부모.</p><h4 id="교육"><a href="#교육" class="headerlink" title="교육"></a>교육</h4><p>아이에게 “어디 다친데는 없니?” 라고 물어본 후, 어떻게 해서 이런일이 있었는지, 아이가 잘못한 일인지를 확인한 후, 3만원을 아이에게 전달한다. 그리고, 선생님께 “잘못했다”고 이야기하도록 시키는 부모.<br>더불어, 아이가 책임질수 있도록 시키는 부모.<br>아이에게 이렇게 이야기한다. “너의 잘못으로 우리가정에 3만원의 피해가 발생했다. 너는 경제적으로 돈을 벌수 있으니, 아빠가 대신 빌려주마. 대신, 너는 3만원 값어치에 해당하는 일을 해야한다”</p><p>부모는 칠판과 동전 (100원짜리, 200원짜리, 300원짜리)을 준비한다.</p><ul><li>규칙1. 불평을 하던간에 부모가 시키는 일을 하면 100원 변제</li><li>규칙2. 부모가 시키는 일을 즐겁게 하면 200원 변제</li><li>규칙3. 부모가 시키지도 않았는데 스스로 하면 300원 변제.</li></ul><p>이런 규칙을 지켜서 아이가 책임을 질수 있도록 한다.<br>그리고 아이가 3만원을 모두 갚았을때는 아이를 꼭 안아주고 이렇게 이야기해준다. “아들 3만원 갚으느라 정말 고생했어. 아빠는 우리 아들이 자랑스럽구나.”</p><p><code>교육</code>의 사례를 들으면서, 생각만해도, 너무 감동적인 상황일 것 같다. 부모입장에서도 뿌듯하고, 자식입장에서도 책임의 소중함을 느낄수 있을것 같다. 다른건 몰라도 이건 꼭! 실천해봐야겠다.</p><h4 id="Debate-VS-Discuss"><a href="#Debate-VS-Discuss" class="headerlink" title="Debate VS Discuss"></a>Debate VS Discuss</h4><p>아버지들 끼리도 debate이라는 것을 해보았다.<br>Debate은 <code>논쟁</code>하는 것이고, Discuss는 <code>상의 토론</code>하는 것이란다.<br>내용은 성경에 나오는 <code>신약성경 마태복음 20장 1~16</code> 장 내용이다.</p><blockquote><p>하루 품삯을 약속하고 일꾼을 뽑는 포도농장 주인이 아침 7시에도 일꾼을 뽑고, 9시에도 뽑고 12시에도 뽑고, 오후3시에도 뽑고, 5시에도 뽑은 후, 6시에 일을 마감하며, 모두에게 하루 품삯(1데나리온)을 주었다. 이때, 7시에 뽑은 사람이 오후 5시에 들어온 사람과 어떻게 똑같이 품삯을 주느냐고 따지는 이야기이다.</p></blockquote><p>7시에 온사람은 주인에게 <code>불공평</code>에 대해 불만을 제기했지만, 오히려 주인은 <code>공평하게</code> 나눠 줬기에 문제가 없다고 반론을 하고 있다. 즉, <code>형평성의 문제를 형평성으로 받아치고 있다.</code><br>또한, 일용직 노동자를 바라보는 주인의 마음을 헤아릴 수 있는 의식이 성장해야한다고 이야기했다.</p><p>아이들도 때론 괴변으로 이야기 하지만, 부모가 논리적으로 또는 이런 debate에 대한 준비가 되어 있지 않다면, 아이에게 끌려가게 된다고 한다. 또한, 아이와도 함께 이런류의 debate을 해 나가면서 아이와 부모 모두 의식을 성장할 수 있다고 한다.</p><p>솔직히 이 debate에 대해서는 아이가 어려서 아직 감이 안왔지만, 아이와 토론하고, 논쟁하는 것 또한 굉장히 재미있는 시간이 될 것 같긴 하다.</p><p>데비드 호킨스의 <a href="http://www.yes24.com/24/goods/5661671?scode=032&OzSrank=1" rel="external nofollow noopener noreferrer" target="_blank">의식혁명</a>이라는 책을 추천하셨다. 이 책도 읽어 봐야겠다.</p><img src="/blog/2016/04/07/father3/father3.jpg">]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/04/07/father3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>아버지 교육 2주차</title>
      <link>http://sculove.github.io/blog/2016/03/31/father2/</link>
      <guid>http://sculove.github.io/blog/2016/03/31/father2/</guid>
      <pubDate>Thu, 31 Mar 2016 13:52:04 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/blog/2016/03/31/father2/edu.jpg&quot;&gt;

&lt;h3 id=&quot;중2병-사춘기&quot;&gt;&lt;a href=&quot;#중2병-사춘기&quot; class=&quot;headerlink&quot; title=&quot;중2병. 사춘기&quot;&gt;&lt;/a&gt;중2병. 사춘기&lt;/h3&gt;&lt;p&gt;중2
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2016/03/31/father2/edu.jpg"><h3 id="중2병-사춘기"><a href="#중2병-사춘기" class="headerlink" title="중2병. 사춘기"></a>중2병. 사춘기</h3><p>중2병이라 불리우는 사춘기. 아이가 분노에 차있는 게 정상적인 발단 과정인가?<br>사춘기가 병리학적 문제인가? 아니면 자연스러운것인가?</p><p>결론부터 이야기하면 분노에 차있는 것은 문제이다. 불만의 표출일수도 있고, 사랑을 못받아서 그럴수도 있다. 하지만, 요즘 어떤 부모가 아이에게 사랑을 안주는 사람이 있는가? 적어도 오늘 이 자리에 나온 아빠들은 그런 분 같지는 않았다.<br>그렇다면, 무엇이 문제인가?<br>우선 사춘기라는 사전적인 의미부터 찾아보자.</p><p><a href="http://krdic.naver.com/detail.nhn?docid=19479800" rel="external nofollow noopener noreferrer" target="_blank">사춘기(思春期)</a><br>생각할 사에 봄춘자. 봄을 생각한다. 즉, <code>나는 무엇인가? 에 대한 정체성을 생각하는 시기이다.</code> 인생의 방향을 찾는 시기. 잘하는 것, 하고싶은 것들.<br>이런 것들을 생각하는 시기에 왜 분노가 생기는가?<br>아이는 절벽 위의 어린새와 같은 입장이기 때문이다. 뛰어는 내려야 하는데 뛰어 내리지 못하는 무능함, 부족함. 이런것들로 인해 분노가 생긴다고 한다.<br>그럼 이때 부모는 어떻게 해야 하나?<br>절벽에서 밀어뜨려서 혼자 살수 있도록 도와주는 것. 아이가 하고 싶어하는 직업체험같은 것을 도와주는 것이 필요할 것 같다.</p><h3 id="아이의-성장과정에서-부모의-역할"><a href="#아이의-성장과정에서-부모의-역할" class="headerlink" title="아이의 성장과정에서 부모의 역할."></a>아이의 성장과정에서 부모의 역할.</h3><img src="/blog/2016/03/31/father2/growth.jpg"><p>사춘기 전까지는 친밀감이 더 중요하고, 그 이후부터는 아이의 눈높이를 부모에 맞추도록 하는게 중요함. 사춘기 이후 부터는 아버지의 역할이 절대적.<br>아이에게 재량을 주고, 아이에게 선택권을 주는 것은 사춘기 이후부터.</p><p>융의 관점에서 이야기해 준 해와달이 된 오누이 이야기.<br>부모의 불안심리가 오히려 아이를 해칠 수 있다는 이야기. 등<br>한마디로, 너무 과잉보호하지 말아라는 이야기.</p><p>아빠로서 자식을 대하는 기준을 알 수 있어서 좋았다.<br>이런 이야기 들으면서 내가 고쳐야겠다고 생각한 것은</p><blockquote><ol><li>먹을 것이 있으면 아빠 먼저, 엄마. 그리고 나서 아이이게 주기</li><li>아이에게 존댓말 하는 바보 짓하지 않기.</li><li>아이에게 존댓말 하게 시키기.</li></ol></blockquote><p>2시간이 넘는 시간을 들으면서도, 시간 가는줄 몰랐다.<br>또한, 정말 좋은 아빠들 많구나 나는 생각도 들었다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/03/31/father2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>아버지 교육 1주차</title>
      <link>http://sculove.github.io/blog/2016/03/24/father1/</link>
      <guid>http://sculove.github.io/blog/2016/03/24/father1/</guid>
      <pubDate>Thu, 24 Mar 2016 13:14:13 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/blog/2016/03/24/father1/edu1.jpg&quot;&gt;

&lt;p&gt;시에서 하는 아버지 교육을 다 받으면, 토요일 아들과 함께 하는 행사에 참여할수 있다고 하여, 4주간의 아버지 교육을 들으러 갔다.&lt;/p&gt;
&lt;p&gt;강사님이 처음에는
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2016/03/24/father1/edu1.jpg"><p>시에서 하는 아버지 교육을 다 받으면, 토요일 아들과 함께 하는 행사에 참여할수 있다고 하여, 4주간의 아버지 교육을 들으러 갔다.</p><p>강사님이 처음에는 아버지 권위에 대한 이야기를 하길래<br>뭐 이런 꼰대 교육을 하나 하는 생각을 했지만. 듣다보니.<br>현대 사회에서 가장의 권의가 얼마나 떨어졌는지.<br>현대 사회에서 요구되는 남편,남자의 역할이 아버지의 역할인지?<br>다시 한번 생각해 보는 계기가 되었다.</p><ol><li><p>아빠는 친절하고, 아이들과 함께 놀고, 아이들을 챙겨주는 일이 요즘 아빠들의 일인가? 어느정도는 맞다고 생각한다. 하지만, 강사님 이야기로는 이건 부수적인 아버지의 일. 즉, 엄마와 가족을 도와주는 일이라는 것이다.<br>이러한 도움은 가정적인, 좀더 친화적인 가족구성에는 도움이 되지만 <code>진정한 아빠의 역할은 아니다</code>라는 것이다.</p></li><li><p>가장 좋은 부모는 “Yes”와 “No”를 명확히 말하는 부모. 두번째는 “No”만 말하는 부모. 세번째는 “Yes”만 말하는 부모. 아마 난 세번째 부모에 더 가까운것 같다. 아이에게 아니라고 이야기할 수 있는 아빠가 되야할 것 같다.</p></li><li><p><code>아이의 눈높이를 맞춰라</code>는 미국식 교육은 아이가 어느정도 성장한 후에 적합하다. 그 전 까지는 아이가 부모의 눈높이를 맞추도록 하는게 바람직하다. <code>아이에게 공감하고, 아이의 의견을 듣는 것은 바람직하나, 아이에게 전적으로 결정을 맡기는 것은 어린나이에는 적합하지 않다.</code></p></li><li><p>어린아이에게 보상은 물질적인 보상. 즉, A하면 B를 준다는 보상이 오히려 더 적합하다. 하지만, 아이가 성장했을 때는 물리적인 보상보다는 내적인 보상을 하는게 좋다. 어렸을 때는 심부름을 했을 때 용돈을 주고, 초등학생 정도 되면, 심부름을 했을 때, “우리 예준이는 심부름을 정말 잘하는 구나. 아빠가 예준이 덕에 많은 도움이 된다”라고 내적으로 존중받는 느낌이 드는 보상을 해주는 게 좋다.</p></li><li><p>건강한 가장의 권위를 세우는 첫번째 일. <code>가족 리추얼 (Ritual)</code> 리추얼은 식. 즉, 격식. 가장의 일은 <code>가족의 제사장</code>.</p></li></ol><ul><li>아빠 주관하에 주 1회 가족모임을 갖는다.</li><li>아빠 주관하에 1주일 한일, 1주일 할일을 순서대로 이야기한다.</li><li>행사 전에, 아빠 주관하에 청소를 한다. 청소의 검사는 아빠가 한다.</li><li>아빠가 용돈을 나눠준다. 이때, 청소상태 및 한주간의 결과에 따라 아빠가 판단하여 성과를 배분한다. 만약, 하지 않을시에는 단호히 추진한다.</li></ul><img src="/blog/2016/03/24/father1/todo.jpg"><p>저녁 늦게 모인 아버지 20여분과 이런 저런 이야기를 하다 보니.<br>참 좋은 아빠들도 많고, 다들 비슷한 고민을 하는 구나라는 생각도 들었다.<br>그냥 애랑 놀기 위한 행사 참여를 위해, 나왔는데.<br>의외로 많은 것은 얻어갈것 같다.<br>다음 3주가 기대된다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/03/24/father1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>WBA (Webpack + Bootstrap + Angular)</title>
      <link>http://sculove.github.io/blog/2016/03/09/WBA-Webpack-Bootstrap-Angular/</link>
      <guid>http://sculove.github.io/blog/2016/03/09/WBA-Webpack-Bootstrap-Angular/</guid>
      <pubDate>Wed, 09 Mar 2016 14:48:20 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/blog/2016/03/09/WBA-Webpack-Bootstrap-Angular/webpack-and-angularjs.jpg&quot;&gt;

&lt;h2 id=&quot;Webpack을-사용하는-이유&quot;&gt;&lt;a href=&quot;#Webpack을-사용하는-이유&quot; 
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2016/03/09/WBA-Webpack-Bootstrap-Angular/webpack-and-angularjs.jpg"><h2 id="Webpack을-사용하는-이유"><a href="#Webpack을-사용하는-이유" class="headerlink" title="Webpack을 사용하는 이유"></a>Webpack을 사용하는 이유</h2><ol><li>dependency를 관리할 필요가 없다.</li><li>loader만 변경하면, es6, typescript등 transcompile이 쉽게 적용된다.</li><li>cache와 multi thread를 이용하여 transcompile이 빠르다.</li><li>npm모듈을 기본적으로 require할 수 있다. (별도 지정할 필요가 없다)<br>별도로 지정이 필요한 경우, resolve-alias를 지정한다.<br><a href="http://stackoverflow.com/questions/34123358/webpack-cannot-find-node-module-bootstrap-multiselect" rel="external nofollow noopener noreferrer" target="_blank">http://stackoverflow.com/questions/34123358/webpack-cannot-find-node-module-bootstrap-multiselect</a></li><li>develop, production 옵션을 제공하여 기본적으로 map, uglify를 쉽게 적용할 수 있다.</li><li>node기반이므로 코딩이 가능하고, grunt나 gulp와 같은 툴이 필요하다면 손쉽게 적용할 수 있다. (하지만, 적용할 필요가 없을 정도로 깔끔하다)</li></ol><h2 id="Angular-module"><a href="#Angular-module" class="headerlink" title="Angular module"></a>Angular module</h2><ul><li>ui.router</li><li>angular-validation</li></ul><h2 id="Webpack-module"><a href="#Webpack-module" class="headerlink" title="Webpack module"></a>Webpack module</h2><h3 id="preLoader"><a href="#preLoader" class="headerlink" title="preLoader"></a>preLoader</h3><ul><li>jscs-loader</li><li>jshint-loader</li></ul><h3 id="Loader"><a href="#Loader" class="headerlink" title="Loader"></a>Loader</h3><ul><li>css-loader</li><li>less-loader</li><li>url-loader</li><li>expose-loader</li><li>file-loader</li><li>style-loader</li></ul><h3 id="Plugin"><a href="#Plugin" class="headerlink" title="Plugin"></a>Plugin</h3><ul><li>clean-webpack-plugin</li><li>extract-text-webpack-plugin</li><li>html-webpack-lugin</li></ul><h2 id="Webpack-환경-설정-파일-예시"><a href="#Webpack-환경-설정-파일-예시" class="headerlink" title="Webpack 환경 설정 파일 예시"></a>Webpack 환경 설정 파일 예시</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>);</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">var</span> nodeModules = path.resolve(__dirname, <span class="string">"node_modules"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">"extract-text-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">var</span> HtmlPlugin = <span class="built_in">require</span>(<span class="string">"html-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">var</span> CleanPlugin = <span class="built_in">require</span>(<span class="string">"clean-webpack-plugin"</span>);</span><br><span class="line"><span class="keyword">var</span> isRelease = (process.env.NODE_ENV || <span class="string">"dev"</span>) === <span class="string">"release"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> config = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    app: [<span class="string">"./scripts/app.js"</span>, <span class="string">"./less/sellshop.less"</span>],</span><br><span class="line">    <span class="comment">// And other vendors</span></span><br><span class="line">    vendors: [</span><br><span class="line">      <span class="string">"jquery"</span>,</span><br><span class="line">      <span class="string">"bootstrap"</span>,</span><br><span class="line">      <span class="string">"toastr"</span>,</span><br><span class="line">      <span class="string">"moment"</span>,</span><br><span class="line">      <span class="string">"angular"</span>,</span><br><span class="line">      <span class="string">"angular-animate"</span>,</span><br><span class="line">      <span class="string">"angular-ui-router"</span>,</span><br><span class="line">      <span class="string">"angular-resource"</span>,</span><br><span class="line">      <span class="string">"angular-ui-grid"</span>,</span><br><span class="line">      <span class="string">"bootstrap-datepicker"</span>,</span><br><span class="line">      <span class="string">"bootstrap-datepicker.ko"</span>,</span><br><span class="line">      <span class="string">"angular-auto-validate"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">"dist"</span>),</span><br><span class="line">    publicPath: <span class="string">""</span>,</span><br><span class="line">    filename: <span class="string">"[name].js"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  resolve: &#123;</span><br><span class="line">    alias: &#123;</span><br><span class="line">      <span class="string">"angular-ui-grid"</span>: <span class="string">"angular-ui-grid/ui-grid"</span>,</span><br><span class="line">      <span class="string">"bootstrap-datepicker.ko"</span>:</span><br><span class="line">        <span class="string">"bootstrap-datepicker/dist/locales/bootstrap-datepicker.ko.min"</span>,</span><br><span class="line">      <span class="string">"angular-auto-validate"</span>: <span class="string">"angular-auto-validate/dist/jcs-auto-validate"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    preLoaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="comment">// include .js files</span></span><br><span class="line">        include: [path.join(__dirname, <span class="string">"scripts"</span>)],</span><br><span class="line">        loader: <span class="string">"jshint-loader"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, <span class="comment">// include .js files</span></span><br><span class="line">        include: [path.join(__dirname, <span class="string">"scripts"</span>)],</span><br><span class="line">        loader: <span class="string">"jscs-loader"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    loaders: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="built_in">require</span>.resolve(<span class="string">"jquery"</span>),</span><br><span class="line">        loader: <span class="string">"expose?$!expose?jQuery"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="built_in">require</span>.resolve(<span class="string">"angular"</span>),</span><br><span class="line">        loader: <span class="string">"expose?angular"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="built_in">require</span>.resolve(<span class="string">"toastr"</span>),</span><br><span class="line">        loader: <span class="string">"expose?toastr"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="built_in">require</span>.resolve(<span class="string">"moment"</span>),</span><br><span class="line">        loader: <span class="string">"expose?moment"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        include: [path.resolve(__dirname, <span class="string">"less"</span>)],</span><br><span class="line">        loader: ExtractTextPlugin.extract(<span class="string">"style-loader"</span>, <span class="string">"css-loader"</span>)</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        include: [path.resolve(__dirname, <span class="string">"less"</span>)],</span><br><span class="line">        loader: ExtractTextPlugin.extract(</span><br><span class="line">          <span class="string">"style-loader"</span>,</span><br><span class="line">          <span class="string">"css-loader!less-loader"</span></span><br><span class="line">        )</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// the url-loader uses DataUrls.</span></span><br><span class="line">      <span class="comment">// the file-loader emits files.</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.eot(\?v=\d+\.\d+\.\d+)?$/</span>,</span><br><span class="line">        include: [nodeModules + <span class="string">"/bootstrap"</span>, nodeModules + <span class="string">"/angular-ui-grid"</span>],</span><br><span class="line">        loader: <span class="string">"file-loader"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(woff|woff2)(\?v=\d+\.\d+\.\d+)?$/</span>,</span><br><span class="line">        include: [nodeModules + <span class="string">"/bootstrap"</span>, nodeModules + <span class="string">"/angular-ui-grid"</span>],</span><br><span class="line">        loader: <span class="string">"file-loader"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.ttf(\?v=\d+\.\d+\.\d+)?$/</span>,</span><br><span class="line">        include: [nodeModules + <span class="string">"/bootstrap"</span>, nodeModules + <span class="string">"/angular-ui-grid"</span>],</span><br><span class="line">        loader: <span class="string">"file-loader"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.svg(\?v=\d+\.\d+\.\d+)?$/</span>,</span><br><span class="line">        include: [nodeModules + <span class="string">"/bootstrap"</span>, nodeModules + <span class="string">"/angular-ui-grid"</span>],</span><br><span class="line">        loader: <span class="string">"file-loader"</span></span><br><span class="line">        <span class="comment">// loader: "url?limit=1000&amp;mimetype=image/svg+xml"</span></span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> CleanPlugin(path.resolve(__dirname, <span class="string">"dist"</span>)),</span><br><span class="line">    <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">      ___DEV___: !isRelease</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(<span class="string">"vendors"</span>, <span class="string">"vendors.js"</span>, <span class="literal">Infinity</span>),</span><br><span class="line">    <span class="keyword">new</span> ExtractTextPlugin(<span class="string">"[name].css"</span>, &#123;</span><br><span class="line">      allChunks: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> htmlConfig = &#123;</span><br><span class="line">  inject: <span class="literal">false</span>,</span><br><span class="line">  filename: <span class="string">"../index.html"</span>,</span><br><span class="line">  template: <span class="string">"./views/layout/layout.html"</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span> (isRelease) &#123;</span><br><span class="line">  config.plugins.push(</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">      compress: &#123;</span><br><span class="line">        warnings: <span class="literal">false</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">  htmlConfig.hash = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">config.plugins.push(<span class="keyword">new</span> HtmlPlugin(htmlConfig));</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure><h2 id="참조-문서"><a href="#참조-문서" class="headerlink" title="참조 문서"></a>참조 문서</h2><ul><li>Angular 스타일 가이드 : <a href="https://github.com/johnpapa/angular-styleguide" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/johnpapa/angular-styleguide</a></li><li>Using Angular 1.x With ES6 and Webpack : <a href="http://angular-tips.com/blog/2015/06/using-angular-1-dot-x-with-es6-and-webpack/" rel="external nofollow noopener noreferrer" target="_blank">http://angular-tips.com/blog/2015/06/using-angular-1-dot-x-with-es6-and-webpack/</a></li><li>Angular-webpack cookbook : <a href="http://dmachat.github.io/angular-webpack-cookbook/" rel="external nofollow noopener noreferrer" target="_blank">http://dmachat.github.io/angular-webpack-cookbook/</a></li><li>How to Webpack : <a href="https://github.com/petehunt/webpack-howto" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/petehunt/webpack-howto</a><br>Webpack-bootstrap 예제 : <a href="http://bline.github.io/bootstrap-webpack-example/" rel="external nofollow noopener noreferrer" target="_blank">http://bline.github.io/bootstrap-webpack-example/</a></li><li>An Angular JS Starter (NG6) : <a href="https://github.com/AngularClass/NG6-starter" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/AngularClass/NG6-starter</a></li></ul>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/03/09/WBA-Webpack-Bootstrap-Angular/#disqus_thread</comments>
    </item>
    
    <item>
      <title>SublimeText 설정하기</title>
      <link>http://sculove.github.io/blog/2016/03/09/SublimeText-Plugin/</link>
      <guid>http://sculove.github.io/blog/2016/03/09/SublimeText-Plugin/</guid>
      <pubDate>Wed, 09 Mar 2016 14:30:47 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/blog/2016/03/09/SublimeText-Plugin/Sublime_Text_Logo.png&quot;&gt;

&lt;p&gt;SumlimeText 설정하기 가볍고 프로그래밍이 가능한 SublimeText3 에디터의 환경 설정에 정리해보자&lt;/p&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2016/03/09/SublimeText-Plugin/Sublime_Text_Logo.png"><p>SumlimeText 설정하기 가볍고 프로그래밍이 가능한 SublimeText3 에디터의 환경 설정에 정리해보자</p><h3 id="1-SublimeText-설치"><a href="#1-SublimeText-설치" class="headerlink" title="1. SublimeText 설치"></a>1. SublimeText 설치</h3><p><a href="http://www.sublimetext.com/" rel="external nofollow noopener noreferrer" target="_blank">http://www.sublimetext.com/</a></p><h3 id="2-Package-Control-설치"><a href="#2-Package-Control-설치" class="headerlink" title="2. Package Control 설치"></a>2. Package Control 설치</h3><p>Ctrl + ` 를 눌러 콘솔을 열고, 아래 글을 선택하고 재부팅한다.<br><a href="https://packagecontrol.io/installation" rel="external nofollow noopener noreferrer" target="_blank">https://packagecontrol.io/installation</a></p><h3 id="3-Plugin-설치"><a href="#3-Plugin-설치" class="headerlink" title="3. Plugin 설치"></a>3. Plugin 설치</h3><p>“Command Palette” cmd + shift + p 를 누른후 “PackageControl : Install Package” 선택 후, 설치할 플러그인 설치 (cmd + shift + p &gt; inst)</p><h4 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h4><ul><li>Material Theme : 메트리얼 테마</li><li>One Dark Material Theme : One Dark 메트리얼 테마</li></ul><h4 id="Markdown"><a href="#Markdown" class="headerlink" title="Markdown"></a>Markdown</h4><ul><li>MarkdownHighlighting : 마크다운 하이라이트</li><li>Markdown extended : 마크다운 확장</li></ul><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h4><ul><li>jsFormat : javascript Formater</li><li>EditorConfig : editor config 관련 패키지</li><li>SublimeLinter : 정적 검사를 위한 core 패키지</li><li>SublimeLinter : tslint를 검사하기 위한 패키지</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 글로벌로 tslint가 설치되어 있어야한다.</span></span><br><span class="line">npm install tslint -g</span><br></pre></td></tr></table></figure><ul><li>SublimeLinter-jshint : jshint를 검사하기 위한 패키지</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 글로벌로 jshint가 설치되어 있어야한다.</span></span><br><span class="line">npm install jshint -g</span><br></pre></td></tr></table></figure><ul><li>SublimeLinter-contrib-eslint : eslint를 검사하기 위한 패키지</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 글로벌로 eslint가 설치되어 있어야한다.</span></span><br><span class="line">npm install eslint -g</span><br></pre></td></tr></table></figure><ul><li>SublimeLinter-contrib-tslint : TypeScript를 검사하기 위한 패키지</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 글로벌로 tslint와 typescript가 설치되어 있어야한다.</span></span><br><span class="line">npm install tslint typescript -g</span><br></pre></td></tr></table></figure><ul><li>SublimeLinter-jscs : jscs를 검사하기 위한 패키지</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 글로벌로 jscs가 설치되어 있어야한다.</span></span><br><span class="line">npm install jscs -g</span><br></pre></td></tr></table></figure><h4 id="JavaScript-Framework"><a href="#JavaScript-Framework" class="headerlink" title="JavaScript (Framework)"></a>JavaScript (Framework)</h4><ul><li>Babel : ES6과 React(jsx)를 지원함.</li></ul><h4 id="그-외-패키지"><a href="#그-외-패키지" class="headerlink" title="그 외 패키지"></a>그 외 패키지</h4><ul><li>BracketHighlighter : 괄호의 짝을 표기해준다</li><li>Sublimerge Pro : 파일 diff와 merge관련 패키지</li><li>SublimeCodeIntel : 코드 intelligence 지원</li><li>Color Highlighter : 컬러 하이라이트 패키지</li><li>ConvertToUTF8 : Encoding 변경을 지원 (euc-kr 지원)<blockquote><p>Linux, MacOS X 에서는 Sublimetext에 내장된 python 이 ConvertToUTF8이 사용하는 library가 빠져있어서 제대로 실행되지 않는다.위 OS는 Package Control에서 Codecs33 을 설치해야 제대로 동작한다.</p></blockquote></li></ul><h3 id="4-필수-단축키"><a href="#4-필수-단축키" class="headerlink" title="4. 필수 단축키"></a>4. 필수 단축키</h3><ul><li>goto anything : cmd + p 입력하는 문자는 파일명, @는 메소드와 같은 심볼 :는 라인수, #는 단어 찾기</li><li>Command Palette : cmd + shift + p 모든 커맨드를 실행할 수 있다.</li><li>바꾸기 패널 : cmd + alt + f (찾아 바꾸기)</li><li>북마크 토글 : cmd + F2</li><li>북마크 찾기 : F2, ~F2</li><li>화면레이아웃 바꾸기 : cmd + alt + 숫자(1~)</li><li>문장 위,아래로 이동하기 : cmd + ctrl + up/down</li><li>멀티셀렉션 지정 : ctrl + shift + up/down 또는 alt + 왼쪽 마우스 선택</li><li>선택한 줄 복사하기 : cmd + shift + d</li></ul><h3 id="5-sublimetext-터미널에서-사용하기"><a href="#5-sublimetext-터미널에서-사용하기" class="headerlink" title="5. sublimetext 터미널에서 사용하기"></a>5. sublimetext 터미널에서 사용하기</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s ”/Applications/SublimeText.app/Contents/SharedSupport/bin/subl”/usr/bin/subl</span><br></pre></td></tr></table></figure><h3 id="6-환경설정"><a href="#6-환경설정" class="headerlink" title="6. 환경설정"></a>6. 환경설정</h3><ol><li>sublimetext 환경 (Setting-Users)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"bold_folder_labels"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"color_scheme"</span>: <span class="string">"Packages/User/SublimeLinter/OneDark (SL).tmTheme"</span>,</span><br><span class="line"><span class="string">"font_face"</span>: <span class="string">"D2Coding"</span>,</span><br><span class="line"><span class="string">"font_size"</span>: <span class="number">20.0</span>,</span><br><span class="line"><span class="string">"highlight_line"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"ignored_packages"</span>:</span><br><span class="line">[</span><br><span class="line"><span class="string">"Markdown"</span>,</span><br><span class="line"><span class="string">"Vintage"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"line_numbers"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"tab_size"</span>: <span class="number">2</span>,</span><br><span class="line"><span class="string">"theme"</span>: <span class="string">"Material-Theme-Darker.sublime-theme"</span>,</span><br><span class="line"><span class="string">"translate_tabs_to_spaces"</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="string">"trim_trailing_white_space_on_save"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"word_wrap"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"overlay_scroll_bars"</span>: <span class="string">"enabled"</span>,</span><br><span class="line"><span class="string">"line_padding_top"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"line_padding_bottom"</span>: <span class="number">3</span>,</span><br><span class="line"><span class="string">"always_show_minimap_viewport"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"indent_guide_options"</span>: [ <span class="string">"draw_normal"</span>, <span class="string">"draw_active"</span> ],   <span class="comment">// Highlight active indent</span></span><br><span class="line"><span class="string">"font_options"</span>: [ <span class="string">"gray_antialias"</span> ]<span class="string">`</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>sublimetext 단축키 (Keybinding-Users)</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  <span class="comment">// 열린 창 모두 닫기</span></span><br><span class="line">  &#123; <span class="attr">keys</span>: [<span class="string">"super+shift+w"</span>], <span class="attr">command</span>: <span class="string">"close_all"</span> &#125;,</span><br><span class="line">  <span class="comment">// 자동 완성</span></span><br><span class="line">  &#123; <span class="attr">keys</span>: [<span class="string">"alt+space"</span>], <span class="attr">command</span>: <span class="string">"auto_complete"</span> &#125;,</span><br><span class="line">  <span class="comment">// 라인 삭제</span></span><br><span class="line">  &#123;</span><br><span class="line">    keys: [<span class="string">"super+d"</span>],</span><br><span class="line">    command: <span class="string">"run_macro_file"</span>,</span><br><span class="line">    args: &#123; <span class="attr">file</span>: <span class="string">"Packages/Default/Delete Line.sublime-macro"</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ol start="3"><li>project 설정</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">"SublimeLinter"</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"linters"</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"jscs"</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"args"</span>:</span><br><span class="line">[</span><br><span class="line">],</span><br><span class="line"><span class="string">"excludes"</span>:</span><br><span class="line">[</span><br><span class="line"><span class="string">"assets/**"</span>,</span><br><span class="line"><span class="string">"config/**"</span>,</span><br><span class="line"><span class="string">"dist/**"</span>,</span><br><span class="line"><span class="string">"doc/**"</span>,</span><br><span class="line"><span class="string">"report/**"</span>,</span><br><span class="line"><span class="string">"tc/**"</span>,</span><br><span class="line"><span class="string">"test/**"</span></span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"jshint"</span>: &#123;</span><br><span class="line">      <span class="string">"args"</span>: [],</span><br><span class="line">      <span class="string">"excludes"</span>: [</span><br><span class="line">      <span class="string">"assets/**"</span>,</span><br><span class="line"><span class="string">"config/**"</span>,</span><br><span class="line"><span class="string">"dist/**"</span>,</span><br><span class="line"><span class="string">"doc/**"</span>,</span><br><span class="line"><span class="string">"report/**"</span>,</span><br><span class="line"><span class="string">"tc/**"</span>,</span><br><span class="line"><span class="string">"test/**"</span>,</span><br><span class="line">          <span class="string">"**/*.jsx"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"tslint"</span>: &#123;</span><br><span class="line">          <span class="string">"@disable"</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="string">"args"</span>: [],</span><br><span class="line">          <span class="string">"excludes"</span>: [</span><br><span class="line">              <span class="string">"**/node_modules/**"</span></span><br><span class="line">          ],</span><br><span class="line">          <span class="string">"config_filename"</span>: <span class="string">"tsconfig.json"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"folders"</span>:</span><br><span class="line">[</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"folder_exclude_patterns"</span>:</span><br><span class="line">[</span><br><span class="line"><span class="string">"node_modules"</span>,</span><br><span class="line"><span class="string">"bower_components"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"path"</span>: <span class="string">"egjs"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="string">"folder_exclude_patterns"</span>:</span><br><span class="line">[</span><br><span class="line"><span class="string">"node_modules"</span>,</span><br><span class="line"><span class="string">"bower_components"</span></span><br><span class="line">],</span><br><span class="line"><span class="string">"path"</span>: <span class="string">"sculove-egjs"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/03/09/SublimeText-Plugin/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Angularjs 1.x Validation</title>
      <link>http://sculove.github.io/blog/2016/02/24/angularjs-1-x-validation/</link>
      <guid>http://sculove.github.io/blog/2016/02/24/angularjs-1-x-validation/</guid>
      <pubDate>Wed, 24 Feb 2016 06:17:53 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;Angularjs 1.x Validation Angular는 기본적으로 client validataion을 제공 (required, email, minlength, maxlength, pattern, …) 하고 있다.&lt;br&gt;&lt;a href=&quot;htt
        
      
      </description>
      
      <content:encoded><![CDATA[<p>Angularjs 1.x Validation Angular는 기본적으로 client validataion을 제공 (required, email, minlength, maxlength, pattern, …) 하고 있다.<br><a href="https://docs.angularjs.org/guide/forms" rel="external nofollow noopener noreferrer" target="_blank">https://docs.angularjs.org/guide/forms</a></p><img src="/blog/2016/02/24/angularjs-1-x-validation/input.png"><p>하지만, angular의 validation은 생산성이 좋다고 이야기하는 angular의 장점에 비해, 상당히 번거로운 작업을 요구한다.</p><p>다음은 input 필드에 대한 email validation을 처리하기 위한 방법이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"userForm"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 2. validation 상태에 따라 에러여부를 표현하기 위한 작업 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">    <span class="attr">class</span>=<span class="string">"form-group"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">ng-class</span>=<span class="string">"&#123; 'has-error': userForm.email.$touched &amp;&amp; userForm.email.$invalid &#125;"</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">"email 주소를 입력해주세요"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ng-model</span>=<span class="string">"vm.email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">required</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1. validation 상태에 따른 에러별 메시지 처리 작업 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-messages</span>=<span class="string">"userForm.email.$error"</span> <span class="attr">ng-show</span>=<span class="string">"userForm.email.$touched"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-danger"</span> <span class="attr">ng-message</span>=<span class="string">"maxlength"</span>&gt;</span></span><br><span class="line">        100자 이내로 입력해주세요</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-danger"</span> <span class="attr">ng-message</span>=<span class="string">"required"</span>&gt;</span>필수 입력값입니다<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-danger"</span> <span class="attr">ng-message</span>=<span class="string">"email"</span>&gt;</span></span><br><span class="line">        유효한 이메일 주소를 입력해주세요</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>입력 필드 영역을 제외하고도, validation을 체크하기 위해서는<br>에러 메시지를 에러 유형에 따라 처리해야한다.<br>validation 여부에 따라, ng-class를 이용하여 필드의 클래스를 지정해줘야한다.<br>꽤 간단한 작업이지만, 꽤 반복적이고, 꽤 버그가 유발되기 쉬운 작업을 해야한다.<br>이를 위해서 이미 검증(?)된 모듈을 기준으로 적합한 오픈소스 3개 (angular-validation, angular-validator, angular-auto-validate)를 찾아 보았다. 대부분 1) 에러 메시지 처리, 2) ng-class에 대한 클래스 처리를 자동으로 지원한다.</p><h2 id="angular-validation-github-star-535"><a href="#angular-validation-github-star-535" class="headerlink" title="angular-validation (github star:535)"></a>angular-validation (github star:535)</h2><p><a href="https://github.com/huei90/angular-validation" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/huei90/angular-validation</a></p><p>github star 수가 가장 많은 angular-validation 은 사람들의 선호도와 같이, 많은 기능이 내장되어 있다.<br>기본적으로 url, email, number와 같은 validation rule이 포함 되어 있으며, 손쉽게, 다른 validation rule을 작성하여 추가할 수 있다.<br>반면, angular에서 지원하는 validation형식이 아닌, validator, validation-submit, validation-reset과 같은 directive 를 지원하여, 또다른 학습 비용이 필요하다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"userForm"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">"email 주소를 입력해주세요"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ng-model</span>=<span class="string">"vm.email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validator</span>=<span class="string">"required, maxlength, email"</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="angular-validator-github-star-159"><a href="#angular-validator-github-star-159" class="headerlink" title="angular-validator (github star:159)"></a>angular-validator (github star:159)</h2><p><a href="https://github.com/turinggroup/angular-validator" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/turinggroup/angular-validator</a><br>3개 오픈소스 중 github star 수가 가장 작지만, 딱 필요한 기능만 작성해 놓은 validator이다.<br>angular의 required 속성과 같은 인터페이스를 이용할 수 있고, validate-on, validator, invalid-message, required-message 와 같은 추가 directive도 지원한다.<br>angular-validation에 비해 가볍지만, 마찬가지로, 별도의 학습 비용이 필요하다. 또한, 에러 메세지 처리를 일괄적으로 관리할 수 없는 단점이 있다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"userForm"</span> <span class="attr">novalidate</span> <span class="attr">angular-validator-submit</span>=<span class="string">"submitMyForm()"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ng-model</span>=<span class="string">"vm.email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">validator</span>=<span class="string">"vm.myValidationFunction(vm.email) === true"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">invalid-message</span>=<span class="string">"vm.myValidationFunction(vm.email)"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">required-message</span>=<span class="string">"vm.myValidationFunction(vm.email)"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">required</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="angular-auto-validate-github-star-265"><a href="#angular-auto-validate-github-star-265" class="headerlink" title="angular-auto-validate (github star:265)"></a>angular-auto-validate (github star:265)</h2><p><a href="http://jonsamwell.github.io/angular-auto-validate/" rel="external nofollow noopener noreferrer" target="_blank">http://jonsamwell.github.io/angular-auto-validate/</a></p><p>angular-validation과 같이 많은 기능을 제공하지만, angular의 인터페이스를 그대로 쓸수 있다. 따라서, 별도의 학습비용이 발생하지 않는다.<br>따라서, 추가적인 custom validation은 angular 인터페이스와 같이 필요하다면 별도의 directive를 구성해야만 한다. angular-auto-validate은 이에 따른 에러메시지만 추가적으로 일괄 관리한다.<br>상세 구현 방법은 공식페이지의 데모를 참조한다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">"userForm"</span> <span class="attr">novalidate</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">name</span>=<span class="string">"email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">"form-control"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">placeholder</span>=<span class="string">"email 주소를 입력해주세요"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">ng-model</span>=<span class="string">"vm.email"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">required</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><table><thead><tr><th>기능</th><th>angular-validation</th><th>angular-validate</th><th>angular-auto-validate</th></tr></thead><tbody><tr><td>에레메시지 관리</td><td>일괄관리가능</td><td>X</td><td>일괄관리가능</td></tr><tr><td>angular 인터페이스사용 여부</td><td>X</td><td>부분사용</td><td>O</td></tr><tr><td>async validation</td><td>O</td><td>X</td><td>O</td></tr><tr><td>custom validator</td><td>O(자체 정의)</td><td>함수형태 정의 가능</td><td>angular의 directive 사용</td></tr></tbody></table><blockquote><p>angular의 validation을 사용하고자 한다면, angular-validation과 angular-auto-validate 중 선택하라.</p></blockquote><p>Custom validator를 많이 관리해야한다면, angular-validation이 더 사용하기 편하고, angular의 인터페이스를 그대로 사용하고, 에러 메시지에 대한 처리를 좀 더 손쉽게 이용하고자 한다면, angular-auto-validate을 사용하기를 권한다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/02/24/angularjs-1-x-validation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ES6은 어떻게 탄생했나?</title>
      <link>http://sculove.github.io/blog/2016/02/06/es6-history/</link>
      <guid>http://sculove.github.io/blog/2016/02/06/es6-history/</guid>
      <pubDate>Sat, 06 Feb 2016 08:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;ES6은-어떻게-탄생했나&quot;&gt;&lt;a href=&quot;#ES6은-어떻게-탄생했나&quot; class=&quot;headerlink&quot; title=&quot;ES6은 어떻게 탄생했나?&quot;&gt;&lt;/a&gt;ES6은 어떻게 탄생했나?&lt;/h3&gt;&lt;p&gt;ECMAScript6의 탄생부터… ES6 맛
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="ES6은-어떻게-탄생했나"><a href="#ES6은-어떻게-탄생했나" class="headerlink" title="ES6은 어떻게 탄생했나?"></a>ES6은 어떻게 탄생했나?</h3><p>ECMAScript6의 탄생부터… ES6 맛보기까지.</p><img src="/blog/2016/02/06/es6-history/history.png"><p>ECMAScript6. ES2015라고 불리는 Javascript의 발전 역사.<br>그리고, ES6이 무엇인지 간단히 살펴보는 발표자료.</p><ul><li>발표 URL : <a href="https://sculove.github.io/slides/es6/">https://sculove.github.io/slides/es6/</a></li></ul><iframe src="https://sculove.github.io/slides/es6/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2016/02/06/es6-history/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Grunt를 이용한 Front-End 개발 환경 만들기</title>
      <link>http://sculove.github.io/blog/2015/10/03/grunt-for-fe/</link>
      <guid>http://sculove.github.io/blog/2015/10/03/grunt-for-fe/</guid>
      <pubDate>Sat, 03 Oct 2015 08:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;GruntJS&quot;&gt;&lt;a href=&quot;#GruntJS&quot; class=&quot;headerlink&quot; title=&quot;GruntJS&quot;&gt;&lt;/a&gt;GruntJS&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://gruntjs.com/&quot; rel=&quot;external nofoll
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="GruntJS"><a href="#GruntJS" class="headerlink" title="GruntJS"></a>GruntJS</h3><p><a href="http://gruntjs.com/" rel="external nofollow noopener noreferrer" target="_blank">http://gruntjs.com/</a></p><h4 id="사전-설치"><a href="#사전-설치" class="headerlink" title="사전 설치"></a>사전 설치</h4><ol><li><p>노드 설치<br><a href="https://nodejs.org/en/" rel="external nofollow noopener noreferrer" target="_blank">https://nodejs.org/en/</a></p></li><li><p>grunt-cli 설치</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install grunt-cli -g</span><br></pre></td></tr></table></figure><h4 id="Grunt-구조"><a href="#Grunt-구조" class="headerlink" title="Grunt 구조"></a>Grunt 구조</h4><img src="/blog/2015/10/03/grunt-for-fe/grunt-flow.png"><ul><li>npm 을 이용하여 라이브러리 의존성 관리를 하고, grunt를 이용하여 타스크 자동화를 구성한다.</li></ul><h4 id="Grunt-파일"><a href="#Grunt-파일" class="headerlink" title="Grunt 파일"></a>Grunt 파일</h4><p><code>Task</code>와 <code>Target</code>으로 구성되어 있다.</p><ul><li>property에 grunt.loadNpmTasks이나, registerTask에 의해, grunt plugin이 등록되면, property는 task로 동작한다.</li><li>target은 task 하위의 작업들을 지칭하며, task의 하위 객체 이다.</li><li>task의 하위 객체 중 options 객체가 있다면, 전체 task의 옵션으로 인식한다. 또한, options 객체는 target아래에 존재할수 있다.</li></ul><h3 id="Grunt-plugins"><a href="#Grunt-plugins" class="headerlink" title="Grunt plugins"></a>Grunt plugins</h3><ul><li><p>jshint : <a href="https://github.com/gruntjs/grunt-contrib-jshint" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/gruntjs/grunt-contrib-jshint</a><br>JavaScript 정적 검사 플러그인</p></li><li><p>csslint : <a href="https://github.com/gruntjs/grunt-contrib-csslint" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/gruntjs/grunt-contrib-csslint</a><br>CSS 정적 검사 플러그인</p></li><li><p>concat : <a href="https://github.com/gruntjs/grunt-contrib-concat" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/gruntjs/grunt-contrib-concat</a><br>CSS, JS 파일을 머지하는 플러그인</p></li><li><p>spritesmith : <a href="https://github.com/Ensighten/grunt-spritesmith" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/Ensighten/grunt-spritesmith</a><br>CSS Sprite 플러그인</p></li><li><p>uglify : <a href="https://github.com/gruntjs/grunt-contrib-uglify" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/gruntjs/grunt-contrib-uglify</a><br>JavaScript 최소화(minify)하고, 난독화(obfuscation)하는 플러그인</p></li><li><p>cssmin : <a href="https://github.com/gruntjs/grunt-contrib-cssmin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/gruntjs/grunt-contrib-cssmin</a><br>CSS의 내용을 최소화(minify)하는 플러그인</p></li><li><p>htmlmin : <a href="https://github.com/gruntjs/grunt-contrib-htmlmin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/gruntjs/grunt-contrib-htmlmin</a><br>HTML의 내용을 최소화(minify)하는 플러그인</p></li><li><p>responsive-images : <a href="https://github.com/andismith/grunt-responsive-images" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/andismith/grunt-responsive-images</a><br>이미지별 반응형 이미지를 생성하는 플러그인</p><blockquote><p>graphicsmagick 설치 (<a href="http://www.graphicsmagick.org/download.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.graphicsmagick.org/download.html</a>)<br>Window — <a href="ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/windows/" rel="external nofollow noopener noreferrer" target="_blank">ftp://ftp.graphicsmagick.org/pub/GraphicsMagick/windows/</a></p></blockquote></li><li><p>imagemin : <a href="https://github.com/gruntjs/grunt-contrib-imagemin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/gruntjs/grunt-contrib-imagemin</a><br>이미지 최적화 플러그인</p></li><li><p>time-grunt : <a href="https://github.com/sindresorhus/time-grunt" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/sindresorhus/time-grunt</a><br>grunt 작업 시간을 알려주는 플러그인</p></li><li><p>load-grunt-tasks : <a href="https://github.com/sindresorhus/load-grunt-tasks" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/sindresorhus/load-grunt-tasks</a><br>grunt 플러그인을 자동으로 로딩해주는 플러그인</p></li><li><p>load-grunt-config : <a href="https://github.com/firstandthird/load-grunt-config" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/firstandthird/load-grunt-config</a><br>grunt 파일을 task별로 쪼개서 관리할수 있는 플러그인</p></li><li><p>watch : <a href="https://github.com/gruntjs/grunt-contrib-watch" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/gruntjs/grunt-contrib-watch</a><br>파일이 변경되었을 경우, 특정 작업을 할수 있는 플러그인</p></li></ul><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p><a href="http://www.html5rocks.com/ko/tutorials/tooling/supercharging-your-gruntfile/" rel="external nofollow noopener noreferrer" target="_blank">http://www.html5rocks.com/ko/tutorials/tooling/supercharging-your-gruntfile/</a></p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2015/10/03/grunt-for-fe/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Web Animation API</title>
      <link>http://sculove.github.io/blog/2015/09/24/Web-Animation-API/</link>
      <guid>http://sculove.github.io/blog/2015/09/24/Web-Animation-API/</guid>
      <pubDate>Thu, 24 Sep 2015 08:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;Web-Animation-API&quot;&gt;&lt;a href=&quot;#Web-Animation-API&quot; class=&quot;headerlink&quot; title=&quot;Web Animation API&quot;&gt;&lt;/a&gt;Web Animation API&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;h
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="Web-Animation-API"><a href="#Web-Animation-API" class="headerlink" title="Web Animation API"></a>Web Animation API</h3><p><a href="https://w3c.github.io/web-animations/" rel="external nofollow noopener noreferrer" target="_blank">https://w3c.github.io/web-animations/</a></p><img src="/blog/2015/09/24/Web-Animation-API/CSS-SVG-Web-Animations.png"><p>Web Animations에 대한 기술 스펙에 대한 발표 자료</p><ul><li>발표 URL : <a href="https://sculove.github.io/slides/webAnimation/">https://sculove.github.io/slides/webAnimation/</a></li></ul><iframe src="https://sculove.github.io/slides/webAnimation/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2015/09/24/Web-Animation-API/#disqus_thread</comments>
    </item>
    
    <item>
      <title>HTML5를 활용한 Front-End 성능 개선</title>
      <link>http://sculove.github.io/blog/2015/09/23/imporve-performance-using-html5/</link>
      <guid>http://sculove.github.io/blog/2015/09/23/imporve-performance-using-html5/</guid>
      <pubDate>Wed, 23 Sep 2015 08:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;HTML5를-활용한-Front-End-성능-개선&quot;&gt;&lt;a href=&quot;#HTML5를-활용한-Front-End-성능-개선&quot; class=&quot;headerlink&quot; title=&quot;HTML5를 활용한 Front-End 성능 개선&quot;&gt;&lt;/a&gt;HTML5를 활
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="HTML5를-활용한-Front-End-성능-개선"><a href="#HTML5를-활용한-Front-End-성능-개선" class="headerlink" title="HTML5를 활용한 Front-End 성능 개선"></a>HTML5를 활용한 Front-End 성능 개선</h3><p>HTML5의 기술을 이용하여, Front-End 로딩 속도를 올릴 수 있는 내용을 발표.</p><p>실제 개선 예제를 통해 로딩 성능 향상을 직접 확인하는 발표자료</p><ul><li>발표 URL : <a href="https://sculove.github.io/slides/performanceWithHTML5/">https://sculove.github.io/slides/performanceWithHTML5/</a></li></ul><iframe src="https://sculove.github.io/slides/performanceWithHTML5/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2015/09/23/imporve-performance-using-html5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>.Profile, .Vimrc Settings</title>
      <link>http://sculove.github.io/blog/2015/09/03/profile-vimrc-settings/</link>
      <guid>http://sculove.github.io/blog/2015/09/03/profile-vimrc-settings/</guid>
      <pubDate>Thu, 03 Sep 2015 08:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;profile-설정&quot;&gt;&lt;a href=&quot;#profile-설정&quot; class=&quot;headerlink&quot; title=&quot;.profile 설정&quot;&gt;&lt;/a&gt;.profile 설정&lt;/h2&gt;&lt;script src=&quot;//gist.github.com/4040076d
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="profile-설정"><a href="#profile-설정" class="headerlink" title=".profile 설정"></a>.profile 설정</h2><script src="//gist.github.com/4040076d7c7425aa4938.js?file=.profile.sh"></script><h2 id="vimrc-설정"><a href="#vimrc-설정" class="headerlink" title=".vimrc 설정"></a>.vimrc 설정</h2><script src="//gist.github.com/5ac60b228402debb69bf.js?file=.vimrc.sh"></script>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2015/09/03/profile-vimrc-settings/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Anonymous FTP Settings in OSX</title>
      <link>http://sculove.github.io/blog/2015/09/03/Ftp-settings-in-OSX/</link>
      <guid>http://sculove.github.io/blog/2015/09/03/Ftp-settings-in-OSX/</guid>
      <pubDate>Thu, 03 Sep 2015 08:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;익명-FTP-설정&quot;&gt;&lt;a href=&quot;#익명-FTP-설정&quot; class=&quot;headerlink&quot; title=&quot;익명 FTP 설정&quot;&gt;&lt;/a&gt;익명 FTP 설정&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;설정파일 : /etc/ftpd.conf&lt;/p&gt;
&lt;/b
        
      
      </description>
      
      <content:encoded><![CDATA[<h2 id="익명-FTP-설정"><a href="#익명-FTP-설정" class="headerlink" title="익명 FTP 설정"></a>익명 FTP 설정</h2><blockquote><p>설정파일 : /etc/ftpd.conf</p></blockquote><ol><li>ftp 서비스 폴더 생성 (/Users/ftp 폴더 생성. 권한 755)</li><li>ftpd.conf에 한 줄 추가 =&gt; chroot GUEST /Users/ftp 추가</li></ol><h2 id="ftp-구동-쉘-스크립트"><a href="#ftp-구동-쉘-스크립트" class="headerlink" title="ftp 구동 쉘 스크립트"></a>ftp 구동 쉘 스크립트</h2><h3 id="서버-open"><a href="#서버-open" class="headerlink" title="서버 open"></a>서버 open</h3><script src="//gist.github.com/da0867dea84e22eae50f.js?file=ftpstart.sh"></script><h3 id="서버-close"><a href="#서버-close" class="headerlink" title="서버 close"></a>서버 close</h3><script src="//gist.github.com/c17b0acb2e0016653884.js?file=ftpstop.sh"></script>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2015/09/03/Ftp-settings-in-OSX/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Apache2 Settings in OSX</title>
      <link>http://sculove.github.io/blog/2015/09/03/Apache2-settings-in-OSX/</link>
      <guid>http://sculove.github.io/blog/2015/09/03/Apache2-settings-in-OSX/</guid>
      <pubDate>Thu, 03 Sep 2015 08:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/blog/2015/09/03/Apache2-settings-in-OSX/apache-logo.png&quot;&gt;

&lt;h3 id=&quot;docroot-폴더&quot;&gt;&lt;a href=&quot;#docroot-폴더&quot; class=&quot;headerlink&quot; title=&quot;do
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2015/09/03/Apache2-settings-in-OSX/apache-logo.png"><h3 id="docroot-폴더"><a href="#docroot-폴더" class="headerlink" title="docroot 폴더"></a>docroot 폴더</h3><h4 id="전체"><a href="#전체" class="headerlink" title="전체"></a>전체</h4><ul><li>기본 docroot 폴더 : /Library/WebServer/Documents/</li><li>web url : /</li></ul><h4 id="사용자별"><a href="#사용자별" class="headerlink" title="사용자별"></a>사용자별</h4><ul><li>사용자 docroot 폴더 : /Users/사용자명/Sites/</li><li>web url : /~사용자명/<blockquote><p>Mavericks 이상 부터는 사용자 docroot 폴더가 없기 때문에 직접 파일을 만들어야한다.</p></blockquote></li></ul><h3 id="설정-파일"><a href="#설정-파일" class="headerlink" title="설정 파일"></a>설정 파일</h3><h4 id="전체-etc-apache2-httpd-conf"><a href="#전체-etc-apache2-httpd-conf" class="headerlink" title="전체 : /etc/apache2/httpd.conf"></a>전체 : /etc/apache2/httpd.conf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">LoadModule php5_module libexec/apache2/libphp5.so <span class="comment"># 주석제거 (php 사용을 위해)</span></span><br><span class="line">LoadModule userdir_module libexec/apache2/mod_userdir.so  <span class="comment"># 주석제거</span></span><br><span class="line">Include/private/etc/apache2/extra/httpd-userdir.conf  <span class="comment"># 주석제거</span></span><br><span class="line">Include /private/etc/apache2/other/*.conf <span class="comment"># 주석제거</span></span><br></pre></td></tr></table></figure><h4 id="사용자별-etc-apache2-users-사용자명-conf"><a href="#사용자별-etc-apache2-users-사용자명-conf" class="headerlink" title="사용자별 : /etc/apache2/users/사용자명.conf"></a>사용자별 : /etc/apache2/users/사용자명.conf</h4><p>사용자 웹의 directory index 및 symbolic, .htaccess 처리</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Directory”</span>/<span class="attr">Users</span>/사용자명/<span class="attr">Sites</span>/”&gt;</span></span><br><span class="line">    Options Indexes MultiViews Includes FollowSymLinks</span><br><span class="line">    AllowOverride All</span><br><span class="line">    Order allow,deny</span><br><span class="line">    Allow from all</span><br><span class="line">    Require all granted # 요세미티에서는 꼭! 이 부분을 추가해야한다.</span><br><span class="line"><span class="tag">&lt;/<span class="name">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="이슈"><a href="#이슈" class="headerlink" title="이슈"></a>이슈</h3><h4 id="사용자-폴더-웹서버에-접근시-403-Forbidden-Error"><a href="#사용자-폴더-웹서버에-접근시-403-Forbidden-Error" class="headerlink" title="사용자 폴더 웹서버에 접근시 403 Forbidden Error"></a>사용자 폴더 웹서버에 접근시 403 Forbidden Error</h4><p><code>/Users/Document 의 권한을 755로 변경</code> Mavericks 이상 부터는 /Users의 권한을 755로 변경해야한다.</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="http://www.coolestguidesontheplanet.com/downtown/get-apache-mysql-php-and-phpmyadmin-working-osx-109-mavericks" rel="external nofollow noopener noreferrer" target="_blank">http://www.coolestguidesontheplanet.com/downtown/get-apache-mysql-php-and-phpmyadmin-working-osx-109-mavericks</a></li><li><a href="http://webfortj.blogspot.kr/2012/10/mac-os-mountain-lion-apache.html" rel="external nofollow noopener noreferrer" target="_blank">http://webfortj.blogspot.kr/2012/10/mac-os-mountain-lion-apache.html</a></li><li><a href="http://blog.saltfactory.net/157" rel="external nofollow noopener noreferrer" target="_blank">http://blog.saltfactory.net/157</a></li><li><a href="http://httpd.apache.org/docs/2.0/ko/mod/core.html#options" rel="external nofollow noopener noreferrer" target="_blank">http://httpd.apache.org/docs/2.0/ko/mod/core.html#options</a></li></ul>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2015/09/03/Apache2-settings-in-OSX/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AngularJS 성능 이슈에 대한 이야기</title>
      <link>http://sculove.github.io/blog/2015/01/16/angular1-for-performance/</link>
      <guid>http://sculove.github.io/blog/2015/01/16/angular1-for-performance/</guid>
      <pubDate>Fri, 16 Jan 2015 08:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;사례를-통한-AngularJS-알아보기&quot;&gt;&lt;a href=&quot;#사례를-통한-AngularJS-알아보기&quot; class=&quot;headerlink&quot; title=&quot;사례를 통한 AngularJS 알아보기&quot;&gt;&lt;/a&gt;사례를 통한 AngularJS 알아보기&lt;/
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="사례를-통한-AngularJS-알아보기"><a href="#사례를-통한-AngularJS-알아보기" class="headerlink" title="사례를 통한 AngularJS 알아보기"></a>사례를 통한 AngularJS 알아보기</h3><p>사례를 통해, 성능 관점에서의 “AngularJS”를 살펴본 내용을 정리한 발표 자료</p><ul><li>발표 URL : <a href="https://sculove.github.io/slides/seeAngularJSthroughCases/">https://sculove.github.io/slides/seeAngularJSthroughCases/</a></li></ul><iframe src="https://sculove.github.io/slides/seeAngularJSthroughCases/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2015/01/16/angular1-for-performance/#disqus_thread</comments>
    </item>
    
    <item>
      <title>How to Make a Smooth Animation</title>
      <link>http://sculove.github.io/blog/2014/11/19/How-to-make-a-smooth-animation/</link>
      <guid>http://sculove.github.io/blog/2014/11/19/How-to-make-a-smooth-animation/</guid>
      <pubDate>Wed, 19 Nov 2014 06:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;FrontEnd-개발자가-수행하는-성능-개선-작업&quot;&gt;&lt;a href=&quot;#FrontEnd-개발자가-수행하는-성능-개선-작업&quot; class=&quot;headerlink&quot; title=&quot;FrontEnd 개발자가 수행하는 성능 개선 작업&quot;&gt;&lt;/a&gt;Front
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="FrontEnd-개발자가-수행하는-성능-개선-작업"><a href="#FrontEnd-개발자가-수행하는-성능-개선-작업" class="headerlink" title="FrontEnd 개발자가 수행하는 성능 개선 작업"></a>FrontEnd 개발자가 수행하는 성능 개선 작업</h3><p>FrontEnd 개발자가 성능 개선을 할 때, 어떤 점을 중심으로 살펴봐야하는지를 정리한 발표자료</p><ul><li>발표 URL : <a href="https://sculove.github.io/slides/improveBrowserRendering">https://sculove.github.io/slides/improveBrowserRendering</a></li></ul><iframe src="https://sculove.github.io/slides/improveBrowserRendering/" width="100%" height="500px" frameborder="0" allowfullscreen></iframe>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2014/11/19/How-to-make-a-smooth-animation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>애니메이션 성능을 높이는 방법</title>
      <link>http://sculove.github.io/blog/2013/12/05/animation-for-performance/</link>
      <guid>http://sculove.github.io/blog/2013/12/05/animation-for-performance/</guid>
      <pubDate>Thu, 05 Dec 2013 14:33:14 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;애니메이션이 많은 화면에서는 성능적 문제에 노출되기 쉽다.&lt;/p&gt;
&lt;p&gt;특히, 하드웨어 성능이 PC에 비해 열악한 모바일 환경에서는 더욱 성능적 이슈에 직면하기 쉽다.&lt;/p&gt;
&lt;p&gt;이 글에서는 성능에 필요한 브라우저 랜더링 과정을 이해하고, 이를
        
      
      </description>
      
      <content:encoded><![CDATA[<p>애니메이션이 많은 화면에서는 성능적 문제에 노출되기 쉽다.</p><p>특히, 하드웨어 성능이 PC에 비해 열악한 모바일 환경에서는 더욱 성능적 이슈에 직면하기 쉽다.</p><p>이 글에서는 성능에 필요한 브라우저 랜더링 과정을 이해하고, 이를 이용하여 애니메이션을 구현할때 유의해야할 점을 살펴보도록 하자.</p><h2 id="브라우저-랜더링-과정"><a href="#브라우저-랜더링-과정" class="headerlink" title="브라우저 랜더링 과정"></a>브라우저 랜더링 과정</h2><p>웹 브라우저의 애니메이션 성능에 대해 논하기 전에 이해해야 할 것이 바로 브라우저 랜더링 과정이다. 애니메이션도 브라우저 랜더링 과정의 한 형태이기 때문에, 브라우저 랜더링 과정을 이해하면, 성능의 bottleneck 부분을 찾을 수 있다</p><p>간단한 HTML을 통해 브라우저 랜더링 과정을 이해해보자.</p><p>아래는 BODY아래에 6개의 div가 있는 간단한 HTML 파일이다.</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>DOM1 - RendersLayer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>DOM2 - RendersLayer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>DOM3 - RendersLayer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span></span></span><br><span class="line"><span class="tag">      <span class="attr">style</span>=<span class="string">"-webkit-transform: rotateY(30deg) rotateX(-30deg); width: 400px;"</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">      DOM4 - RendersLayer - GraphicLayer (transform : rotate)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span>DOM5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>DOM6 - RendersLayer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Demo : <a href="http://jsbin.com/EsewaSIX/3" rel="external nofollow noopener noreferrer" target="_blank">http://jsbin.com/EsewaSIX/3</a></p></blockquote><p>위 파일이 화면에 보여지기까지의 과정을 살펴보면 다음과 같다.</p><ol><li>브라우저는 HTML을 파싱한다.</li><li>DOM을 구성한다. 여기에서는 기본적으로 구성되는 DOM을 제외하고 DIV 6개가 생성된다. (text dom을 설명에서 제외)</li><li>DOM 중에서 화면에 표기될 DOM1,2,3,4,6을 4. RenderTree로 구성한다.</li><li>RenderObject Tree 중에서 별도의 영역으로 구성할 수 있는 DOM4를 RenderLayer Tree로 구성한다.</li><li>브라우저는 구성된 정보를 바탕으로 비동기식으로 표현한다</li></ol><img src="/blog/2013/12/05/animation-for-performance/rendering.png"><blockquote><p>출처. <a href="http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome" rel="external nofollow noopener noreferrer" target="_blank">http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome</a></p></blockquote><p>위 과정을 크롬브라우저 devTool의 timeline을 이용하여 실제 랜더링이 어떻게 되는지를 확인 해 볼 수 있다. 크롬에서 개발자 도구를 열고, Timeline 탭을 클릭후, 위 HTML을 불러오면, 다음과 같이 랜더링 과정을 확인 할 수 있다</p><img src="/blog/2013/12/05/animation-for-performance/timeline.png"><ul><li>Parse HTML은 HTML을 파싱할 경우 발생.<ul><li>테스트 페이지가 파싱된다.</li></ul></li><li>Recalculate Style은 엘리먼트에 스타일이 적용될 경우 발생.<ul><li>div에 지정된 style 속성이 적용된다.</li></ul></li><li>Layout 적용된 style에 의해 위치나 크기가 변경되어 계산이 필요한 경우에 발생.<ul><li>div의 width style 지정으로 인해 layout 계산 작업이 진행된다.</li></ul></li><li>Paint 엘리먼트가 화면에 다시 그려져야할 경우에 발생<ul><li>transform을 사용한 div4는 별도의 RenderLayer로 구성되어 paint되고, 그외 영역(document)에서도 paint된다.</li></ul></li><li>Composite Layers 변경되지 않는 각각의 RenderLayer를 합성할 때에 발생<ul><li>transform을 사용한 div4 RenderLayer와 document의 Renderlayer가 합성되어 표현된다.</li></ul></li></ul><p>브라우저는 한 화면을 화면에 보이기 위해서 위와 같은 다양한 과정을 수행한다. 위의 Timeline에서는 HTML Parse 과정이 가장 많은 시간이 걸리지만, 실제 애니메이션 구현 시에는 HTML 파싱이 완료된 후, 사용자의 액션에 의해 동작되기 때문에, 애니메이션 성능에 영향을 미치는 요소는 다르다. ``애니메이션이 동작할 때는 layout 작업 이나, 연속적인 paint 작업으로 인해 성능문제가 발생한다.`</p><h2 id="애니메이션-성능을-높이는-방법"><a href="#애니메이션-성능을-높이는-방법" class="headerlink" title="애니메이션 성능을 높이는 방법"></a>애니메이션 성능을 높이는 방법</h2><p>위에서 살펴봤듯이 랜더링 과정중에 div의 style 속성이 무엇이 지정되느냐에 따라서, 별도의 layer(RenderLayer)가 생성되기도 하고, layout 계산이 되기도 한다.</p><h3 id="1-Layer-구성하기"><a href="#1-Layer-구성하기" class="headerlink" title="1. Layer 구성하기"></a>1. Layer 구성하기</h3><p>우선 layer개념에 대해 알아보자. 여기에서는 설명의 편의상 RenderLayer를 Layer라고 지칭한다. 브라우저가 layer를 나누는 목적은 변경이 될 요소가 많은 영역을 별도로 관리하여, 해당 영역이 변경되었을때, 그 부분만을 반영하기 위한 것이다. 또한 이렇게 나뉜 각각의 layer는 layer 병합(composite)을 통해서 paint 또는 layout 없이 새로운 화면을 구성할 수 있다</p><img src="/blog/2013/12/05/animation-for-performance/layercomposite.jpeg"><blockquote><p>출처. <a href="http://blog.dotify.fr/interactive-video-part-2-developing-the-player-with-the-new-as3-api/" rel="external nofollow noopener noreferrer" target="_blank">http://blog.dotify.fr/interactive-video-part-2-developing-the-player-with-the-new-as3-api/</a></p></blockquote><p>브라우저가 DOM을 Layer로 구성하는 경우는 다음과 같다.</p><ul><li>3D(translate3d, preserve-3d, ,..)나 perspective transform을 사용하는 경우</li><li>VIDEO, CANVAS 태그를 사용하는 경우</li><li>Flash나 ActiveX를 사용하는 경우</li><li>CSS Animation, CSS filter를 사용하는 경우</li><li>자식엘리먼트가 layer로 구성되어 있을 경우</li><li>z-index가 낮은 형제일리먼트가 layer로 구성되어 있을 경우, 대상 엘리먼트도 layer로 구성됨</li></ul><p>애니메이션은 애니메이션되는 대상의 style을 주기적으로 변경하여 이동하게 되는데 이때, 변경되는 style로 인해, 많은 paint나 layout이 연속적으로 발생하여 애니메이션의 성능을 지연하는 경우가 발생한다. 이때에는 <code>layer composite을 이용하여 paint와 layout이 발생되지 않도록 유도하는 것이 성능적으로 이점을 얻을 수 있다.</code></p><h3 id="2-GPU-가속-사용하기"><a href="#2-GPU-가속-사용하기" class="headerlink" title="2. GPU 가속 사용하기"></a>2. GPU 가속 사용하기</h3><p>GPU가속은 앞에서 설명한 composite layer 방식으로만 동작한다. 앞의 내용과 다른 것은 각각의 layer를 GPU 메모리에 bitmap 형태의 texture로 저장하여, 실제 composite layer작업을 할때에는 GPU의 메모리에서 관련작업을 진행한다. 따라서 굉장히 빠르다.<br>다음 style이 적용되면 브라우저는 GPU에 해당 엘리먼트 영역(Layer)을 메모리에 texture로 저장한다.</p><ul><li>-webkit-transform : translate3d</li><li>-webkit-transform : translateZ</li><li>-webkit-transform : rotate3d</li><li>-webkit-transform : scale3d</li><li>-webkit-transform-style : preserved-3d</li></ul><p>하지만, GPU는 하드웨어의 성능에 따라 성능이 달라지기 때문에, GPU가속을 사용할때는 주의를 기울어야한다.</p><ol><li>무분별한 GPU사용은 오히려 브라우저를 느리게한다.</li><li>엘리먼트에 GPU사용 속성이 부여되는 순간 브라우저가 대상영역을 GPU메모리에 올리기 때문에, 컨텐츠가 클 경우에는 깜빡이는 현상이 발생할수 있다.</li><li>엘리먼트에 GPU사용 속성이 부여되면 Layer로 분리되며, Layer는 변경되는 내용이 없는 한 다시 엘리먼트 내용을 GPU메모리에 올리지 않는다.</li><li>GPU사용 속성을 사용한 엘리먼트의 내용이 변경되면 GPU 메모리에 갱신되기 때문에, 엘리먼트의 내용변경을 미리하고, 그 이후에 GPU사용 속성을 부여하도록 한다.</li><li>저사양의 폰에서 하드웨어가속을 사용하는 것은 오히려 성능저하의 주범이 된다.<br>경험적으로 iOS3.x, Android는 4.1이상을 지원하는 단말기에서는 GPU 가속을 적용하는 것이 더 좋은 성능을 나타내었다.</li></ol><h3 id="3-애니메이션동작시-Layout-변경하는-스타일이나-메소드-사용하지-않기"><a href="#3-애니메이션동작시-Layout-변경하는-스타일이나-메소드-사용하지-않기" class="headerlink" title="3. 애니메이션동작시 Layout 변경하는 스타일이나 메소드 사용하지 않기"></a>3. 애니메이션동작시 Layout 변경하는 스타일이나 메소드 사용하지 않기</h3><p>브라우저 랜더링 과정중 가장 느린 작업 중의 하나가 layout 작업이다. 이 작업은 엘리먼트의 위치나 크기를 계산하는 작업이기 때문에, 비용이 높고, 자주 사용할 경우, 성능에 치명적이다. 특히, 주기적으로 엘리먼트의 style을 변경하는 애니메이션에서 width, height와 같이 대상의 크기를 변경하는 layout 작업이 발생하면, 부드러운 애니메이션을 기대하기는 어렵다.</p><p>다음은 layout을 유발하는 스타일이나 메소드이다</p><blockquote><ul><li>Element : clientHeight, clientLeft, clientTop, clientWidth, focus(), getBoundingClientRect(), getClientRects(), innerText, offsetHeight, offsetLeft, offsetParent, offsetTop, offsetWidth, outerText, scrollByLines(), scrollByPages(), scrollHeight, scrollIntoView(), scrollIntoViewIfNeeded(), scrollLeft, scrollTop, scrollWidth</li></ul></blockquote><ul><li>Position : left, top, position, float</li><li>BOX, Border : height, width, padding, margin, display, border-width, border</li><li>Range : getBoundingClientRect(), getClientRects()</li><li>Window : getComputedStyle(), scrollBy(), scrollTo(), scrollX, scrollY, webkitConvertPointFromNodeToPage(), webkitConvertPointFromPageToNode()</li></ul><p>따라서 가능하면 애니메이션 동작 시 위에 나열된 메소드와 속성은 호출하거나 변경하지 않는 것이 좋다. 혹시 변경이 필요하다면 애니메이션 동작시가 아닌 동작 전,후에 미리 작업을 하거나, layout이 발생하지 않는 대처 속성을 사용하는 것이 좋다.</p><p>다음은 layout을 변경하는 메소드를 대처할 수 있는 속성들이다.<br>이 속성들은 모두 composite layer를 구성한다.</p><blockquote><ul><li>left =&gt; translateX</li></ul></blockquote><ul><li>top =&gt; translateY</li><li>filter:fade =&gt; opacity</li></ul><p>안타깝게도 width, height를 변경하는 경우에는 어쩔수 없이 layout이 변경되기 때문에<br>가능하면 사용을 지양하도록 한다. <code>꼭! 필요하다면 scale을 이용한다.</code></p><h2 id="실습"><a href="#실습" class="headerlink" title="실습"></a>실습</h2><p>위에서 언급한 내용을 기준으로 박스를 오른쪽으로 옮기는 예제를 성능 개선 해보자.<br>다음은 간단하게 박스를 이동하는 예제이다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"testDiv"</span> style=<span class="string">"width:100px;height:100px;background-color:#188B18;position:absolute;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">"testDiv"</span>);</span><br><span class="line">  <span class="keyword">var</span> nAdd = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> nInterval = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    nAdd += <span class="number">10</span>;</span><br><span class="line">    el.style.left = nAdd + <span class="string">"px"</span>;</span><br><span class="line">    <span class="keyword">if</span>(nAdd &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">      clearInterval(nInterval);</span><br><span class="line">      nInterval = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">16</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Demo : <a href="http://jsbin.com/IkeJelA/1" rel="external nofollow noopener noreferrer" target="_blank">http://jsbin.com/IkeJelA/1</a></p></blockquote><p>위 예제는 left를 변경하여 상자를 이동한다. left는 layout을 변경하기 때문에 매번 layout작업이 발생한다.<br>위 과정을 Chrome DevTool의 Timeline을 통해 보면 다음과 같다.<br>지속적으로 Recalculate Style – Layout – paint가 반복적 발생하는 것을 볼 수 있다.</p><img src="/blog/2013/12/05/animation-for-performance/ex1.png"><p>애니메이션이 동작하는 동안 지속적으로 layout과 paint가 반복적으로 발생하는 것을 확인하였다. Layout과 paint 비용을 개선하기 위해, layer로 상자를 구성하여 layer composite이 발생하도록 유도하고 GPU 가속을 사용하도록 개선한다.</p><p>Layer를 구성하기위해 left로 변경되는 방식을 transform의 translate으로 변경하고, GPU 가속을 사용하기 위해, translate 대신, translate3d를 사용하도록 한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">"testDiv"</span> style=<span class="string">"width:100px;height:100px;background-color:#188B18;position:absolute;"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line">  <span class="keyword">var</span> el = <span class="built_in">document</span>.getElementById(<span class="string">"testDiv"</span>);</span><br><span class="line">  <span class="keyword">var</span> nAdd = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">var</span> nInterval = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    nAdd += <span class="number">10</span>;</span><br><span class="line">    el.style.webkitTransform = <span class="string">"translate3d("</span> + nAdd + <span class="string">"px,0,0)"</span>;</span><br><span class="line">    <span class="keyword">if</span>(nAdd &gt;= <span class="number">400</span>)&#123;</span><br><span class="line">      clearInterval(nInterval);</span><br><span class="line">      nInterval = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">16</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Demo : <a href="http://jsbin.com/eQEqIJa/1/" rel="external nofollow noopener noreferrer" target="_blank">http://jsbin.com/eQEqIJa/1/</a></p></blockquote><p>위 과정을 Chrome DevTool의 Timeline을 통해 보면 다음과 같다.</p><img src="/blog/2013/12/05/animation-for-performance/ex2.jpg"><p>Layout 작업이 사라지고, Recalculate Style – Composite Layer 작업만 존재한다.</p><p>모바일에서 두 예제를 확인해 보면, 두번째 예제가 첫번째 예제보다도 빠르고 매끄럽게 이동하는 것을 확인할 수 있다.<br>브라우저의 특성을 이해하면 간단한 속성 변경만으로도 많은 성능향상을 할 수 있다.</p><h2 id="참조-문서"><a href="#참조-문서" class="headerlink" title="참조 문서"></a>참조 문서</h2><ul><li><a href="http://www.html5rocks.com/en/tutorials/speed/layers/" rel="external nofollow noopener noreferrer" target="_blank">http://www.html5rocks.com/en/tutorials/speed/layers/</a></li><li><a href="https://speakerdeck.com/jaffathecake/rendering-without-lumps" rel="external nofollow noopener noreferrer" target="_blank">https://speakerdeck.com/jaffathecake/rendering-without-lumps</a></li><li><a href="http://www.chrisdanford.com/blog/2011/07/24/understanding-hardware-compositing-css-transforms/" rel="external nofollow noopener noreferrer" target="_blank">http://www.chrisdanford.com/blog/2011/07/24/understanding-hardware-compositing-css-transforms/</a></li><li><a href="http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome" rel="external nofollow noopener noreferrer" target="_blank">http://www.chromium.org/developers/design-documents/gpu-accelerated-compositing-in-chrome</a></li></ul>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2013/12/05/animation-for-performance/#disqus_thread</comments>
    </item>
    
    <item>
      <title>모바일 브라우저 ECMAScript5 지원 현황</title>
      <link>http://sculove.github.io/blog/2013/11/06/mobile-es5-compatiable/</link>
      <guid>http://sculove.github.io/blog/2013/11/06/mobile-es5-compatiable/</guid>
      <pubDate>Wed, 06 Nov 2013 02:45:32 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;데스크탑 브라우저는 친절하게도&lt;br&gt;&lt;a href=&quot;http://kangax.github.io/compat-table/es5/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;http:
        
      
      </description>
      
      <content:encoded><![CDATA[<p>데스크탑 브라우저는 친절하게도<br><a href="http://kangax.github.io/compat-table/es5/" rel="external nofollow noopener noreferrer" target="_blank">http://kangax.github.io/compat-table/es5/</a> 에 정리되어 있다.</p><p>근데.. 모바일은 상세 내역이 없어서 <code>실제 단말기</code>에서 확인하였음.</p><h4 id="개-노-가-대-했음-허허허"><a href="#개-노-가-대-했음-허허허" class="headerlink" title="개. 노. 가. 대. 했음 허허허"></a>개. 노. 가. 대. 했음 허허허</h4><p>데스크탑과 동일한 기준으로 확인했음</p><img src="/blog/2013/11/06/mobile-es5-compatiable/ECMAScript5.png"><blockquote><p>갤노트 2.3은 특이하게 안드로이드 4.0대와 같은 ECMAScript5를 지원</p></blockquote><hr><h3 id="결론적으로-iOS6-Android-4-1-이상에서부터는-ECMAScript-5를-맘껏-쓸수-있다"><a href="#결론적으로-iOS6-Android-4-1-이상에서부터는-ECMAScript-5를-맘껏-쓸수-있다" class="headerlink" title="결론적으로 iOS6, Android 4.1 이상에서부터는 ECMAScript 5를 맘껏 쓸수 있다~!"></a>결론적으로 iOS6, Android 4.1 이상에서부터는 ECMAScript 5를 맘껏 쓸수 있다~!</h3>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2013/11/06/mobile-es5-compatiable/#disqus_thread</comments>
    </item>
    
    <item>
      <title>내가 하는 일 가슴 설레는 일</title>
      <link>http://sculove.github.io/blog/2012/03/18/myjob-myhappy/</link>
      <guid>http://sculove.github.io/blog/2012/03/18/myjob-myhappy/</guid>
      <pubDate>Sun, 18 Mar 2012 02:10:00 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/blog/2012/03/18/myjob-myhappy/book.jpg&quot;&gt;
&lt;p&gt;라디오에서 좋은 책을 소개시켜 줬다고해서 한번 사서 봐봤다.&lt;br&gt;뭐 내용은 일본 디즈니랜드에서 일한 가마타라는 일본사람이 매니저로서 경험했던일들을 몇 
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2012/03/18/myjob-myhappy/book.jpg"><p>라디오에서 좋은 책을 소개시켜 줬다고해서 한번 사서 봐봤다.<br>뭐 내용은 일본 디즈니랜드에서 일한 가마타라는 일본사람이 매니저로서 경험했던일들을 몇 가지 에피소드로 풀어쓴 책이다.</p><p>기대를 너무 해서일까? 기대와는 다르게 별 내용이 없었다.<br>책 서론이 책 전체의 내용이 었다.</p><p>디즈니 랜드에서 야간 청소부를 하면서 살아가는 사람들이 자신이 하는 일에 자부심을 가지고<br>꿈을 키워가는 몇가지 에피소드를 소개한다.</p><p>물론, 느끼고 배운 점은 있지만. 한마디로 좀 실망스런 책이다.<br>단 하나 배운게 있다면.<br><code>내 일에 자부심을 갖고, 내 일로 행복을 찾는 사람들이 있기에 가슴 설레며 일할 수 있다</code> 정도..</p><p>그나마 이 책에서 느꼈던 몇 마디들..</p><blockquote><p>‘믿음을 공유하면 못 넘는 일은 없다’<br>‘무슨 일이든 쉽게 한계를 짓지 말고 끈기 있게 시도하다 보면 이뤄낼 수 있다’<br>‘시도하지 않으면 변화도 없다. 상황을 바꾸기 위해서는 누군가 첫걸음을 떼야한다. 제가 하겠습니다.’<br>‘꿈꾸지 않는 사람은 누구도 꿈꾸게 할 수 없다.’<br>‘꿈은 결국 이뤄지더라고요. 포기만 하지 않으면.’</p></blockquote>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2012/03/18/myjob-myhappy/#disqus_thread</comments>
    </item>
    
    <item>
      <title>만약 고교야구 여자 매니저가 피터드러커를 읽는다면</title>
      <link>http://sculove.github.io/blog/2012/02/29/manager-book/</link>
      <guid>http://sculove.github.io/blog/2012/02/29/manager-book/</guid>
      <pubDate>Wed, 29 Feb 2012 05:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/blog/2012/02/29/manager-book/book.jpg&quot;&gt;

&lt;p&gt;경영의 아버지 &lt;code&gt;피터 드러커&lt;/code&gt;를 알게 해준 책.&lt;br&gt;나같은 공학도들은 경영, 경제에 대해서는 특히나 좀 모지란 구석이 있다.&lt;br&gt;
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2012/02/29/manager-book/book.jpg"><p>경영의 아버지 <code>피터 드러커</code>를 알게 해준 책.<br>나같은 공학도들은 경영, 경제에 대해서는 특히나 좀 모지란 구석이 있다.<br>하지만, 회사생활을 하다보니 어느새 경제에 관심이 가고,<br>조직생활을 하다보니 경영에 관심이 가게되었다.</p><p>제조기술.즉 프로세스를 어떻게 바꿈으로써, 공장의 생산성을 어떻게 향상시켰는지에 대한 내용을 소설의 형식을 통해 알려준 “Goal”이라는 책의 전개방식과 유사하다. 차이점이라면 이 책이 보다 감동적이고, 보다 읽기 편하고 보다 명확하다는 것이다.</p><p>이 책은 딱딱한 경영이론을<br>남자가 아닌 여자. 더군다나 여교생이</p><p>회사나 조직이 아닌 야구장에서 어떻게 <code>경영학의 이론</code>을 적용하고, 또 실천하는지에 대해<br>아주 자연스럽게 감동적으로 이야기를 하고 있다.</p><p>회사 셔틀에서 책읽다가 운 사람은 아마 나밖에 없을 꺼다. 지금도 울컥하는군.<br>요즘 애아빠 되고 나서부터 감수성이 많이 풍부해졌다 ㅠㅠ</p><p>암튼 각설하고,<br>이 책에 나온 경영 이론을 아주 간단하게 나마 적어보자.</p><h3 id="책-이야기"><a href="#책-이야기" class="headerlink" title="책 이야기"></a>책 이야기</h3><p>관리자란.기준을 높게 잡고 그걸 이루기를 기대한다. 무엇이 옳은가만을 생각하고 누가 옳은가는 생각하지 않는다.<br>지적인 능력보다 <code>진지함</code>을 더욱 높게 평가받는다.<br>조직의 목표를 전문가에게 알아듣도록 번역해주고, 거꾸로 전문가의 아웃풋을 그의 고객인 동료들이 알아듣게 번역해주는 일을 해야한다.</p><p>기업의 목적과 사명은 단 하나 고객창조이다. 고객은 누구인가? 답이 빤한 질문이 아니다.<br>기업은 딱 두가지 기본적인 기능을 가진다. <code>마케팅</code>과 <code>이노베이션</code></p><p><code>마케팅</code>은 고객의 현실, 욕구, 가치를 찾는 것.<br>고객은 무엇을 사고 싶어하는가? 고객이 가치를 인정하고, 필요로 하고, 원하는 만족은 무엇인가?<br>마케팅에서는 집중의 목표가 중요하다.</p><p>고대의 위대한 과학자 아르키메스는</p><blockquote><p>네게 서 있을 자리를 다오. 그러면 세상을 들어 올리겠다</p></blockquote><p>여기서 서 있을 자리가 바로 집중해야할 분야이다.</p><p><code>매니지먼트</code>는 생산적인 일을 통해 일하는 사람들이 성과를 올리게 만드는 것이다.<br>어떻게 일을 생산적인 것으로 만드는가?</p><ol><li>분석 : 일을 분석한다. 일에 필요한 작업과 순서, 도구를 파악한다.</li><li>종합 : 업무를 모아 프로세스로 편성</li><li>관리 : 일의 프로세스 안에서 방향, 질과 양, 기준과 예외에 관한 관리 방법을 설정해야한다. 자기 목표 관리를 도입</li><li>도구</li></ol><p>매니지먼트는 자기가 속한 조직이 사회에 미치는 영향을 관리하면서, 동시에 사회문제 해결에 공헌해야한다.</p><p>일의 보람을 느끼게 하려면 <code>책임감</code>을 갖도록 해야한다.<br>그럴려면 생산적인 일, 피드백 정보, 지속적인 학습을 할수 있도록 해줘야한다.<br>자기 자신이나 작업자 집단이 설계한 일에 책임을 지게 하려면, 그들이 자기 전문 분야에서 자신의 지식과 경험을 살릴 수 있어야한다.</p><p>사람을 매니지먼트한다는 것은 <code>그 사람의 장점을 살리는 일</code>이다.<br>조직의 목적은 사람의 장점을 생산으로 연결하고 그 사람의 약점을 중화시키는 것이다.<br>사람이 최대의 자산이다.</p><p>이노베이션은 새로운 만족을 만들어내는 일이다. 과학이나 기술이 아닌 <code>가치</code>다.<br>기업의 이노베이션은 늘 <code>시장</code>에 초점을 맞추어야만 한다. 조직 안에서가 아닌 조직 밖에서 일으키는 변화다.<br>기존 사업에 관한 전략지침이 <code>더 좋게 더 많이</code> 라고 한다면, 이노베이션에 대한 전략 지침은 <code>더 새롭게 더 다르게</code> 이다.</p><p>백발백중 성과를 올리는 일은 불가능하다. 성과란 장기적으로 보아야한다. 결코 실수나 실패를 모르는 사람을 믿어서는 안된다.<br>약점만 지적당하면 사람들은 의욕도 잃고 사기도 떨어진다. 뛰어난 사람일수록 많은 실수를 저지른다. 뛰어난 사람일수록 새로운 일을 시도하려고 든다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2012/02/29/manager-book/#disqus_thread</comments>
    </item>
    
    <item>
      <title>뱀의 뇌에게 말을 걸지마라</title>
      <link>http://sculove.github.io/blog/2012/02/19/donot-speak-book/</link>
      <guid>http://sculove.github.io/blog/2012/02/19/donot-speak-book/</guid>
      <pubDate>Sun, 19 Feb 2012 06:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/blog/2012/02/19/donot-speak-book/book.jpg&quot;&gt;

&lt;p&gt;정말 오랫만에 읽어본 의사소통에 관한 책이다.&lt;br&gt;오프라 윈프라의 소통의 비결. 미국 FBI 협상전담반 공식교과서인 이 책.&lt;br&gt;정말 오래 읽
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2012/02/19/donot-speak-book/book.jpg"><p>정말 오랫만에 읽어본 의사소통에 관한 책이다.<br>오프라 윈프라의 소통의 비결. 미국 FBI 협상전담반 공식교과서인 이 책.<br>정말 오래 읽은 책중에 하나다.<br>그래도 지금까지 읽은 의사소통 책중에 최고 인듯 하다.</p><h2 id="인간의-뇌"><a href="#인간의-뇌" class="headerlink" title="인간의 뇌"></a>인간의 뇌</h2><p>이 책에서는 인간의 뇌에 대한 이야기 부터 시작한다.<br><code>가장 원시적인 파충류의 뇌(뱀의 뇌) -&gt; 표유류의 뇌(쥐의 뇌) -&gt; 영장류의 뇌(사람의 뇌)</code>의 상태가 존재하는데…</p><h3 id="편도체-납치"><a href="#편도체-납치" class="headerlink" title="편도체 납치"></a>편도체 납치</h3><p>사람이 스트레스를 받게되면, 파충류나 표유류의 뇌에게 주도권을 뺏기어, 원시적으로 반응한다고 한다.<br>이를 <code>편도체 납치</code>라고 부른다.</p><h3 id="거울-신경세포-수용체-결핍"><a href="#거울-신경세포-수용체-결핍" class="headerlink" title="거울 신경세포 수용체 결핍"></a>거울 신경세포 수용체 결핍</h3><p>사람은 세상을 거울처럼 반영하면서 세상의 요구에 순응하고 사랑과 인정을 받기 위해 노력한다고 주장한다.<br>이에 대한 보상으로 누군가 역시 자기를 거울처럼 반영해 주기를 갈망한다. 이 갈망이 채워지지 않는 경우를 <code>거울 신경세포 수용체 결핍</code> 이라고 부른다.</p><p>이 책은 위 두가지 이론을 바탕으로, 다음의 내용을 주장하고 있다.</p><blockquote><p>다른사람을 설득하는, 의사소통하는 것은<br>다른 사람에게 당신은 흥미로운 존재, 중요한 존재라는 느낌을 주는 것이며, 무엇보다도 공감을 얻고 있다는 느낌을 주는 것이다</p></blockquote><p>각 장은 위 주제어를 바탕으로 실전적인 저자의 방법과 사례들을 알려준다.<br>매우 현실적으로 유용한 내용들이다.</p><h2 id="Part2-사람의-마음을-조절하는-9가지-법칙"><a href="#Part2-사람의-마음을-조절하는-9가지-법칙" class="headerlink" title="Part2. 사람의 마음을 조절하는 9가지 법칙"></a>Part2. 사람의 마음을 조절하는 9가지 법칙</h2><h3 id="1-흥분한-내-안의-짐승을-빨리-진정시켜라"><a href="#1-흥분한-내-안의-짐승을-빨리-진정시켜라" class="headerlink" title="1) 흥분한 내 안의 짐승을 빨리 진정시켜라!"></a>1) 흥분한 내 안의 짐승을 빨리 진정시켜라!</h3><dl><dt>&lt;일반적인 감정의 5단계 변화&gt;<br>1단계 – 젠장! (반응)<br>2단계 – 큰일이군 (발산)<br>3단계 – 에잇. 괜찮아 해결할수 있을 거야 (회복)<br>4단계 – 자 그럼 (집중)<br>5단계 – OK (재개)</dt><dd>자신의 생각과 감정을 가장 빨리 통제하는 가장 좋은 방법은 <code>현재 내가 감정의 어떤 단계인지를 규명하는 것!</code> 자신의 감정을 부인하지 말라.</dd></dl><h3 id="2-알고-있다고-‘생각’하는-것의-위험"><a href="#2-알고-있다고-‘생각’하는-것의-위험" class="headerlink" title="2) 알고 있다고 ‘생각’하는 것의 위험"></a>2) 알고 있다고 ‘생각’하는 것의 위험</h3><p>선입견을 가지고 규명하지 말고, 그 사람의 행동 뒤에 숨은 이유를 찾아라.</p><h3 id="3-엇나가는-상대의-욕구를-파악하라"><a href="#3-엇나가는-상대의-욕구를-파악하라" class="headerlink" title="3) 엇나가는 상대의 욕구를 파악하라"></a>3) 엇나가는 상대의 욕구를 파악하라</h3><p>상대에게 공감을 얻고 있다고 느끼게 해준다면, 상대의 외로움은 줄어들고, 이로 인해 불안,공포,경계도 감소하여 방어적인 태도를 버리 이야기를 시작할 수 있다.<br>‘나도 똑같이 느끼고 있으며, 당신의 느낌을 이해한다’</p><h3 id="4-관심을-끌려고-하지-말고-관심을-보여라"><a href="#4-관심을-끌려고-하지-말고-관심을-보여라" class="headerlink" title="4) 관심을 끌려고 하지 말고, 관심을 보여라!"></a>4) 관심을 끌려고 하지 말고, 관심을 보여라!</h3><p>탐정 놀이 처럼 대화하라. 다른 사람에게 관심을 더 기울일 수록 그 사람의 거울 신경세포 수용체 결핍으로, 당신에게 고마워하며 공감을 느낀다.<br>당신이 매력적이라고 말하는 것은 지루하고 자기중심적이다라고 느낄수 있다. 내 자랑을 늘어놓느라 다른사람의 말을 무시하는 것은 더욱 그러하다.</p><blockquote><p>skill!</p></blockquote><ul><li>상대의 말을 “요약”하라</li><li>기회가 생길때 조언을 구하라</li><li>질문할때, 나를 돋보이는 질문이 아닌 상대를 돋보이는 질문을 하라</li></ul><h3 id="5-중요한-사람이라고-느끼게-만들어라"><a href="#5-중요한-사람이라고-느끼게-만들어라" class="headerlink" title="5) 중요한 사람이라고 느끼게 만들어라"></a>5) 중요한 사람이라고 느끼게 만들어라</h3><p>괴롭히는 사람에게 이렇게 말하라<br>‘당신이 하는 말은 나한테 너무 중요하니깐 집중할 수 있을 때 차분히 들어야 할것 같아요. 지금은 시간이 없으니, 30분후에 다시 얘기해주세요’</p><h3 id="6-웅덩이에서-허우적대는-상대를-설득하려-하지-마라"><a href="#6-웅덩이에서-허우적대는-상대를-설득하려-하지-마라" class="headerlink" title="6) 웅덩이에서 허우적대는 상대를 설득하려 하지 마라!"></a>6) 웅덩이에서 허우적대는 상대를 설득하려 하지 마라!</h3><p>감정을 발산할 수 있도록 상대를 유도하라.<br>둘만의 시간을 가지며, ‘혹시 내가 당신을 존중하지 않는다고 느낀 적이 있나요?’ 라고 이야기를 들어주며, ‘좀 더 예기해주세요’ 라고 말하라.</p><h3 id="7-내가-어필하고-싶은-모습대로-나를-내보여라"><a href="#7-내가-어필하고-싶은-모습대로-나를-내보여라" class="headerlink" title="7) 내가 어필하고 싶은 모습대로 나를 내보여라!"></a>7) 내가 어필하고 싶은 모습대로 나를 내보여라!</h3><p>(주변 인식변화를 통해) 부조화를 일치시켜라 (유머스럽다 VS 눈치없다, 자신감있다 VS 오만하다)</p><ul><li>‘지금 나는 당신이 나를 공격한다고 느끼고 있습니다. 당신도 내가 당신을 공격한다고 느끼고 있을 겁니다. 하지만, 지금 우리 둘 다 자신을 방어하는데만 급급한것 같네요. 그러니깐 내가 당신을 상처줄 생각은 전혀 없다는 걸 알아주면 좋겠습니다.’</li><li>‘고함을 치는 것은 상대를 위협하려고 하는 것이 아니라, 사실은 상대가 자신의 말을 잘 듣고 고려하지 않는다고 느끼기 때문이다. 오히려 자신이 무기력하고 보잘겂 없다는 느낌에 사로잡혀 그러는 것이다. 개가 짖는 이유는 위협이 아닌 무서워서 짓는 것이다.’</li><li>어쩔수 없는 부조화라면, 예의바르고 공손하게 자신이 서투르다고 얘기하라</li></ul><h3 id="8-약점은-일부러-더-확실하게-내보여라"><a href="#8-약점은-일부러-더-확실하게-내보여라" class="headerlink" title="8) 약점은 일부러 더 확실하게 내보여라"></a>8) 약점은 일부러 더 확실하게 내보여라</h3><h3 id="9-해로운-사람을-바꾸려고-노력하지-마라"><a href="#9-해로운-사람을-바꾸려고-노력하지-마라" class="headerlink" title="9) 해로운 사람을 바꾸려고 노력하지 마라!"></a>9) 해로운 사람을 바꾸려고 노력하지 마라!</h3><h2 id="Part3-상대를-우호적인-모드로-세팅하는-12가지-기술"><a href="#Part3-상대를-우호적인-모드로-세팅하는-12가지-기술" class="headerlink" title="Part3. 상대를 우호적인 모드로 세팅하는 12가지 기술"></a>Part3. 상대를 우호적인 모드로 세팅하는 12가지 기술</h2><h3 id="1-불가능-질문-전략-–-회의적인-상대를-‘의욕’-모드로…"><a href="#1-불가능-질문-전략-–-회의적인-상대를-‘의욕’-모드로…" class="headerlink" title="1) 불가능 질문 전략 – 회의적인 상대를 ‘의욕’ 모드로…"></a>1) 불가능 질문 전략 – 회의적인 상대를 ‘의욕’ 모드로…</h3><p>지금은 불가능한 일 중에서, 만약 당신이 할 수만 있다면 당신에게 엄청난 성공을 가져다줄 만한것이 있습니까? 어떻게하면 그게 가능할까요?</p><h3 id="2-마술적-패러독스-전략-–-반항하는-상대를-‘납득’-모드로…"><a href="#2-마술적-패러독스-전략-–-반항하는-상대를-‘납득’-모드로…" class="headerlink" title="2) 마술적 패러독스 전략 – 반항하는 상대를 ‘납득’ 모드로…"></a>2) 마술적 패러독스 전략 – 반항하는 상대를 ‘납득’ 모드로…</h3><p>진정으로 원하는 것과 전혀 다른 정반대의 목표를 가진양 행동하는 것으로, 상대의 부정적인 상태를 공감하여, Yes를 유도하라. 그러면 대화는 가능할 것이다.</p><h3 id="3-감정이입-쇼크-전략-–-방관자를-‘협조’-모드로…"><a href="#3-감정이입-쇼크-전략-–-방관자를-‘협조’-모드로…" class="headerlink" title="3) 감정이입 쇼크 전략 – 방관자를 ‘협조’ 모드로…"></a>3) 감정이입 쇼크 전략 – 방관자를 ‘협조’ 모드로…</h3><p>A와 B의 중계자로 역할하여, A의 입장에서 B에게 질문을, B의 입장에서 A에게 질문을 하는 방법</p><ul><li>‘A, 만약 당신이 B에게 당신과 일하는 데 제일 힘든 점이 뭐냐고 묻는다면 뭐라고 대답할것인가요?’</li></ul><h3 id="4-역방향-플레이-전략-–-무능력한-상대-변화가-가능한-사람-를-‘의욕’-모드로…"><a href="#4-역방향-플레이-전략-–-무능력한-상대-변화가-가능한-사람-를-‘의욕’-모드로…" class="headerlink" title="4) 역방향 플레이 전략 – 무능력한 상대(변화가 가능한 사람)를 ‘의욕’ 모드로…"></a>4) 역방향 플레이 전략 – 무능력한 상대(변화가 가능한 사람)를 ‘의욕’ 모드로…</h3><ul><li>상대에게 대화를 요청한다. 절대 당장은 만나지 말고, 상대가 생각할 수 있는 시간을 주라.</li><li>상대가 나에게 실망했거나 좌절했을 만한 구체적인 예를 세가지 정도 생각후, 상대방의 입장에서 생각한다.</li><li>상대는 만날시간이 될수록 자신을 비판할거라고 예상할것 이다. 만났을때 상대에게 생각했던 내용을 상대방 입장으로 사과하라.</li><li>마지막으로 ‘내말이 맞나요? 혹시 아니라면 나에게 더욱 실망한것이 무엇인가요?’ 라고 묻는다.</li><li>혹시 얘기하면 진심으로 사과한다. 그리고 다른얘기를 하지 말고 대화를 마친다.</li></ul><h3 id="5-‘정말-’-전략-–-과도하게-흥분한-상대를-‘진정’-모드로…"><a href="#5-‘정말-’-전략-–-과도하게-흥분한-상대를-‘진정’-모드로…" class="headerlink" title="5) ‘정말?’ 전략 – 과도하게 흥분한 상대를 ‘진정’ 모드로…"></a>5) ‘정말?’ 전략 – 과도하게 흥분한 상대를 ‘진정’ 모드로…</h3><p>차분하고 솔직한 태도로 ‘정말’ 그렇게 생각하십니까? 라고 묻는다. 단, 내가 권력자의 위치에 있어서 직업이나 관계가 위험에 빠진 걱정을 하지 않아도 되는 경우에 사용한다.</p><h3 id="6-‘음’-전략-–-적대감을-품은-상대를-‘이해’-모드로…"><a href="#6-‘음’-전략-–-적대감을-품은-상대를-‘이해’-모드로…" class="headerlink" title="6) ‘음’ 전략 – 적대감을 품은 상대를 ‘이해’ 모드로…"></a>6) ‘음’ 전략 – 적대감을 품은 상대를 ‘이해’ 모드로…</h3><p>상대의 말이 중요하며 들을 가치가 있고 행동으로 옮길 가치가 있다는 것을 표현한다.</p><h3 id="7-합의문-전략-–-감추고-싶은-약점을-‘장점’-모드로…"><a href="#7-합의문-전략-–-감추고-싶은-약점을-‘장점’-모드로…" class="headerlink" title="7) 합의문 전략 – 감추고 싶은 약점을 ‘장점’ 모드로…"></a>7) 합의문 전략 – 감추고 싶은 약점을 ‘장점’ 모드로…</h3><p>문제점이나 단점을 미리 밝혀 동의를 구할때는 남의 눈에 신경 쓰지 않는 ‘자신감’ 있는 태도가 필수적이다. 내가 여유를 가질수록 상대도 느긋해진다.</p><h3 id="8-변화중심화법-–-일차적인-관계를-이해와-공감의-‘친밀’-모드로-…"><a href="#8-변화중심화법-–-일차적인-관계를-이해와-공감의-‘친밀’-모드로-…" class="headerlink" title="8) 변화중심화법 – 일차적인 관계를 이해와 공감의 ‘친밀’ 모드로 …"></a>8) 변화중심화법 – 일차적인 관계를 이해와 공감의 ‘친밀’ 모드로 …</h3><p>내가 이사람의 생각이나 관심사, 미래나 인생에 관심이 있다는 것을 단번에 보여줄 수 있는 질문은 무엇일까?<br>천장을 올려다 보며 곰곰히 생각해 보는 질문을 던저라.<br>‘당신이 목표를 향해 더 빨리 나아가는 데 제가 도움이 되는 일이 한가지 있다면 무엇일까요?’</p><h3 id="9-나란히-전략-–-지시와-명령에-지친-상대를-‘적극’-모드로…"><a href="#9-나란히-전략-–-지시와-명령에-지친-상대를-‘적극’-모드로…" class="headerlink" title="9) 나란히 전략 – 지시와 명령에 지친 상대를 ‘적극’ 모드로…"></a>9) 나란히 전략 – 지시와 명령에 지친 상대를 ‘적극’ 모드로…</h3><p>설교하지 말고, 상대의 질문을 구하라. 과거에 실수한 일을 파고 들지 말고, 미래에 범할지도 모를 실수를 피할 수 있는 기회를 주어라<br>주의사항. 상대방이 경계심을 풀었을때 신뢰를 악용하지 말라, 대화를 나누는 동안 상대와 다투지 말라, 질문한 내용의 답변을 존중하라!</p><h3 id="10-빈칸-채우기-전략-–-강요가-먹히지-않는-상대를-‘회유’-모드로…"><a href="#10-빈칸-채우기-전략-–-강요가-먹히지-않는-상대를-‘회유’-모드로…" class="headerlink" title="10) 빈칸 채우기 전략 – 강요가 먹히지 않는 상대를 ‘회유’ 모드로…"></a>10) 빈칸 채우기 전략 – 강요가 먹히지 않는 상대를 ‘회유’ 모드로…</h3><p>상대에게 질문하는 것이 아니라, 상대를 대화 안으로 끌어들이는 것<br>‘당신이 원하시는 바가 <strong><strong>_</strong></strong>.”</p><h3 id="11-No-유도-전략-–-요지부동의-상대를-‘솔깃’-모드로…"><a href="#11-No-유도-전략-–-요지부동의-상대를-‘솔깃’-모드로…" class="headerlink" title="11) No 유도 전략 – 요지부동의 상대를 ‘솔깃’ 모드로…"></a>11) No 유도 전략 – 요지부동의 상대를 ‘솔깃’ 모드로…</h3><p>요구했을때 No라고 했을 경우, 상대는 당신의 마음이 상했을까봐 조금은 방어적이 되어 안절부절못하는 상태가 된다. 그리고 제품을 강요하면서 자기를 힘들게 할거라는 두려움을 느낀다.</p><ul><li>이때, ‘제가 너무 부담을 드렸거나, 아니면 중요한 어떤 것을 빼먹지는 않았나요? 혹시 제가 그랬나요?’ 묻는다. 고객이 Yes라고 답변하면, 심리적으로 당신에 동의한 것이므로 이때부터 yes를 유발하는 질문을 던저라!</li></ul><h3 id="12-파워감사-전략-–-나에게-협조적인-상대를-‘충성’-모드로…"><a href="#12-파워감사-전략-–-나에게-협조적인-상대를-‘충성’-모드로…" class="headerlink" title="12) 파워감사 전략 – 나에게 협조적인 상대를 ‘충성’ 모드로…"></a>12) 파워감사 전략 – 나에게 협조적인 상대를 ‘충성’ 모드로…</h3><ul><li>1단계 : 감사한다.</li><li>2단계 : 상대가 나를 위해 한 노력을 인정하고, 상대가 어려웠을 또는 힘들었을 점을 이야기한다.</li><li>3단계 : 상대의 행동으로 나에게 어떤다른 결과를 가져왔는지 말한다.</li></ul><h2 id="Part4"><a href="#Part4" class="headerlink" title="Part4"></a>Part4</h2><p>위에서 언급한 법칙과 기술을 이용하여 대응하는 7가지 상황에 대해 마지막으로 설명하고 있다.</p><p>전체적으로 너무 좋은 책이었다. 수십 번 읽어도 아깝지 않은 책!<br>나의 가족이나, 회사사람들에게 조금씩 적용해보려고 노력중이다.</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2012/02/19/donot-speak-book/#disqus_thread</comments>
    </item>
    
    <item>
      <title>빌딩부자들</title>
      <link>http://sculove.github.io/blog/2011/05/14/building-rich/</link>
      <guid>http://sculove.github.io/blog/2011/05/14/building-rich/</guid>
      <pubDate>Sat, 14 May 2011 06:00:00 GMT</pubDate>
      <description>
      
        
        
          &lt;img src=&quot;/blog/2011/05/14/building-rich/book.jpg&quot;&gt;
&lt;p&gt;요즘 수익형부동산에 대한 관심이 몰리는 추세를 타서 한번 읽어본 책이다.&lt;br&gt;악착같이 모아서 떵떵거리고 사는 사람들의 이야기들이다.&lt;/p&gt;
&lt;p&gt;대다수
        
      
      </description>
      
      <content:encoded><![CDATA[<img src="/blog/2011/05/14/building-rich/book.jpg"><p>요즘 수익형부동산에 대한 관심이 몰리는 추세를 타서 한번 읽어본 책이다.<br>악착같이 모아서 떵떵거리고 사는 사람들의 이야기들이다.</p><p>대다수 사업으로 자금을 마련한 후, 빌딩투자로 돌아선 사람들이 전형적인 대표적이지만,<br>개중에 순수근로자로서 착실하게 근검 절약하여 종자돈을 모아<br>수익형 오피스텔에 투자해서 잘사는 사람들도 나온다.</p><p>첫부분을 읽다보면 기가 빠지기 마련이다. 100억, 50억 이런 금액이 별대수롭지 않게 나오니<br>나와는 별개의 일들처럼 느껴지지만…<br>마지막 장에서는 천만원가지고. 시작하는 step을 나름 현실적으로 기술하고 있다.</p><blockquote><p>결론은. 근검절약하여 종자돈 만들고,<br>그 종자돈으로 경매로 나온 오피스텔이나 상가 잡아라. 돈이 부족하면 그 물건가지고 대출 이빠이 땡기고, 대출금액과 월세의 차익으로 이익이 나게해라.<br>그러면, 경매로 인한 시세차익도 얻고, 월세도 꼬박꼬박 받아간다.<br>이런 짓(?) 몇 번씩 하게 되면 결국은 빌딩도 살수 있다. 라는 말이다.</p></blockquote><p>말은 쉽지 ㅋㅋ<br>현실적으로 따져보면,</p><ul><li>첫째. 경매 물건을 그렇게 따야하고,</li><li>둘째로, 취득세와 같은 세금은 내용에 빠져있고,</li><li>셋째로, 입주자가 쭉~ 유지가 되는 경우면 가능하다.</li></ul><p>하지만 이책 읽으면서 얻은 것은 <code>수익형 부동산</code>을 가져야겠다라는 생각과 대출껴도 마진만 맞으면 해라. 그리고, 경매에 다시 관심을 가져보자라는 생각 ㅋㅋ</p>]]></content:encoded>
      
      <comments>http://sculove.github.io/blog/2011/05/14/building-rich/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
